/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ReadableBlobMeta : TBase
  {

    public global::StormThrift.SettableBlobMeta Settable { get; set; }

    public long Version { get; set; }

    public ReadableBlobMeta()
    {
    }

    public ReadableBlobMeta(global::StormThrift.SettableBlobMeta settable, long version) : this()
    {
      this.Settable = settable;
      this.Version = version;
    }

    public ReadableBlobMeta DeepCopy()
    {
      var tmp482 = new ReadableBlobMeta();
      if((Settable != null))
      {
        tmp482.Settable = (global::StormThrift.SettableBlobMeta)this.Settable.DeepCopy();
      }
      tmp482.Version = this.Version;
      return tmp482;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_settable = false;
        bool isset_version = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Settable = new global::StormThrift.SettableBlobMeta();
                await Settable.ReadAsync(iprot, cancellationToken);
                isset_settable = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Version = await iprot.ReadI64Async(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_settable)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp483 = new TStruct("ReadableBlobMeta");
        await oprot.WriteStructBeginAsync(tmp483, cancellationToken);
        var tmp484 = new TField();
        if((Settable != null))
        {
          tmp484.Name = "settable";
          tmp484.Type = TType.Struct;
          tmp484.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp484, cancellationToken);
          await Settable.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp484.Name = "version";
        tmp484.Type = TType.I64;
        tmp484.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp484, cancellationToken);
        await oprot.WriteI64Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ReadableBlobMeta other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Settable, other.Settable)
        && global::System.Object.Equals(Version, other.Version);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Settable != null))
        {
          hashcode = (hashcode * 397) + Settable.GetHashCode();
        }
        hashcode = (hashcode * 397) + Version.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp485 = new StringBuilder("ReadableBlobMeta(");
      if((Settable != null))
      {
        tmp485.Append(", Settable: ");
        Settable.ToString(tmp485);
      }
      tmp485.Append(", Version: ");
      Version.ToString(tmp485);
      tmp485.Append(')');
      return tmp485.ToString();
    }
  }

}
