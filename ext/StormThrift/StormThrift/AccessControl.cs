/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class AccessControl : TBase
  {
    private string _name;

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.AccessControlType"/>
    /// </summary>
    public global::StormThrift.AccessControlType Type { get; set; }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Access { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool name;
    }

    public AccessControl()
    {
    }

    public AccessControl(global::StormThrift.AccessControlType type, int access) : this()
    {
      this.Type = type;
      this.Access = access;
    }

    public AccessControl DeepCopy()
    {
      var tmp468 = new AccessControl();
      tmp468.Type = this.Type;
      if((Name != null) && __isset.name)
      {
        tmp468.Name = this.Name;
      }
      tmp468.__isset.name = this.__isset.name;
      tmp468.Access = this.Access;
      return tmp468;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        bool isset_access = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::StormThrift.AccessControlType)await iprot.ReadI32Async(cancellationToken);
                isset_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Access = await iprot.ReadI32Async(cancellationToken);
                isset_access = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_access)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp469 = new TStruct("AccessControl");
        await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
        var tmp470 = new TField();
        tmp470.Name = "type";
        tmp470.Type = TType.I32;
        tmp470.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Name != null) && __isset.name)
        {
          tmp470.Name = "name";
          tmp470.Type = TType.String;
          tmp470.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp470.Name = "access";
        tmp470.Type = TType.I32;
        tmp470.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
        await oprot.WriteI32Async(Access, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AccessControl other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Type, other.Type)
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && global::System.Object.Equals(Access, other.Access);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Type.GetHashCode();
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        hashcode = (hashcode * 397) + Access.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp471 = new StringBuilder("AccessControl(");
      tmp471.Append(", Type: ");
      Type.ToString(tmp471);
      if((Name != null) && __isset.name)
      {
        tmp471.Append(", Name: ");
        Name.ToString(tmp471);
      }
      tmp471.Append(", Access: ");
      Access.ToString(tmp471);
      tmp471.Append(')');
      return tmp471.ToString();
    }
  }

}
