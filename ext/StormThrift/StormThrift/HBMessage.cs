/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class HBMessage : TBase
  {
    private global::StormThrift.HBServerMessageType _type;
    private global::StormThrift.HBMessageData _data;
    private int _message_id;

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.HBServerMessageType"/>
    /// </summary>
    public global::StormThrift.HBServerMessageType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public global::StormThrift.HBMessageData Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }

    public int Message_id
    {
      get
      {
        return _message_id;
      }
      set
      {
        __isset.message_id = true;
        this._message_id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool data;
      public bool message_id;
    }

    public HBMessage()
    {
      this._message_id = -1;
      this.__isset.message_id = true;
    }

    public HBMessage DeepCopy()
    {
      var tmp753 = new HBMessage();
      if(__isset.type)
      {
        tmp753.Type = this.Type;
      }
      tmp753.__isset.type = this.__isset.type;
      if((Data != null) && __isset.data)
      {
        tmp753.Data = (global::StormThrift.HBMessageData)this.Data.DeepCopy();
      }
      tmp753.__isset.data = this.__isset.data;
      if(__isset.message_id)
      {
        tmp753.Message_id = this.Message_id;
      }
      tmp753.__isset.message_id = this.__isset.message_id;
      return tmp753;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::StormThrift.HBServerMessageType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Data = new global::StormThrift.HBMessageData();
                await Data.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Message_id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp754 = new TStruct("HBMessage");
        await oprot.WriteStructBeginAsync(tmp754, cancellationToken);
        var tmp755 = new TField();
        if(__isset.type)
        {
          tmp755.Name = "type";
          tmp755.Type = TType.I32;
          tmp755.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp755, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Data != null) && __isset.data)
        {
          tmp755.Name = "data";
          tmp755.Type = TType.Struct;
          tmp755.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp755, cancellationToken);
          await Data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.message_id)
        {
          tmp755.Name = "message_id";
          tmp755.Type = TType.I32;
          tmp755.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp755, cancellationToken);
          await oprot.WriteI32Async(Message_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HBMessage other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.data == other.__isset.data) && ((!__isset.data) || (global::System.Object.Equals(Data, other.Data))))
        && ((__isset.message_id == other.__isset.message_id) && ((!__isset.message_id) || (global::System.Object.Equals(Message_id, other.Message_id))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Data != null) && __isset.data)
        {
          hashcode = (hashcode * 397) + Data.GetHashCode();
        }
        if(__isset.message_id)
        {
          hashcode = (hashcode * 397) + Message_id.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp756 = new StringBuilder("HBMessage(");
      int tmp757 = 0;
      if(__isset.type)
      {
        if(0 < tmp757++) { tmp756.Append(", "); }
        tmp756.Append("Type: ");
        Type.ToString(tmp756);
      }
      if((Data != null) && __isset.data)
      {
        if(0 < tmp757++) { tmp756.Append(", "); }
        tmp756.Append("Data: ");
        Data.ToString(tmp756);
      }
      if(__isset.message_id)
      {
        if(0 < tmp757++) { tmp756.Append(", "); }
        tmp756.Append("Message_id: ");
        Message_id.ToString(tmp756);
      }
      tmp756.Append(')');
      return tmp756.ToString();
    }
  }

}
