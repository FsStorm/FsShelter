/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LSWorkerHeartbeat : TBase
  {

    public int Time_secs { get; set; }

    public string Topology_id { get; set; }

    public List<global::StormThrift.ExecutorInfo> Executors { get; set; }

    public int Port { get; set; }

    public LSWorkerHeartbeat()
    {
    }

    public LSWorkerHeartbeat(int time_secs, string topology_id, List<global::StormThrift.ExecutorInfo> executors, int port) : this()
    {
      this.Time_secs = time_secs;
      this.Topology_id = topology_id;
      this.Executors = executors;
      this.Port = port;
    }

    public LSWorkerHeartbeat DeepCopy()
    {
      var tmp650 = new LSWorkerHeartbeat();
      tmp650.Time_secs = this.Time_secs;
      if((Topology_id != null))
      {
        tmp650.Topology_id = this.Topology_id;
      }
      if((Executors != null))
      {
        tmp650.Executors = this.Executors.DeepCopy();
      }
      tmp650.Port = this.Port;
      return tmp650;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_time_secs = false;
        bool isset_topology_id = false;
        bool isset_executors = false;
        bool isset_port = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Time_secs = await iprot.ReadI32Async(cancellationToken);
                isset_time_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Topology_id = await iprot.ReadStringAsync(cancellationToken);
                isset_topology_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list651 = await iprot.ReadListBeginAsync(cancellationToken);
                  Executors = new List<global::StormThrift.ExecutorInfo>(_list651.Count);
                  for(int _i652 = 0; _i652 < _list651.Count; ++_i652)
                  {
                    global::StormThrift.ExecutorInfo _elem653;
                    _elem653 = new global::StormThrift.ExecutorInfo();
                    await _elem653.ReadAsync(iprot, cancellationToken);
                    Executors.Add(_elem653);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_executors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Port = await iprot.ReadI32Async(cancellationToken);
                isset_port = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_time_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_topology_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_executors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_port)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp654 = new TStruct("LSWorkerHeartbeat");
        await oprot.WriteStructBeginAsync(tmp654, cancellationToken);
        var tmp655 = new TField();
        tmp655.Name = "time_secs";
        tmp655.Type = TType.I32;
        tmp655.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
        await oprot.WriteI32Async(Time_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Topology_id != null))
        {
          tmp655.Name = "topology_id";
          tmp655.Type = TType.String;
          tmp655.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
          await oprot.WriteStringAsync(Topology_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Executors != null))
        {
          tmp655.Name = "executors";
          tmp655.Type = TType.List;
          tmp655.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Executors.Count), cancellationToken);
            foreach (global::StormThrift.ExecutorInfo _iter656 in Executors)
            {
              await _iter656.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp655.Name = "port";
        tmp655.Type = TType.I32;
        tmp655.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
        await oprot.WriteI32Async(Port, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LSWorkerHeartbeat other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Time_secs, other.Time_secs)
        && global::System.Object.Equals(Topology_id, other.Topology_id)
        && TCollections.Equals(Executors, other.Executors)
        && global::System.Object.Equals(Port, other.Port);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Time_secs.GetHashCode();
        if((Topology_id != null))
        {
          hashcode = (hashcode * 397) + Topology_id.GetHashCode();
        }
        if((Executors != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Executors);
        }
        hashcode = (hashcode * 397) + Port.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp657 = new StringBuilder("LSWorkerHeartbeat(");
      tmp657.Append(", Time_secs: ");
      Time_secs.ToString(tmp657);
      if((Topology_id != null))
      {
        tmp657.Append(", Topology_id: ");
        Topology_id.ToString(tmp657);
      }
      if((Executors != null))
      {
        tmp657.Append(", Executors: ");
        Executors.ToString(tmp657);
      }
      tmp657.Append(", Port: ");
      Port.ToString(tmp657);
      tmp657.Append(')');
      return tmp657.ToString();
    }
  }

}
