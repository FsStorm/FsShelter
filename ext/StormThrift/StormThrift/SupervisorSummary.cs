/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class SupervisorSummary : TBase
  {
    private string _version;
    private Dictionary<string, double> _total_resources;
    private double _used_mem;
    private double _used_cpu;

    public string Host { get; set; }

    public int Uptime_secs { get; set; }

    public int Num_workers { get; set; }

    public int Num_used_workers { get; set; }

    public string Supervisor_id { get; set; }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public Dictionary<string, double> Total_resources
    {
      get
      {
        return _total_resources;
      }
      set
      {
        __isset.total_resources = true;
        this._total_resources = value;
      }
    }

    public double Used_mem
    {
      get
      {
        return _used_mem;
      }
      set
      {
        __isset.used_mem = true;
        this._used_mem = value;
      }
    }

    public double Used_cpu
    {
      get
      {
        return _used_cpu;
      }
      set
      {
        __isset.used_cpu = true;
        this._used_cpu = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool version;
      public bool total_resources;
      public bool used_mem;
      public bool used_cpu;
    }

    public SupervisorSummary()
    {
      this._version = "VERSION_NOT_PROVIDED";
      this.__isset.version = true;
    }

    public SupervisorSummary(string host, int uptime_secs, int num_workers, int num_used_workers, string supervisor_id) : this()
    {
      this.Host = host;
      this.Uptime_secs = uptime_secs;
      this.Num_workers = num_workers;
      this.Num_used_workers = num_used_workers;
      this.Supervisor_id = supervisor_id;
    }

    public SupervisorSummary DeepCopy()
    {
      var tmp140 = new SupervisorSummary();
      if((Host != null))
      {
        tmp140.Host = this.Host;
      }
      tmp140.Uptime_secs = this.Uptime_secs;
      tmp140.Num_workers = this.Num_workers;
      tmp140.Num_used_workers = this.Num_used_workers;
      if((Supervisor_id != null))
      {
        tmp140.Supervisor_id = this.Supervisor_id;
      }
      if((Version != null) && __isset.version)
      {
        tmp140.Version = this.Version;
      }
      tmp140.__isset.version = this.__isset.version;
      if((Total_resources != null) && __isset.total_resources)
      {
        tmp140.Total_resources = this.Total_resources.DeepCopy();
      }
      tmp140.__isset.total_resources = this.__isset.total_resources;
      if(__isset.used_mem)
      {
        tmp140.Used_mem = this.Used_mem;
      }
      tmp140.__isset.used_mem = this.__isset.used_mem;
      if(__isset.used_cpu)
      {
        tmp140.Used_cpu = this.Used_cpu;
      }
      tmp140.__isset.used_cpu = this.__isset.used_cpu;
      return tmp140;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_host = false;
        bool isset_uptime_secs = false;
        bool isset_num_workers = false;
        bool isset_num_used_workers = false;
        bool isset_supervisor_id = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
                isset_host = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Uptime_secs = await iprot.ReadI32Async(cancellationToken);
                isset_uptime_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Num_workers = await iprot.ReadI32Async(cancellationToken);
                isset_num_workers = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Num_used_workers = await iprot.ReadI32Async(cancellationToken);
                isset_num_used_workers = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Supervisor_id = await iprot.ReadStringAsync(cancellationToken);
                isset_supervisor_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map141 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Total_resources = new Dictionary<string, double>(_map141.Count);
                  for(int _i142 = 0; _i142 < _map141.Count; ++_i142)
                  {
                    string _key143;
                    double _val144;
                    _key143 = await iprot.ReadStringAsync(cancellationToken);
                    _val144 = await iprot.ReadDoubleAsync(cancellationToken);
                    Total_resources[_key143] = _val144;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Double)
              {
                Used_mem = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Double)
              {
                Used_cpu = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_host)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_uptime_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_workers)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_used_workers)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_supervisor_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp145 = new TStruct("SupervisorSummary");
        await oprot.WriteStructBeginAsync(tmp145, cancellationToken);
        var tmp146 = new TField();
        if((Host != null))
        {
          tmp146.Name = "host";
          tmp146.Type = TType.String;
          tmp146.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp146.Name = "uptime_secs";
        tmp146.Type = TType.I32;
        tmp146.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
        await oprot.WriteI32Async(Uptime_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp146.Name = "num_workers";
        tmp146.Type = TType.I32;
        tmp146.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
        await oprot.WriteI32Async(Num_workers, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp146.Name = "num_used_workers";
        tmp146.Type = TType.I32;
        tmp146.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
        await oprot.WriteI32Async(Num_used_workers, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Supervisor_id != null))
        {
          tmp146.Name = "supervisor_id";
          tmp146.Type = TType.String;
          tmp146.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          await oprot.WriteStringAsync(Supervisor_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Version != null) && __isset.version)
        {
          tmp146.Name = "version";
          tmp146.Type = TType.String;
          tmp146.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Total_resources != null) && __isset.total_resources)
        {
          tmp146.Name = "total_resources";
          tmp146.Type = TType.Map;
          tmp146.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Double, Total_resources.Count), cancellationToken);
            foreach (string _iter147 in Total_resources.Keys)
            {
              await oprot.WriteStringAsync(_iter147, cancellationToken);
              await oprot.WriteDoubleAsync(Total_resources[_iter147], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.used_mem)
        {
          tmp146.Name = "used_mem";
          tmp146.Type = TType.Double;
          tmp146.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          await oprot.WriteDoubleAsync(Used_mem, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.used_cpu)
        {
          tmp146.Name = "used_cpu";
          tmp146.Type = TType.Double;
          tmp146.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp146, cancellationToken);
          await oprot.WriteDoubleAsync(Used_cpu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SupervisorSummary other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Host, other.Host)
        && global::System.Object.Equals(Uptime_secs, other.Uptime_secs)
        && global::System.Object.Equals(Num_workers, other.Num_workers)
        && global::System.Object.Equals(Num_used_workers, other.Num_used_workers)
        && global::System.Object.Equals(Supervisor_id, other.Supervisor_id)
        && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
        && ((__isset.total_resources == other.__isset.total_resources) && ((!__isset.total_resources) || (TCollections.Equals(Total_resources, other.Total_resources))))
        && ((__isset.used_mem == other.__isset.used_mem) && ((!__isset.used_mem) || (global::System.Object.Equals(Used_mem, other.Used_mem))))
        && ((__isset.used_cpu == other.__isset.used_cpu) && ((!__isset.used_cpu) || (global::System.Object.Equals(Used_cpu, other.Used_cpu))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null))
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        hashcode = (hashcode * 397) + Uptime_secs.GetHashCode();
        hashcode = (hashcode * 397) + Num_workers.GetHashCode();
        hashcode = (hashcode * 397) + Num_used_workers.GetHashCode();
        if((Supervisor_id != null))
        {
          hashcode = (hashcode * 397) + Supervisor_id.GetHashCode();
        }
        if((Version != null) && __isset.version)
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
        if((Total_resources != null) && __isset.total_resources)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Total_resources);
        }
        if(__isset.used_mem)
        {
          hashcode = (hashcode * 397) + Used_mem.GetHashCode();
        }
        if(__isset.used_cpu)
        {
          hashcode = (hashcode * 397) + Used_cpu.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp148 = new StringBuilder("SupervisorSummary(");
      if((Host != null))
      {
        tmp148.Append(", Host: ");
        Host.ToString(tmp148);
      }
      tmp148.Append(", Uptime_secs: ");
      Uptime_secs.ToString(tmp148);
      tmp148.Append(", Num_workers: ");
      Num_workers.ToString(tmp148);
      tmp148.Append(", Num_used_workers: ");
      Num_used_workers.ToString(tmp148);
      if((Supervisor_id != null))
      {
        tmp148.Append(", Supervisor_id: ");
        Supervisor_id.ToString(tmp148);
      }
      if((Version != null) && __isset.version)
      {
        tmp148.Append(", Version: ");
        Version.ToString(tmp148);
      }
      if((Total_resources != null) && __isset.total_resources)
      {
        tmp148.Append(", Total_resources: ");
        Total_resources.ToString(tmp148);
      }
      if(__isset.used_mem)
      {
        tmp148.Append(", Used_mem: ");
        Used_mem.ToString(tmp148);
      }
      if(__isset.used_cpu)
      {
        tmp148.Append(", Used_cpu: ");
        Used_cpu.ToString(tmp148);
      }
      tmp148.Append(')');
      return tmp148.ToString();
    }
  }

}
