/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{
  public partial class DistributedRPCInvocations
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task result(string id, string result, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.DRPCRequest> fetchRequest(string functionName, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task failRequest(string id, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task result(string id, string result, CancellationToken cancellationToken = default)
      {
        await send_result(id, result, cancellationToken);
        await recv_result(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_result(string id, string result, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("result", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1649 = new InternalStructs.result_args() {
          Id = id,
          Result = result,
        };
        
        await tmp1649.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_result(CancellationToken cancellationToken = default)
      {
        
        var tmp1650 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1650.Type == TMessageType.Exception)
        {
          var tmp1651 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1651;
        }

        var tmp1652 = new InternalStructs.result_result();
        await tmp1652.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1652.__isset.aze)
        {
          throw tmp1652.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.DRPCRequest> fetchRequest(string functionName, CancellationToken cancellationToken = default)
      {
        await send_fetchRequest(functionName, cancellationToken);
        return await recv_fetchRequest(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_fetchRequest(string functionName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("fetchRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1653 = new InternalStructs.fetchRequest_args() {
          FunctionName = functionName,
        };
        
        await tmp1653.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.DRPCRequest> recv_fetchRequest(CancellationToken cancellationToken = default)
      {
        
        var tmp1654 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1654.Type == TMessageType.Exception)
        {
          var tmp1655 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1655;
        }

        var tmp1656 = new InternalStructs.fetchRequest_result();
        await tmp1656.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1656.__isset.success)
        {
          return tmp1656.Success;
        }
        if (tmp1656.__isset.aze)
        {
          throw tmp1656.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchRequest failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task failRequest(string id, CancellationToken cancellationToken = default)
      {
        await send_failRequest(id, cancellationToken);
        await recv_failRequest(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_failRequest(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("failRequest", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1657 = new InternalStructs.failRequest_args() {
          Id = id,
        };
        
        await tmp1657.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_failRequest(CancellationToken cancellationToken = default)
      {
        
        var tmp1658 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1658.Type == TMessageType.Exception)
        {
          var tmp1659 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1659;
        }

        var tmp1660 = new InternalStructs.failRequest_result();
        await tmp1660.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1660.__isset.aze)
        {
          throw tmp1660.Aze;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["result"] = result_ProcessAsync;
        processMap_["fetchRequest"] = fetchRequest_ProcessAsync;
        processMap_["failRequest"] = failRequest_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task result_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1661 = new InternalStructs.result_args();
        await tmp1661.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1662 = new InternalStructs.result_result();
        try
        {
          try
          {
            await _iAsync.result(tmp1661.Id, tmp1661.Result, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1663)
          {
            tmp1662.Aze = tmp1663;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("result", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1662.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1664)
        {
          var tmp1665 = $"Error occurred in {GetType().FullName}: {tmp1664.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1664, tmp1665);
          else
            Console.Error.WriteLine(tmp1665);
          var tmp1666 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("result", TMessageType.Exception, seqid), cancellationToken);
          await tmp1666.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task fetchRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1667 = new InternalStructs.fetchRequest_args();
        await tmp1667.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1668 = new InternalStructs.fetchRequest_result();
        try
        {
          try
          {
            tmp1668.Success = await _iAsync.fetchRequest(tmp1667.FunctionName, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1669)
          {
            tmp1668.Aze = tmp1669;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("fetchRequest", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1668.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1670)
        {
          var tmp1671 = $"Error occurred in {GetType().FullName}: {tmp1670.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1670, tmp1671);
          else
            Console.Error.WriteLine(tmp1671);
          var tmp1672 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("fetchRequest", TMessageType.Exception, seqid), cancellationToken);
          await tmp1672.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task failRequest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1673 = new InternalStructs.failRequest_args();
        await tmp1673.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1674 = new InternalStructs.failRequest_result();
        try
        {
          try
          {
            await _iAsync.failRequest(tmp1673.Id, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1675)
          {
            tmp1674.Aze = tmp1675;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("failRequest", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1674.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1676)
        {
          var tmp1677 = $"Error occurred in {GetType().FullName}: {tmp1676.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1676, tmp1677);
          else
            Console.Error.WriteLine(tmp1677);
          var tmp1678 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("failRequest", TMessageType.Exception, seqid), cancellationToken);
          await tmp1678.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class result_args : TBase
      {
        private string _id;
        private string _result;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Result
        {
          get
          {
            return _result;
          }
          set
          {
            __isset.result = true;
            this._result = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool result;
        }

        public result_args()
        {
        }

        public result_args DeepCopy()
        {
          var tmp1679 = new result_args();
          if((Id != null) && __isset.id)
          {
            tmp1679.Id = this.Id;
          }
          tmp1679.__isset.id = this.__isset.id;
          if((Result != null) && __isset.result)
          {
            tmp1679.Result = this.Result;
          }
          tmp1679.__isset.result = this.__isset.result;
          return tmp1679;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Result = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1680 = new TStruct("result_args");
            await oprot.WriteStructBeginAsync(tmp1680, cancellationToken);
            var tmp1681 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1681.Name = "id";
              tmp1681.Type = TType.String;
              tmp1681.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1681, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Result != null) && __isset.result)
            {
              tmp1681.Name = "result";
              tmp1681.Type = TType.String;
              tmp1681.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1681, cancellationToken);
              await oprot.WriteStringAsync(Result, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is result_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.result == other.__isset.result) && ((!__isset.result) || (global::System.Object.Equals(Result, other.Result))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Result != null) && __isset.result)
            {
              hashcode = (hashcode * 397) + Result.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1682 = new StringBuilder("result_args(");
          int tmp1683 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1683++) { tmp1682.Append(", "); }
            tmp1682.Append("Id: ");
            Id.ToString(tmp1682);
          }
          if((Result != null) && __isset.result)
          {
            if(0 < tmp1683++) { tmp1682.Append(", "); }
            tmp1682.Append("Result: ");
            Result.ToString(tmp1682);
          }
          tmp1682.Append(')');
          return tmp1682.ToString();
        }
      }


      public partial class result_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public result_result()
        {
        }

        public result_result DeepCopy()
        {
          var tmp1684 = new result_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1684.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1684.__isset.aze = this.__isset.aze;
          return tmp1684;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1685 = new TStruct("result_result");
            await oprot.WriteStructBeginAsync(tmp1685, cancellationToken);
            var tmp1686 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1686.Name = "Aze";
                tmp1686.Type = TType.Struct;
                tmp1686.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1686, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is result_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1687 = new StringBuilder("result_result(");
          int tmp1688 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1688++) { tmp1687.Append(", "); }
            tmp1687.Append("Aze: ");
            Aze.ToString(tmp1687);
          }
          tmp1687.Append(')');
          return tmp1687.ToString();
        }
      }


      public partial class fetchRequest_args : TBase
      {
        private string _functionName;

        public string FunctionName
        {
          get
          {
            return _functionName;
          }
          set
          {
            __isset.functionName = true;
            this._functionName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool functionName;
        }

        public fetchRequest_args()
        {
        }

        public fetchRequest_args DeepCopy()
        {
          var tmp1689 = new fetchRequest_args();
          if((FunctionName != null) && __isset.functionName)
          {
            tmp1689.FunctionName = this.FunctionName;
          }
          tmp1689.__isset.functionName = this.__isset.functionName;
          return tmp1689;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1690 = new TStruct("fetchRequest_args");
            await oprot.WriteStructBeginAsync(tmp1690, cancellationToken);
            var tmp1691 = new TField();
            if((FunctionName != null) && __isset.functionName)
            {
              tmp1691.Name = "functionName";
              tmp1691.Type = TType.String;
              tmp1691.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1691, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fetchRequest_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.functionName == other.__isset.functionName) && ((!__isset.functionName) || (global::System.Object.Equals(FunctionName, other.FunctionName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((FunctionName != null) && __isset.functionName)
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1692 = new StringBuilder("fetchRequest_args(");
          int tmp1693 = 0;
          if((FunctionName != null) && __isset.functionName)
          {
            if(0 < tmp1693++) { tmp1692.Append(", "); }
            tmp1692.Append("FunctionName: ");
            FunctionName.ToString(tmp1692);
          }
          tmp1692.Append(')');
          return tmp1692.ToString();
        }
      }


      public partial class fetchRequest_result : TBase
      {
        private global::StormThrift.DRPCRequest _success;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.DRPCRequest Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public fetchRequest_result()
        {
        }

        public fetchRequest_result DeepCopy()
        {
          var tmp1694 = new fetchRequest_result();
          if((Success != null) && __isset.success)
          {
            tmp1694.Success = (global::StormThrift.DRPCRequest)this.Success.DeepCopy();
          }
          tmp1694.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1694.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1694.__isset.aze = this.__isset.aze;
          return tmp1694;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.DRPCRequest();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1695 = new TStruct("fetchRequest_result");
            await oprot.WriteStructBeginAsync(tmp1695, cancellationToken);
            var tmp1696 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1696.Name = "Success";
                tmp1696.Type = TType.Struct;
                tmp1696.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1696, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1696.Name = "Aze";
                tmp1696.Type = TType.Struct;
                tmp1696.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1696, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is fetchRequest_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1697 = new StringBuilder("fetchRequest_result(");
          int tmp1698 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1698++) { tmp1697.Append(", "); }
            tmp1697.Append("Success: ");
            Success.ToString(tmp1697);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1698++) { tmp1697.Append(", "); }
            tmp1697.Append("Aze: ");
            Aze.ToString(tmp1697);
          }
          tmp1697.Append(')');
          return tmp1697.ToString();
        }
      }


      public partial class failRequest_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public failRequest_args()
        {
        }

        public failRequest_args DeepCopy()
        {
          var tmp1699 = new failRequest_args();
          if((Id != null) && __isset.id)
          {
            tmp1699.Id = this.Id;
          }
          tmp1699.__isset.id = this.__isset.id;
          return tmp1699;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1700 = new TStruct("failRequest_args");
            await oprot.WriteStructBeginAsync(tmp1700, cancellationToken);
            var tmp1701 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1701.Name = "id";
              tmp1701.Type = TType.String;
              tmp1701.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1701, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is failRequest_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1702 = new StringBuilder("failRequest_args(");
          int tmp1703 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1703++) { tmp1702.Append(", "); }
            tmp1702.Append("Id: ");
            Id.ToString(tmp1702);
          }
          tmp1702.Append(')');
          return tmp1702.ToString();
        }
      }


      public partial class failRequest_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public failRequest_result()
        {
        }

        public failRequest_result DeepCopy()
        {
          var tmp1704 = new failRequest_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1704.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1704.__isset.aze = this.__isset.aze;
          return tmp1704;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1705 = new TStruct("failRequest_result");
            await oprot.WriteStructBeginAsync(tmp1705, cancellationToken);
            var tmp1706 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1706.Name = "Aze";
                tmp1706.Type = TType.Struct;
                tmp1706.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1706, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is failRequest_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1707 = new StringBuilder("failRequest_result(");
          int tmp1708 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1708++) { tmp1707.Append(", "); }
            tmp1707.Append("Aze: ");
            Aze.ToString(tmp1707);
          }
          tmp1707.Append(')');
          return tmp1707.ToString();
        }
      }

    }

  }
}
