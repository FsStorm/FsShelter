/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ShellComponent : TBase
  {
    private string _execution_command;
    private string _script;

    public string Execution_command
    {
      get
      {
        return _execution_command;
      }
      set
      {
        __isset.execution_command = true;
        this._execution_command = value;
      }
    }

    public string Script
    {
      get
      {
        return _script;
      }
      set
      {
        __isset.script = true;
        this._script = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool execution_command;
      public bool script;
    }

    public ShellComponent()
    {
    }

    public ShellComponent DeepCopy()
    {
      var tmp41 = new ShellComponent();
      if((Execution_command != null) && __isset.execution_command)
      {
        tmp41.Execution_command = this.Execution_command;
      }
      tmp41.__isset.execution_command = this.__isset.execution_command;
      if((Script != null) && __isset.script)
      {
        tmp41.Script = this.Script;
      }
      tmp41.__isset.script = this.__isset.script;
      return tmp41;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Execution_command = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Script = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp42 = new TStruct("ShellComponent");
        await oprot.WriteStructBeginAsync(tmp42, cancellationToken);
        var tmp43 = new TField();
        if((Execution_command != null) && __isset.execution_command)
        {
          tmp43.Name = "execution_command";
          tmp43.Type = TType.String;
          tmp43.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp43, cancellationToken);
          await oprot.WriteStringAsync(Execution_command, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Script != null) && __isset.script)
        {
          tmp43.Name = "script";
          tmp43.Type = TType.String;
          tmp43.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp43, cancellationToken);
          await oprot.WriteStringAsync(Script, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ShellComponent other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.execution_command == other.__isset.execution_command) && ((!__isset.execution_command) || (global::System.Object.Equals(Execution_command, other.Execution_command))))
        && ((__isset.script == other.__isset.script) && ((!__isset.script) || (global::System.Object.Equals(Script, other.Script))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Execution_command != null) && __isset.execution_command)
        {
          hashcode = (hashcode * 397) + Execution_command.GetHashCode();
        }
        if((Script != null) && __isset.script)
        {
          hashcode = (hashcode * 397) + Script.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp44 = new StringBuilder("ShellComponent(");
      int tmp45 = 0;
      if((Execution_command != null) && __isset.execution_command)
      {
        if(0 < tmp45++) { tmp44.Append(", "); }
        tmp44.Append("Execution_command: ");
        Execution_command.ToString(tmp44);
      }
      if((Script != null) && __isset.script)
      {
        if(0 < tmp45++) { tmp44.Append(", "); }
        tmp44.Append("Script: ");
        Script.ToString(tmp44);
      }
      tmp44.Append(')');
      return tmp44.ToString();
    }
  }

}
