/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ExecutorAggregateStats : TBase
  {
    private global::StormThrift.ExecutorSummary _exec_summary;
    private global::StormThrift.ComponentAggregateStats _stats;

    public global::StormThrift.ExecutorSummary Exec_summary
    {
      get
      {
        return _exec_summary;
      }
      set
      {
        __isset.exec_summary = true;
        this._exec_summary = value;
      }
    }

    public global::StormThrift.ComponentAggregateStats Stats
    {
      get
      {
        return _stats;
      }
      set
      {
        __isset.stats = true;
        this._stats = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool exec_summary;
      public bool stats;
    }

    public ExecutorAggregateStats()
    {
    }

    public ExecutorAggregateStats DeepCopy()
    {
      var tmp405 = new ExecutorAggregateStats();
      if((Exec_summary != null) && __isset.exec_summary)
      {
        tmp405.Exec_summary = (global::StormThrift.ExecutorSummary)this.Exec_summary.DeepCopy();
      }
      tmp405.__isset.exec_summary = this.__isset.exec_summary;
      if((Stats != null) && __isset.stats)
      {
        tmp405.Stats = (global::StormThrift.ComponentAggregateStats)this.Stats.DeepCopy();
      }
      tmp405.__isset.stats = this.__isset.stats;
      return tmp405;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Exec_summary = new global::StormThrift.ExecutorSummary();
                await Exec_summary.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Stats = new global::StormThrift.ComponentAggregateStats();
                await Stats.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp406 = new TStruct("ExecutorAggregateStats");
        await oprot.WriteStructBeginAsync(tmp406, cancellationToken);
        var tmp407 = new TField();
        if((Exec_summary != null) && __isset.exec_summary)
        {
          tmp407.Name = "exec_summary";
          tmp407.Type = TType.Struct;
          tmp407.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp407, cancellationToken);
          await Exec_summary.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Stats != null) && __isset.stats)
        {
          tmp407.Name = "stats";
          tmp407.Type = TType.Struct;
          tmp407.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp407, cancellationToken);
          await Stats.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ExecutorAggregateStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.exec_summary == other.__isset.exec_summary) && ((!__isset.exec_summary) || (global::System.Object.Equals(Exec_summary, other.Exec_summary))))
        && ((__isset.stats == other.__isset.stats) && ((!__isset.stats) || (global::System.Object.Equals(Stats, other.Stats))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Exec_summary != null) && __isset.exec_summary)
        {
          hashcode = (hashcode * 397) + Exec_summary.GetHashCode();
        }
        if((Stats != null) && __isset.stats)
        {
          hashcode = (hashcode * 397) + Stats.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp408 = new StringBuilder("ExecutorAggregateStats(");
      int tmp409 = 0;
      if((Exec_summary != null) && __isset.exec_summary)
      {
        if(0 < tmp409++) { tmp408.Append(", "); }
        tmp408.Append("Exec_summary: ");
        Exec_summary.ToString(tmp408);
      }
      if((Stats != null) && __isset.stats)
      {
        if(0 < tmp409++) { tmp408.Append(", "); }
        tmp408.Append("Stats: ");
        Stats.ToString(tmp408);
      }
      tmp408.Append(')');
      return tmp408.ToString();
    }
  }

}
