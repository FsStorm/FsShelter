/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LSSupervisorAssignments : TBase
  {

    public Dictionary<int, global::StormThrift.LocalAssignment> Assignments { get; set; }

    public LSSupervisorAssignments()
    {
    }

    public LSSupervisorAssignments(Dictionary<int, global::StormThrift.LocalAssignment> assignments) : this()
    {
      this.Assignments = assignments;
    }

    public LSSupervisorAssignments DeepCopy()
    {
      var tmp640 = new LSSupervisorAssignments();
      if((Assignments != null))
      {
        tmp640.Assignments = this.Assignments.DeepCopy();
      }
      return tmp640;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_assignments = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map641 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Assignments = new Dictionary<int, global::StormThrift.LocalAssignment>(_map641.Count);
                  for(int _i642 = 0; _i642 < _map641.Count; ++_i642)
                  {
                    int _key643;
                    global::StormThrift.LocalAssignment _val644;
                    _key643 = await iprot.ReadI32Async(cancellationToken);
                    _val644 = new global::StormThrift.LocalAssignment();
                    await _val644.ReadAsync(iprot, cancellationToken);
                    Assignments[_key643] = _val644;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_assignments = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_assignments)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp645 = new TStruct("LSSupervisorAssignments");
        await oprot.WriteStructBeginAsync(tmp645, cancellationToken);
        var tmp646 = new TField();
        if((Assignments != null))
        {
          tmp646.Name = "assignments";
          tmp646.Type = TType.Map;
          tmp646.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp646, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Struct, Assignments.Count), cancellationToken);
            foreach (int _iter647 in Assignments.Keys)
            {
              await oprot.WriteI32Async(_iter647, cancellationToken);
              await Assignments[_iter647].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LSSupervisorAssignments other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Assignments, other.Assignments);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Assignments != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Assignments);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp648 = new StringBuilder("LSSupervisorAssignments(");
      if((Assignments != null))
      {
        tmp648.Append(", Assignments: ");
        Assignments.ToString(tmp648);
      }
      tmp648.Append(')');
      return tmp648.ToString();
    }
  }

}
