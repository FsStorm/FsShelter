/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class Assignment : TBase
  {
    private Dictionary<string, string> _node_host;
    private Dictionary<List<long>, global::StormThrift.NodeInfo> _executor_node_port;
    private Dictionary<List<long>, long> _executor_start_time_secs;
    private Dictionary<global::StormThrift.NodeInfo, global::StormThrift.WorkerResources> _worker_resources;

    public string Master_code_dir { get; set; }

    public Dictionary<string, string> Node_host
    {
      get
      {
        return _node_host;
      }
      set
      {
        __isset.node_host = true;
        this._node_host = value;
      }
    }

    public Dictionary<List<long>, global::StormThrift.NodeInfo> Executor_node_port
    {
      get
      {
        return _executor_node_port;
      }
      set
      {
        __isset.executor_node_port = true;
        this._executor_node_port = value;
      }
    }

    public Dictionary<List<long>, long> Executor_start_time_secs
    {
      get
      {
        return _executor_start_time_secs;
      }
      set
      {
        __isset.executor_start_time_secs = true;
        this._executor_start_time_secs = value;
      }
    }

    public Dictionary<global::StormThrift.NodeInfo, global::StormThrift.WorkerResources> Worker_resources
    {
      get
      {
        return _worker_resources;
      }
      set
      {
        __isset.worker_resources = true;
        this._worker_resources = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool node_host;
      public bool executor_node_port;
      public bool executor_start_time_secs;
      public bool worker_resources;
    }

    public Assignment()
    {
      this._node_host = new Dictionary<string, string>();
      this.__isset.node_host = true;
      this._executor_node_port = new Dictionary<List<long>, global::StormThrift.NodeInfo>();
      this.__isset.executor_node_port = true;
      this._executor_start_time_secs = new Dictionary<List<long>, long>();
      this.__isset.executor_start_time_secs = true;
      this._worker_resources = new Dictionary<global::StormThrift.NodeInfo, global::StormThrift.WorkerResources>();
      this.__isset.worker_resources = true;
    }

    public Assignment(string master_code_dir) : this()
    {
      this.Master_code_dir = master_code_dir;
    }

    public Assignment DeepCopy()
    {
      var tmp538 = new Assignment();
      if((Master_code_dir != null))
      {
        tmp538.Master_code_dir = this.Master_code_dir;
      }
      if((Node_host != null) && __isset.node_host)
      {
        tmp538.Node_host = this.Node_host.DeepCopy();
      }
      tmp538.__isset.node_host = this.__isset.node_host;
      if((Executor_node_port != null) && __isset.executor_node_port)
      {
        tmp538.Executor_node_port = this.Executor_node_port.DeepCopy();
      }
      tmp538.__isset.executor_node_port = this.__isset.executor_node_port;
      if((Executor_start_time_secs != null) && __isset.executor_start_time_secs)
      {
        tmp538.Executor_start_time_secs = this.Executor_start_time_secs.DeepCopy();
      }
      tmp538.__isset.executor_start_time_secs = this.__isset.executor_start_time_secs;
      if((Worker_resources != null) && __isset.worker_resources)
      {
        tmp538.Worker_resources = this.Worker_resources.DeepCopy();
      }
      tmp538.__isset.worker_resources = this.__isset.worker_resources;
      return tmp538;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_master_code_dir = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Master_code_dir = await iprot.ReadStringAsync(cancellationToken);
                isset_master_code_dir = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map539 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Node_host = new Dictionary<string, string>(_map539.Count);
                  for(int _i540 = 0; _i540 < _map539.Count; ++_i540)
                  {
                    string _key541;
                    string _val542;
                    _key541 = await iprot.ReadStringAsync(cancellationToken);
                    _val542 = await iprot.ReadStringAsync(cancellationToken);
                    Node_host[_key541] = _val542;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map543 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Executor_node_port = new Dictionary<List<long>, global::StormThrift.NodeInfo>(_map543.Count);
                  for(int _i544 = 0; _i544 < _map543.Count; ++_i544)
                  {
                    List<long> _key545;
                    global::StormThrift.NodeInfo _val546;
                    {
                      TList _list547 = await iprot.ReadListBeginAsync(cancellationToken);
                      _key545 = new List<long>(_list547.Count);
                      for(int _i548 = 0; _i548 < _list547.Count; ++_i548)
                      {
                        long _elem549;
                        _elem549 = await iprot.ReadI64Async(cancellationToken);
                        _key545.Add(_elem549);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    _val546 = new global::StormThrift.NodeInfo();
                    await _val546.ReadAsync(iprot, cancellationToken);
                    Executor_node_port[_key545] = _val546;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map550 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Executor_start_time_secs = new Dictionary<List<long>, long>(_map550.Count);
                  for(int _i551 = 0; _i551 < _map550.Count; ++_i551)
                  {
                    List<long> _key552;
                    long _val553;
                    {
                      TList _list554 = await iprot.ReadListBeginAsync(cancellationToken);
                      _key552 = new List<long>(_list554.Count);
                      for(int _i555 = 0; _i555 < _list554.Count; ++_i555)
                      {
                        long _elem556;
                        _elem556 = await iprot.ReadI64Async(cancellationToken);
                        _key552.Add(_elem556);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    _val553 = await iprot.ReadI64Async(cancellationToken);
                    Executor_start_time_secs[_key552] = _val553;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map557 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Worker_resources = new Dictionary<global::StormThrift.NodeInfo, global::StormThrift.WorkerResources>(_map557.Count);
                  for(int _i558 = 0; _i558 < _map557.Count; ++_i558)
                  {
                    global::StormThrift.NodeInfo _key559;
                    global::StormThrift.WorkerResources _val560;
                    _key559 = new global::StormThrift.NodeInfo();
                    await _key559.ReadAsync(iprot, cancellationToken);
                    _val560 = new global::StormThrift.WorkerResources();
                    await _val560.ReadAsync(iprot, cancellationToken);
                    Worker_resources[_key559] = _val560;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_master_code_dir)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp561 = new TStruct("Assignment");
        await oprot.WriteStructBeginAsync(tmp561, cancellationToken);
        var tmp562 = new TField();
        if((Master_code_dir != null))
        {
          tmp562.Name = "master_code_dir";
          tmp562.Type = TType.String;
          tmp562.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
          await oprot.WriteStringAsync(Master_code_dir, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Node_host != null) && __isset.node_host)
        {
          tmp562.Name = "node_host";
          tmp562.Type = TType.Map;
          tmp562.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Node_host.Count), cancellationToken);
            foreach (string _iter563 in Node_host.Keys)
            {
              await oprot.WriteStringAsync(_iter563, cancellationToken);
              await oprot.WriteStringAsync(Node_host[_iter563], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Executor_node_port != null) && __isset.executor_node_port)
        {
          tmp562.Name = "executor_node_port";
          tmp562.Type = TType.Map;
          tmp562.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.List, TType.Struct, Executor_node_port.Count), cancellationToken);
            foreach (List<long> _iter564 in Executor_node_port.Keys)
            {
              {
                await oprot.WriteListBeginAsync(new TList(TType.I64, _iter564.Count), cancellationToken);
                foreach (long _iter565 in _iter564)
                {
                  await oprot.WriteI64Async(_iter565, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await Executor_node_port[_iter564].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Executor_start_time_secs != null) && __isset.executor_start_time_secs)
        {
          tmp562.Name = "executor_start_time_secs";
          tmp562.Type = TType.Map;
          tmp562.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.List, TType.I64, Executor_start_time_secs.Count), cancellationToken);
            foreach (List<long> _iter566 in Executor_start_time_secs.Keys)
            {
              {
                await oprot.WriteListBeginAsync(new TList(TType.I64, _iter566.Count), cancellationToken);
                foreach (long _iter567 in _iter566)
                {
                  await oprot.WriteI64Async(_iter567, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteI64Async(Executor_start_time_secs[_iter566], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Worker_resources != null) && __isset.worker_resources)
        {
          tmp562.Name = "worker_resources";
          tmp562.Type = TType.Map;
          tmp562.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.Struct, TType.Struct, Worker_resources.Count), cancellationToken);
            foreach (global::StormThrift.NodeInfo _iter568 in Worker_resources.Keys)
            {
              await _iter568.WriteAsync(oprot, cancellationToken);
              await Worker_resources[_iter568].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Assignment other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Master_code_dir, other.Master_code_dir)
        && ((__isset.node_host == other.__isset.node_host) && ((!__isset.node_host) || (TCollections.Equals(Node_host, other.Node_host))))
        && ((__isset.executor_node_port == other.__isset.executor_node_port) && ((!__isset.executor_node_port) || (TCollections.Equals(Executor_node_port, other.Executor_node_port))))
        && ((__isset.executor_start_time_secs == other.__isset.executor_start_time_secs) && ((!__isset.executor_start_time_secs) || (TCollections.Equals(Executor_start_time_secs, other.Executor_start_time_secs))))
        && ((__isset.worker_resources == other.__isset.worker_resources) && ((!__isset.worker_resources) || (TCollections.Equals(Worker_resources, other.Worker_resources))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Master_code_dir != null))
        {
          hashcode = (hashcode * 397) + Master_code_dir.GetHashCode();
        }
        if((Node_host != null) && __isset.node_host)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Node_host);
        }
        if((Executor_node_port != null) && __isset.executor_node_port)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Executor_node_port);
        }
        if((Executor_start_time_secs != null) && __isset.executor_start_time_secs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Executor_start_time_secs);
        }
        if((Worker_resources != null) && __isset.worker_resources)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Worker_resources);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp569 = new StringBuilder("Assignment(");
      if((Master_code_dir != null))
      {
        tmp569.Append(", Master_code_dir: ");
        Master_code_dir.ToString(tmp569);
      }
      if((Node_host != null) && __isset.node_host)
      {
        tmp569.Append(", Node_host: ");
        Node_host.ToString(tmp569);
      }
      if((Executor_node_port != null) && __isset.executor_node_port)
      {
        tmp569.Append(", Executor_node_port: ");
        Executor_node_port.ToString(tmp569);
      }
      if((Executor_start_time_secs != null) && __isset.executor_start_time_secs)
      {
        tmp569.Append(", Executor_start_time_secs: ");
        Executor_start_time_secs.ToString(tmp569);
      }
      if((Worker_resources != null) && __isset.worker_resources)
      {
        tmp569.Append(", Worker_resources: ");
        Worker_resources.ToString(tmp569);
      }
      tmp569.Append(')');
      return tmp569.ToString();
    }
  }

}
