/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ExecutorSummary : TBase
  {
    private global::StormThrift.ExecutorStats _stats;

    public global::StormThrift.ExecutorInfo Executor_info { get; set; }

    public string Component_id { get; set; }

    public string Host { get; set; }

    public int Port { get; set; }

    public int Uptime_secs { get; set; }

    public global::StormThrift.ExecutorStats Stats
    {
      get
      {
        return _stats;
      }
      set
      {
        __isset.stats = true;
        this._stats = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool stats;
    }

    public ExecutorSummary()
    {
    }

    public ExecutorSummary(global::StormThrift.ExecutorInfo executor_info, string component_id, string host, int port, int uptime_secs) : this()
    {
      this.Executor_info = executor_info;
      this.Component_id = component_id;
      this.Host = host;
      this.Port = port;
      this.Uptime_secs = uptime_secs;
    }

    public ExecutorSummary DeepCopy()
    {
      var tmp302 = new ExecutorSummary();
      if((Executor_info != null))
      {
        tmp302.Executor_info = (global::StormThrift.ExecutorInfo)this.Executor_info.DeepCopy();
      }
      if((Component_id != null))
      {
        tmp302.Component_id = this.Component_id;
      }
      if((Host != null))
      {
        tmp302.Host = this.Host;
      }
      tmp302.Port = this.Port;
      tmp302.Uptime_secs = this.Uptime_secs;
      if((Stats != null) && __isset.stats)
      {
        tmp302.Stats = (global::StormThrift.ExecutorStats)this.Stats.DeepCopy();
      }
      tmp302.__isset.stats = this.__isset.stats;
      return tmp302;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_executor_info = false;
        bool isset_component_id = false;
        bool isset_host = false;
        bool isset_port = false;
        bool isset_uptime_secs = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Executor_info = new global::StormThrift.ExecutorInfo();
                await Executor_info.ReadAsync(iprot, cancellationToken);
                isset_executor_info = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Component_id = await iprot.ReadStringAsync(cancellationToken);
                isset_component_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
                isset_host = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Port = await iprot.ReadI32Async(cancellationToken);
                isset_port = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Uptime_secs = await iprot.ReadI32Async(cancellationToken);
                isset_uptime_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Stats = new global::StormThrift.ExecutorStats();
                await Stats.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_executor_info)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_component_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_host)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_port)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_uptime_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp303 = new TStruct("ExecutorSummary");
        await oprot.WriteStructBeginAsync(tmp303, cancellationToken);
        var tmp304 = new TField();
        if((Executor_info != null))
        {
          tmp304.Name = "executor_info";
          tmp304.Type = TType.Struct;
          tmp304.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
          await Executor_info.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Component_id != null))
        {
          tmp304.Name = "component_id";
          tmp304.Type = TType.String;
          tmp304.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
          await oprot.WriteStringAsync(Component_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host != null))
        {
          tmp304.Name = "host";
          tmp304.Type = TType.String;
          tmp304.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp304.Name = "port";
        tmp304.Type = TType.I32;
        tmp304.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
        await oprot.WriteI32Async(Port, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp304.Name = "uptime_secs";
        tmp304.Type = TType.I32;
        tmp304.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
        await oprot.WriteI32Async(Uptime_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Stats != null) && __isset.stats)
        {
          tmp304.Name = "stats";
          tmp304.Type = TType.Struct;
          tmp304.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
          await Stats.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ExecutorSummary other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Executor_info, other.Executor_info)
        && global::System.Object.Equals(Component_id, other.Component_id)
        && global::System.Object.Equals(Host, other.Host)
        && global::System.Object.Equals(Port, other.Port)
        && global::System.Object.Equals(Uptime_secs, other.Uptime_secs)
        && ((__isset.stats == other.__isset.stats) && ((!__isset.stats) || (global::System.Object.Equals(Stats, other.Stats))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Executor_info != null))
        {
          hashcode = (hashcode * 397) + Executor_info.GetHashCode();
        }
        if((Component_id != null))
        {
          hashcode = (hashcode * 397) + Component_id.GetHashCode();
        }
        if((Host != null))
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        hashcode = (hashcode * 397) + Port.GetHashCode();
        hashcode = (hashcode * 397) + Uptime_secs.GetHashCode();
        if((Stats != null) && __isset.stats)
        {
          hashcode = (hashcode * 397) + Stats.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp305 = new StringBuilder("ExecutorSummary(");
      if((Executor_info != null))
      {
        tmp305.Append(", Executor_info: ");
        Executor_info.ToString(tmp305);
      }
      if((Component_id != null))
      {
        tmp305.Append(", Component_id: ");
        Component_id.ToString(tmp305);
      }
      if((Host != null))
      {
        tmp305.Append(", Host: ");
        Host.ToString(tmp305);
      }
      tmp305.Append(", Port: ");
      Port.ToString(tmp305);
      tmp305.Append(", Uptime_secs: ");
      Uptime_secs.ToString(tmp305);
      if((Stats != null) && __isset.stats)
      {
        tmp305.Append(", Stats: ");
        Stats.ToString(tmp305);
      }
      tmp305.Append(')');
      return tmp305.ToString();
    }
  }

}
