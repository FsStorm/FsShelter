/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{
  public partial class DistributedRPC
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<string> execute(string functionName, string funcArgs, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<string> execute(string functionName, string funcArgs, CancellationToken cancellationToken = default)
      {
        await send_execute(functionName, funcArgs, cancellationToken);
        return await recv_execute(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_execute(string functionName, string funcArgs, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp1628 = new InternalStructs.execute_args() {
          FunctionName = functionName,
          FuncArgs = funcArgs,
        };
        
        await tmp1628.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_execute(CancellationToken cancellationToken = default)
      {
        
        var tmp1629 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1629.Type == TMessageType.Exception)
        {
          var tmp1630 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp1630;
        }

        var tmp1631 = new InternalStructs.execute_result();
        await tmp1631.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp1631.__isset.success)
        {
          return tmp1631.Success;
        }
        if (tmp1631.__isset.e)
        {
          throw tmp1631.E;
        }
        if (tmp1631.__isset.aze)
        {
          throw tmp1631.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "execute failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["execute"] = execute_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task execute_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1632 = new InternalStructs.execute_args();
        await tmp1632.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1633 = new InternalStructs.execute_result();
        try
        {
          try
          {
            tmp1633.Success = await _iAsync.execute(tmp1632.FunctionName, tmp1632.FuncArgs, cancellationToken);
          }
          catch (global::StormThrift.DRPCExecutionException tmp1634)
          {
            tmp1633.E = tmp1634;
          }
          catch (global::StormThrift.AuthorizationException tmp1635)
          {
            tmp1633.Aze = tmp1635;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1633.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1636)
        {
          var tmp1637 = $"Error occurred in {GetType().FullName}: {tmp1636.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1636, tmp1637);
          else
            Console.Error.WriteLine(tmp1637);
          var tmp1638 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("execute", TMessageType.Exception, seqid), cancellationToken);
          await tmp1638.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class execute_args : TBase
      {
        private string _functionName;
        private string _funcArgs;

        public string FunctionName
        {
          get
          {
            return _functionName;
          }
          set
          {
            __isset.functionName = true;
            this._functionName = value;
          }
        }

        public string FuncArgs
        {
          get
          {
            return _funcArgs;
          }
          set
          {
            __isset.funcArgs = true;
            this._funcArgs = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool functionName;
          public bool funcArgs;
        }

        public execute_args()
        {
        }

        public execute_args DeepCopy()
        {
          var tmp1639 = new execute_args();
          if((FunctionName != null) && __isset.functionName)
          {
            tmp1639.FunctionName = this.FunctionName;
          }
          tmp1639.__isset.functionName = this.__isset.functionName;
          if((FuncArgs != null) && __isset.funcArgs)
          {
            tmp1639.FuncArgs = this.FuncArgs;
          }
          tmp1639.__isset.funcArgs = this.__isset.funcArgs;
          return tmp1639;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FuncArgs = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1640 = new TStruct("execute_args");
            await oprot.WriteStructBeginAsync(tmp1640, cancellationToken);
            var tmp1641 = new TField();
            if((FunctionName != null) && __isset.functionName)
            {
              tmp1641.Name = "functionName";
              tmp1641.Type = TType.String;
              tmp1641.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1641, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((FuncArgs != null) && __isset.funcArgs)
            {
              tmp1641.Name = "funcArgs";
              tmp1641.Type = TType.String;
              tmp1641.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1641, cancellationToken);
              await oprot.WriteStringAsync(FuncArgs, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.functionName == other.__isset.functionName) && ((!__isset.functionName) || (global::System.Object.Equals(FunctionName, other.FunctionName))))
            && ((__isset.funcArgs == other.__isset.funcArgs) && ((!__isset.funcArgs) || (global::System.Object.Equals(FuncArgs, other.FuncArgs))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((FunctionName != null) && __isset.functionName)
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((FuncArgs != null) && __isset.funcArgs)
            {
              hashcode = (hashcode * 397) + FuncArgs.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1642 = new StringBuilder("execute_args(");
          int tmp1643 = 0;
          if((FunctionName != null) && __isset.functionName)
          {
            if(0 < tmp1643++) { tmp1642.Append(", "); }
            tmp1642.Append("FunctionName: ");
            FunctionName.ToString(tmp1642);
          }
          if((FuncArgs != null) && __isset.funcArgs)
          {
            if(0 < tmp1643++) { tmp1642.Append(", "); }
            tmp1642.Append("FuncArgs: ");
            FuncArgs.ToString(tmp1642);
          }
          tmp1642.Append(')');
          return tmp1642.ToString();
        }
      }


      public partial class execute_result : TBase
      {
        private string _success;
        private global::StormThrift.DRPCExecutionException _e;
        private global::StormThrift.AuthorizationException _aze;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.DRPCExecutionException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public execute_result()
        {
        }

        public execute_result DeepCopy()
        {
          var tmp1644 = new execute_result();
          if((Success != null) && __isset.success)
          {
            tmp1644.Success = this.Success;
          }
          tmp1644.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1644.E = (global::StormThrift.DRPCExecutionException)this.E.DeepCopy();
          }
          tmp1644.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1644.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1644.__isset.aze = this.__isset.aze;
          return tmp1644;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.DRPCExecutionException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1645 = new TStruct("execute_result");
            await oprot.WriteStructBeginAsync(tmp1645, cancellationToken);
            var tmp1646 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1646.Name = "Success";
                tmp1646.Type = TType.String;
                tmp1646.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1646.Name = "E";
                tmp1646.Type = TType.Struct;
                tmp1646.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1646.Name = "Aze";
                tmp1646.Type = TType.Struct;
                tmp1646.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1646, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is execute_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1647 = new StringBuilder("execute_result(");
          int tmp1648 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("Success: ");
            Success.ToString(tmp1647);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("E: ");
            E.ToString(tmp1647);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1648++) { tmp1647.Append(", "); }
            tmp1647.Append("Aze: ");
            Aze.ToString(tmp1647);
          }
          tmp1647.Append(')');
          return tmp1647.ToString();
        }
      }

    }

  }
}
