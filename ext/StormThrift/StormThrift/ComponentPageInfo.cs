/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ComponentPageInfo : TBase
  {
    private string _topology_id;
    private string _topology_name;
    private int _num_executors;
    private int _num_tasks;
    private Dictionary<string, global::StormThrift.ComponentAggregateStats> _window_to_stats;
    private Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.ComponentAggregateStats> _gsid_to_input_stats;
    private Dictionary<string, global::StormThrift.ComponentAggregateStats> _sid_to_output_stats;
    private List<global::StormThrift.ExecutorAggregateStats> _exec_stats;
    private List<global::StormThrift.ErrorInfo> _errors;
    private string _eventlog_host;
    private int _eventlog_port;
    private global::StormThrift.DebugOptions _debug_options;
    private string _topology_status;

    public string Component_id { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.ComponentType"/>
    /// </summary>
    public global::StormThrift.ComponentType Component_type { get; set; }

    public string Topology_id
    {
      get
      {
        return _topology_id;
      }
      set
      {
        __isset.topology_id = true;
        this._topology_id = value;
      }
    }

    public string Topology_name
    {
      get
      {
        return _topology_name;
      }
      set
      {
        __isset.topology_name = true;
        this._topology_name = value;
      }
    }

    public int Num_executors
    {
      get
      {
        return _num_executors;
      }
      set
      {
        __isset.num_executors = true;
        this._num_executors = value;
      }
    }

    public int Num_tasks
    {
      get
      {
        return _num_tasks;
      }
      set
      {
        __isset.num_tasks = true;
        this._num_tasks = value;
      }
    }

    public Dictionary<string, global::StormThrift.ComponentAggregateStats> Window_to_stats
    {
      get
      {
        return _window_to_stats;
      }
      set
      {
        __isset.window_to_stats = true;
        this._window_to_stats = value;
      }
    }

    public Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.ComponentAggregateStats> Gsid_to_input_stats
    {
      get
      {
        return _gsid_to_input_stats;
      }
      set
      {
        __isset.gsid_to_input_stats = true;
        this._gsid_to_input_stats = value;
      }
    }

    public Dictionary<string, global::StormThrift.ComponentAggregateStats> Sid_to_output_stats
    {
      get
      {
        return _sid_to_output_stats;
      }
      set
      {
        __isset.sid_to_output_stats = true;
        this._sid_to_output_stats = value;
      }
    }

    public List<global::StormThrift.ExecutorAggregateStats> Exec_stats
    {
      get
      {
        return _exec_stats;
      }
      set
      {
        __isset.exec_stats = true;
        this._exec_stats = value;
      }
    }

    public List<global::StormThrift.ErrorInfo> Errors
    {
      get
      {
        return _errors;
      }
      set
      {
        __isset.errors = true;
        this._errors = value;
      }
    }

    public string Eventlog_host
    {
      get
      {
        return _eventlog_host;
      }
      set
      {
        __isset.eventlog_host = true;
        this._eventlog_host = value;
      }
    }

    public int Eventlog_port
    {
      get
      {
        return _eventlog_port;
      }
      set
      {
        __isset.eventlog_port = true;
        this._eventlog_port = value;
      }
    }

    public global::StormThrift.DebugOptions Debug_options
    {
      get
      {
        return _debug_options;
      }
      set
      {
        __isset.debug_options = true;
        this._debug_options = value;
      }
    }

    public string Topology_status
    {
      get
      {
        return _topology_status;
      }
      set
      {
        __isset.topology_status = true;
        this._topology_status = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool topology_id;
      public bool topology_name;
      public bool num_executors;
      public bool num_tasks;
      public bool window_to_stats;
      public bool gsid_to_input_stats;
      public bool sid_to_output_stats;
      public bool exec_stats;
      public bool errors;
      public bool eventlog_host;
      public bool eventlog_port;
      public bool debug_options;
      public bool topology_status;
    }

    public ComponentPageInfo()
    {
    }

    public ComponentPageInfo(string component_id, global::StormThrift.ComponentType component_type) : this()
    {
      this.Component_id = component_id;
      this.Component_type = component_type;
    }

    public ComponentPageInfo DeepCopy()
    {
      var tmp410 = new ComponentPageInfo();
      if((Component_id != null))
      {
        tmp410.Component_id = this.Component_id;
      }
      tmp410.Component_type = this.Component_type;
      if((Topology_id != null) && __isset.topology_id)
      {
        tmp410.Topology_id = this.Topology_id;
      }
      tmp410.__isset.topology_id = this.__isset.topology_id;
      if((Topology_name != null) && __isset.topology_name)
      {
        tmp410.Topology_name = this.Topology_name;
      }
      tmp410.__isset.topology_name = this.__isset.topology_name;
      if(__isset.num_executors)
      {
        tmp410.Num_executors = this.Num_executors;
      }
      tmp410.__isset.num_executors = this.__isset.num_executors;
      if(__isset.num_tasks)
      {
        tmp410.Num_tasks = this.Num_tasks;
      }
      tmp410.__isset.num_tasks = this.__isset.num_tasks;
      if((Window_to_stats != null) && __isset.window_to_stats)
      {
        tmp410.Window_to_stats = this.Window_to_stats.DeepCopy();
      }
      tmp410.__isset.window_to_stats = this.__isset.window_to_stats;
      if((Gsid_to_input_stats != null) && __isset.gsid_to_input_stats)
      {
        tmp410.Gsid_to_input_stats = this.Gsid_to_input_stats.DeepCopy();
      }
      tmp410.__isset.gsid_to_input_stats = this.__isset.gsid_to_input_stats;
      if((Sid_to_output_stats != null) && __isset.sid_to_output_stats)
      {
        tmp410.Sid_to_output_stats = this.Sid_to_output_stats.DeepCopy();
      }
      tmp410.__isset.sid_to_output_stats = this.__isset.sid_to_output_stats;
      if((Exec_stats != null) && __isset.exec_stats)
      {
        tmp410.Exec_stats = this.Exec_stats.DeepCopy();
      }
      tmp410.__isset.exec_stats = this.__isset.exec_stats;
      if((Errors != null) && __isset.errors)
      {
        tmp410.Errors = this.Errors.DeepCopy();
      }
      tmp410.__isset.errors = this.__isset.errors;
      if((Eventlog_host != null) && __isset.eventlog_host)
      {
        tmp410.Eventlog_host = this.Eventlog_host;
      }
      tmp410.__isset.eventlog_host = this.__isset.eventlog_host;
      if(__isset.eventlog_port)
      {
        tmp410.Eventlog_port = this.Eventlog_port;
      }
      tmp410.__isset.eventlog_port = this.__isset.eventlog_port;
      if((Debug_options != null) && __isset.debug_options)
      {
        tmp410.Debug_options = (global::StormThrift.DebugOptions)this.Debug_options.DeepCopy();
      }
      tmp410.__isset.debug_options = this.__isset.debug_options;
      if((Topology_status != null) && __isset.topology_status)
      {
        tmp410.Topology_status = this.Topology_status;
      }
      tmp410.__isset.topology_status = this.__isset.topology_status;
      return tmp410;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_component_id = false;
        bool isset_component_type = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Component_id = await iprot.ReadStringAsync(cancellationToken);
                isset_component_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Component_type = (global::StormThrift.ComponentType)await iprot.ReadI32Async(cancellationToken);
                isset_component_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Topology_id = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Topology_name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Num_executors = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Num_tasks = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map411 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_stats = new Dictionary<string, global::StormThrift.ComponentAggregateStats>(_map411.Count);
                  for(int _i412 = 0; _i412 < _map411.Count; ++_i412)
                  {
                    string _key413;
                    global::StormThrift.ComponentAggregateStats _val414;
                    _key413 = await iprot.ReadStringAsync(cancellationToken);
                    _val414 = new global::StormThrift.ComponentAggregateStats();
                    await _val414.ReadAsync(iprot, cancellationToken);
                    Window_to_stats[_key413] = _val414;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map415 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Gsid_to_input_stats = new Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.ComponentAggregateStats>(_map415.Count);
                  for(int _i416 = 0; _i416 < _map415.Count; ++_i416)
                  {
                    global::StormThrift.GlobalStreamId _key417;
                    global::StormThrift.ComponentAggregateStats _val418;
                    _key417 = new global::StormThrift.GlobalStreamId();
                    await _key417.ReadAsync(iprot, cancellationToken);
                    _val418 = new global::StormThrift.ComponentAggregateStats();
                    await _val418.ReadAsync(iprot, cancellationToken);
                    Gsid_to_input_stats[_key417] = _val418;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map419 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Sid_to_output_stats = new Dictionary<string, global::StormThrift.ComponentAggregateStats>(_map419.Count);
                  for(int _i420 = 0; _i420 < _map419.Count; ++_i420)
                  {
                    string _key421;
                    global::StormThrift.ComponentAggregateStats _val422;
                    _key421 = await iprot.ReadStringAsync(cancellationToken);
                    _val422 = new global::StormThrift.ComponentAggregateStats();
                    await _val422.ReadAsync(iprot, cancellationToken);
                    Sid_to_output_stats[_key421] = _val422;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.List)
              {
                {
                  TList _list423 = await iprot.ReadListBeginAsync(cancellationToken);
                  Exec_stats = new List<global::StormThrift.ExecutorAggregateStats>(_list423.Count);
                  for(int _i424 = 0; _i424 < _list423.Count; ++_i424)
                  {
                    global::StormThrift.ExecutorAggregateStats _elem425;
                    _elem425 = new global::StormThrift.ExecutorAggregateStats();
                    await _elem425.ReadAsync(iprot, cancellationToken);
                    Exec_stats.Add(_elem425);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.List)
              {
                {
                  TList _list426 = await iprot.ReadListBeginAsync(cancellationToken);
                  Errors = new List<global::StormThrift.ErrorInfo>(_list426.Count);
                  for(int _i427 = 0; _i427 < _list426.Count; ++_i427)
                  {
                    global::StormThrift.ErrorInfo _elem428;
                    _elem428 = new global::StormThrift.ErrorInfo();
                    await _elem428.ReadAsync(iprot, cancellationToken);
                    Errors.Add(_elem428);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Eventlog_host = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.I32)
              {
                Eventlog_port = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Struct)
              {
                Debug_options = new global::StormThrift.DebugOptions();
                await Debug_options.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                Topology_status = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_component_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_component_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp429 = new TStruct("ComponentPageInfo");
        await oprot.WriteStructBeginAsync(tmp429, cancellationToken);
        var tmp430 = new TField();
        if((Component_id != null))
        {
          tmp430.Name = "component_id";
          tmp430.Type = TType.String;
          tmp430.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteStringAsync(Component_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp430.Name = "component_type";
        tmp430.Type = TType.I32;
        tmp430.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
        await oprot.WriteI32Async((int)Component_type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Topology_id != null) && __isset.topology_id)
        {
          tmp430.Name = "topology_id";
          tmp430.Type = TType.String;
          tmp430.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteStringAsync(Topology_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Topology_name != null) && __isset.topology_name)
        {
          tmp430.Name = "topology_name";
          tmp430.Type = TType.String;
          tmp430.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteStringAsync(Topology_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.num_executors)
        {
          tmp430.Name = "num_executors";
          tmp430.Type = TType.I32;
          tmp430.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteI32Async(Num_executors, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.num_tasks)
        {
          tmp430.Name = "num_tasks";
          tmp430.Type = TType.I32;
          tmp430.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteI32Async(Num_tasks, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Window_to_stats != null) && __isset.window_to_stats)
        {
          tmp430.Name = "window_to_stats";
          tmp430.Type = TType.Map;
          tmp430.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Window_to_stats.Count), cancellationToken);
            foreach (string _iter431 in Window_to_stats.Keys)
            {
              await oprot.WriteStringAsync(_iter431, cancellationToken);
              await Window_to_stats[_iter431].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Gsid_to_input_stats != null) && __isset.gsid_to_input_stats)
        {
          tmp430.Name = "gsid_to_input_stats";
          tmp430.Type = TType.Map;
          tmp430.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.Struct, TType.Struct, Gsid_to_input_stats.Count), cancellationToken);
            foreach (global::StormThrift.GlobalStreamId _iter432 in Gsid_to_input_stats.Keys)
            {
              await _iter432.WriteAsync(oprot, cancellationToken);
              await Gsid_to_input_stats[_iter432].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Sid_to_output_stats != null) && __isset.sid_to_output_stats)
        {
          tmp430.Name = "sid_to_output_stats";
          tmp430.Type = TType.Map;
          tmp430.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Sid_to_output_stats.Count), cancellationToken);
            foreach (string _iter433 in Sid_to_output_stats.Keys)
            {
              await oprot.WriteStringAsync(_iter433, cancellationToken);
              await Sid_to_output_stats[_iter433].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Exec_stats != null) && __isset.exec_stats)
        {
          tmp430.Name = "exec_stats";
          tmp430.Type = TType.List;
          tmp430.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Exec_stats.Count), cancellationToken);
            foreach (global::StormThrift.ExecutorAggregateStats _iter434 in Exec_stats)
            {
              await _iter434.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Errors != null) && __isset.errors)
        {
          tmp430.Name = "errors";
          tmp430.Type = TType.List;
          tmp430.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Errors.Count), cancellationToken);
            foreach (global::StormThrift.ErrorInfo _iter435 in Errors)
            {
              await _iter435.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Eventlog_host != null) && __isset.eventlog_host)
        {
          tmp430.Name = "eventlog_host";
          tmp430.Type = TType.String;
          tmp430.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteStringAsync(Eventlog_host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.eventlog_port)
        {
          tmp430.Name = "eventlog_port";
          tmp430.Type = TType.I32;
          tmp430.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteI32Async(Eventlog_port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Debug_options != null) && __isset.debug_options)
        {
          tmp430.Name = "debug_options";
          tmp430.Type = TType.Struct;
          tmp430.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await Debug_options.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Topology_status != null) && __isset.topology_status)
        {
          tmp430.Name = "topology_status";
          tmp430.Type = TType.String;
          tmp430.ID = 15;
          await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
          await oprot.WriteStringAsync(Topology_status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ComponentPageInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Component_id, other.Component_id)
        && global::System.Object.Equals(Component_type, other.Component_type)
        && ((__isset.topology_id == other.__isset.topology_id) && ((!__isset.topology_id) || (global::System.Object.Equals(Topology_id, other.Topology_id))))
        && ((__isset.topology_name == other.__isset.topology_name) && ((!__isset.topology_name) || (global::System.Object.Equals(Topology_name, other.Topology_name))))
        && ((__isset.num_executors == other.__isset.num_executors) && ((!__isset.num_executors) || (global::System.Object.Equals(Num_executors, other.Num_executors))))
        && ((__isset.num_tasks == other.__isset.num_tasks) && ((!__isset.num_tasks) || (global::System.Object.Equals(Num_tasks, other.Num_tasks))))
        && ((__isset.window_to_stats == other.__isset.window_to_stats) && ((!__isset.window_to_stats) || (TCollections.Equals(Window_to_stats, other.Window_to_stats))))
        && ((__isset.gsid_to_input_stats == other.__isset.gsid_to_input_stats) && ((!__isset.gsid_to_input_stats) || (TCollections.Equals(Gsid_to_input_stats, other.Gsid_to_input_stats))))
        && ((__isset.sid_to_output_stats == other.__isset.sid_to_output_stats) && ((!__isset.sid_to_output_stats) || (TCollections.Equals(Sid_to_output_stats, other.Sid_to_output_stats))))
        && ((__isset.exec_stats == other.__isset.exec_stats) && ((!__isset.exec_stats) || (TCollections.Equals(Exec_stats, other.Exec_stats))))
        && ((__isset.errors == other.__isset.errors) && ((!__isset.errors) || (TCollections.Equals(Errors, other.Errors))))
        && ((__isset.eventlog_host == other.__isset.eventlog_host) && ((!__isset.eventlog_host) || (global::System.Object.Equals(Eventlog_host, other.Eventlog_host))))
        && ((__isset.eventlog_port == other.__isset.eventlog_port) && ((!__isset.eventlog_port) || (global::System.Object.Equals(Eventlog_port, other.Eventlog_port))))
        && ((__isset.debug_options == other.__isset.debug_options) && ((!__isset.debug_options) || (global::System.Object.Equals(Debug_options, other.Debug_options))))
        && ((__isset.topology_status == other.__isset.topology_status) && ((!__isset.topology_status) || (global::System.Object.Equals(Topology_status, other.Topology_status))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Component_id != null))
        {
          hashcode = (hashcode * 397) + Component_id.GetHashCode();
        }
        hashcode = (hashcode * 397) + Component_type.GetHashCode();
        if((Topology_id != null) && __isset.topology_id)
        {
          hashcode = (hashcode * 397) + Topology_id.GetHashCode();
        }
        if((Topology_name != null) && __isset.topology_name)
        {
          hashcode = (hashcode * 397) + Topology_name.GetHashCode();
        }
        if(__isset.num_executors)
        {
          hashcode = (hashcode * 397) + Num_executors.GetHashCode();
        }
        if(__isset.num_tasks)
        {
          hashcode = (hashcode * 397) + Num_tasks.GetHashCode();
        }
        if((Window_to_stats != null) && __isset.window_to_stats)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_stats);
        }
        if((Gsid_to_input_stats != null) && __isset.gsid_to_input_stats)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Gsid_to_input_stats);
        }
        if((Sid_to_output_stats != null) && __isset.sid_to_output_stats)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Sid_to_output_stats);
        }
        if((Exec_stats != null) && __isset.exec_stats)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Exec_stats);
        }
        if((Errors != null) && __isset.errors)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Errors);
        }
        if((Eventlog_host != null) && __isset.eventlog_host)
        {
          hashcode = (hashcode * 397) + Eventlog_host.GetHashCode();
        }
        if(__isset.eventlog_port)
        {
          hashcode = (hashcode * 397) + Eventlog_port.GetHashCode();
        }
        if((Debug_options != null) && __isset.debug_options)
        {
          hashcode = (hashcode * 397) + Debug_options.GetHashCode();
        }
        if((Topology_status != null) && __isset.topology_status)
        {
          hashcode = (hashcode * 397) + Topology_status.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp436 = new StringBuilder("ComponentPageInfo(");
      if((Component_id != null))
      {
        tmp436.Append(", Component_id: ");
        Component_id.ToString(tmp436);
      }
      tmp436.Append(", Component_type: ");
      Component_type.ToString(tmp436);
      if((Topology_id != null) && __isset.topology_id)
      {
        tmp436.Append(", Topology_id: ");
        Topology_id.ToString(tmp436);
      }
      if((Topology_name != null) && __isset.topology_name)
      {
        tmp436.Append(", Topology_name: ");
        Topology_name.ToString(tmp436);
      }
      if(__isset.num_executors)
      {
        tmp436.Append(", Num_executors: ");
        Num_executors.ToString(tmp436);
      }
      if(__isset.num_tasks)
      {
        tmp436.Append(", Num_tasks: ");
        Num_tasks.ToString(tmp436);
      }
      if((Window_to_stats != null) && __isset.window_to_stats)
      {
        tmp436.Append(", Window_to_stats: ");
        Window_to_stats.ToString(tmp436);
      }
      if((Gsid_to_input_stats != null) && __isset.gsid_to_input_stats)
      {
        tmp436.Append(", Gsid_to_input_stats: ");
        Gsid_to_input_stats.ToString(tmp436);
      }
      if((Sid_to_output_stats != null) && __isset.sid_to_output_stats)
      {
        tmp436.Append(", Sid_to_output_stats: ");
        Sid_to_output_stats.ToString(tmp436);
      }
      if((Exec_stats != null) && __isset.exec_stats)
      {
        tmp436.Append(", Exec_stats: ");
        Exec_stats.ToString(tmp436);
      }
      if((Errors != null) && __isset.errors)
      {
        tmp436.Append(", Errors: ");
        Errors.ToString(tmp436);
      }
      if((Eventlog_host != null) && __isset.eventlog_host)
      {
        tmp436.Append(", Eventlog_host: ");
        Eventlog_host.ToString(tmp436);
      }
      if(__isset.eventlog_port)
      {
        tmp436.Append(", Eventlog_port: ");
        Eventlog_port.ToString(tmp436);
      }
      if((Debug_options != null) && __isset.debug_options)
      {
        tmp436.Append(", Debug_options: ");
        Debug_options.ToString(tmp436);
      }
      if((Topology_status != null) && __isset.topology_status)
      {
        tmp436.Append(", Topology_status: ");
        Topology_status.ToString(tmp436);
      }
      tmp436.Append(')');
      return tmp436.ToString();
    }
  }

}
