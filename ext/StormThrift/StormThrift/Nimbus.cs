/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{
  public partial class Nimbus
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task submitTopology(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, global::StormThrift.SubmitOptions options, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task killTopology(string name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task killTopologyWithOpts(string name, global::StormThrift.KillOptions options, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task activate(string name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task deactivate(string name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task rebalance(string name, global::StormThrift.RebalanceOptions options, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task setLogConfig(string name, global::StormThrift.LogConfig config, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.LogConfig> getLogConfig(string name, CancellationToken cancellationToken = default);

      /// <summary>
      /// Enable/disable logging the tuples generated in topology via an internal EventLogger bolt. The component name is optional
      /// and if null or empty, the debug flag will apply to the entire topology.
      /// 
      /// The 'samplingPercentage' will limit loggging to a percentage of generated tuples.
      /// 
      /// </summary>
      /// <param name="name"></param>
      /// <param name="component"></param>
      /// <param name="enable"></param>
      /// <param name="samplingPercentage"></param>
      global::System.Threading.Tasks.Task debug(string name, string component, bool enable, double samplingPercentage, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task setWorkerProfiler(string id, global::StormThrift.ProfileRequest profileRequest, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::StormThrift.ProfileRequest>> getComponentPendingProfileActions(string id, string component_id, global::StormThrift.ProfileAction action, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task uploadNewCredentials(string name, global::StormThrift.Credentials creds, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> beginCreateBlob(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> beginUpdateBlob(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task uploadBlobChunk(string session, byte[] chunk, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task finishBlobUpload(string session, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task cancelBlobUpload(string session, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.ReadableBlobMeta> getBlobMeta(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task setBlobMeta(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.BeginDownloadResult> beginBlobDownload(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> downloadBlobChunk(string session, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task deleteBlob(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.ListBlobsResult> listBlobs(string session, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> getBlobReplication(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> updateBlobReplication(string key, int replication, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task createStateInZookeeper(string key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> beginFileUpload(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task uploadChunk(string location, byte[] chunk, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task finishFileUpload(string location, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> beginFileDownload(string file, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> downloadChunk(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> getNimbusConf(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.ClusterSummary> getClusterInfo(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> getTopologyInfo(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> getTopologyInfoWithOpts(string id, global::StormThrift.GetInfoOptions options, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.TopologyPageInfo> getTopologyPageInfo(string id, string window, bool is_include_sys, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.ComponentPageInfo> getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> getTopologyConf(string id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> getTopology(string id, CancellationToken cancellationToken = default);

      /// <summary>
      /// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> getUserTopology(string id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::StormThrift.TopologyHistoryInfo> getTopologyHistory(string user, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task submitTopology(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, CancellationToken cancellationToken = default)
      {
        await send_submitTopology(name, uploadedJarLocation, jsonConf, topology, cancellationToken);
        await recv_submitTopology(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_submitTopology(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("submitTopology", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp768 = new InternalStructs.submitTopology_args() {
          Name = name,
          UploadedJarLocation = uploadedJarLocation,
          JsonConf = jsonConf,
          Topology = topology,
        };
        
        await tmp768.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_submitTopology(CancellationToken cancellationToken = default)
      {
        
        var tmp769 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp769.Type == TMessageType.Exception)
        {
          var tmp770 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp770;
        }

        var tmp771 = new InternalStructs.submitTopology_result();
        await tmp771.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp771.__isset.e)
        {
          throw tmp771.E;
        }
        if (tmp771.__isset.ite)
        {
          throw tmp771.Ite;
        }
        if (tmp771.__isset.aze)
        {
          throw tmp771.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, global::StormThrift.SubmitOptions options, CancellationToken cancellationToken = default)
      {
        await send_submitTopologyWithOpts(name, uploadedJarLocation, jsonConf, topology, options, cancellationToken);
        await recv_submitTopologyWithOpts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, global::StormThrift.StormTopology topology, global::StormThrift.SubmitOptions options, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("submitTopologyWithOpts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp772 = new InternalStructs.submitTopologyWithOpts_args() {
          Name = name,
          UploadedJarLocation = uploadedJarLocation,
          JsonConf = jsonConf,
          Topology = topology,
          Options = options,
        };
        
        await tmp772.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_submitTopologyWithOpts(CancellationToken cancellationToken = default)
      {
        
        var tmp773 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp773.Type == TMessageType.Exception)
        {
          var tmp774 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp774;
        }

        var tmp775 = new InternalStructs.submitTopologyWithOpts_result();
        await tmp775.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp775.__isset.e)
        {
          throw tmp775.E;
        }
        if (tmp775.__isset.ite)
        {
          throw tmp775.Ite;
        }
        if (tmp775.__isset.aze)
        {
          throw tmp775.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task killTopology(string name, CancellationToken cancellationToken = default)
      {
        await send_killTopology(name, cancellationToken);
        await recv_killTopology(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_killTopology(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("killTopology", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp776 = new InternalStructs.killTopology_args() {
          Name = name,
        };
        
        await tmp776.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_killTopology(CancellationToken cancellationToken = default)
      {
        
        var tmp777 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp777.Type == TMessageType.Exception)
        {
          var tmp778 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp778;
        }

        var tmp779 = new InternalStructs.killTopology_result();
        await tmp779.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp779.__isset.e)
        {
          throw tmp779.E;
        }
        if (tmp779.__isset.aze)
        {
          throw tmp779.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task killTopologyWithOpts(string name, global::StormThrift.KillOptions options, CancellationToken cancellationToken = default)
      {
        await send_killTopologyWithOpts(name, options, cancellationToken);
        await recv_killTopologyWithOpts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_killTopologyWithOpts(string name, global::StormThrift.KillOptions options, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("killTopologyWithOpts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp780 = new InternalStructs.killTopologyWithOpts_args() {
          Name = name,
          Options = options,
        };
        
        await tmp780.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_killTopologyWithOpts(CancellationToken cancellationToken = default)
      {
        
        var tmp781 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp781.Type == TMessageType.Exception)
        {
          var tmp782 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp782;
        }

        var tmp783 = new InternalStructs.killTopologyWithOpts_result();
        await tmp783.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp783.__isset.e)
        {
          throw tmp783.E;
        }
        if (tmp783.__isset.aze)
        {
          throw tmp783.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task activate(string name, CancellationToken cancellationToken = default)
      {
        await send_activate(name, cancellationToken);
        await recv_activate(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_activate(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("activate", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp784 = new InternalStructs.activate_args() {
          Name = name,
        };
        
        await tmp784.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_activate(CancellationToken cancellationToken = default)
      {
        
        var tmp785 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp785.Type == TMessageType.Exception)
        {
          var tmp786 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp786;
        }

        var tmp787 = new InternalStructs.activate_result();
        await tmp787.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp787.__isset.e)
        {
          throw tmp787.E;
        }
        if (tmp787.__isset.aze)
        {
          throw tmp787.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task deactivate(string name, CancellationToken cancellationToken = default)
      {
        await send_deactivate(name, cancellationToken);
        await recv_deactivate(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deactivate(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deactivate", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp788 = new InternalStructs.deactivate_args() {
          Name = name,
        };
        
        await tmp788.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deactivate(CancellationToken cancellationToken = default)
      {
        
        var tmp789 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp789.Type == TMessageType.Exception)
        {
          var tmp790 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp790;
        }

        var tmp791 = new InternalStructs.deactivate_result();
        await tmp791.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp791.__isset.e)
        {
          throw tmp791.E;
        }
        if (tmp791.__isset.aze)
        {
          throw tmp791.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task rebalance(string name, global::StormThrift.RebalanceOptions options, CancellationToken cancellationToken = default)
      {
        await send_rebalance(name, options, cancellationToken);
        await recv_rebalance(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_rebalance(string name, global::StormThrift.RebalanceOptions options, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("rebalance", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp792 = new InternalStructs.rebalance_args() {
          Name = name,
          Options = options,
        };
        
        await tmp792.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_rebalance(CancellationToken cancellationToken = default)
      {
        
        var tmp793 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp793.Type == TMessageType.Exception)
        {
          var tmp794 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp794;
        }

        var tmp795 = new InternalStructs.rebalance_result();
        await tmp795.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp795.__isset.e)
        {
          throw tmp795.E;
        }
        if (tmp795.__isset.ite)
        {
          throw tmp795.Ite;
        }
        if (tmp795.__isset.aze)
        {
          throw tmp795.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task setLogConfig(string name, global::StormThrift.LogConfig config, CancellationToken cancellationToken = default)
      {
        await send_setLogConfig(name, config, cancellationToken);
        await recv_setLogConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setLogConfig(string name, global::StormThrift.LogConfig config, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setLogConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp796 = new InternalStructs.setLogConfig_args() {
          Name = name,
          Config = config,
        };
        
        await tmp796.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setLogConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp797 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp797.Type == TMessageType.Exception)
        {
          var tmp798 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp798;
        }

        var tmp799 = new InternalStructs.setLogConfig_result();
        await tmp799.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.LogConfig> getLogConfig(string name, CancellationToken cancellationToken = default)
      {
        await send_getLogConfig(name, cancellationToken);
        return await recv_getLogConfig(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getLogConfig(string name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getLogConfig", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp800 = new InternalStructs.getLogConfig_args() {
          Name = name,
        };
        
        await tmp800.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.LogConfig> recv_getLogConfig(CancellationToken cancellationToken = default)
      {
        
        var tmp801 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp801.Type == TMessageType.Exception)
        {
          var tmp802 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp802;
        }

        var tmp803 = new InternalStructs.getLogConfig_result();
        await tmp803.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp803.__isset.success)
        {
          return tmp803.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLogConfig failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task debug(string name, string component, bool enable, double samplingPercentage, CancellationToken cancellationToken = default)
      {
        await send_debug(name, component, enable, samplingPercentage, cancellationToken);
        await recv_debug(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_debug(string name, string component, bool enable, double samplingPercentage, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("debug", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp804 = new InternalStructs.debug_args() {
          Name = name,
          Component = component,
          Enable = enable,
          SamplingPercentage = samplingPercentage,
        };
        
        await tmp804.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_debug(CancellationToken cancellationToken = default)
      {
        
        var tmp805 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp805.Type == TMessageType.Exception)
        {
          var tmp806 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp806;
        }

        var tmp807 = new InternalStructs.debug_result();
        await tmp807.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp807.__isset.e)
        {
          throw tmp807.E;
        }
        if (tmp807.__isset.aze)
        {
          throw tmp807.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task setWorkerProfiler(string id, global::StormThrift.ProfileRequest profileRequest, CancellationToken cancellationToken = default)
      {
        await send_setWorkerProfiler(id, profileRequest, cancellationToken);
        await recv_setWorkerProfiler(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setWorkerProfiler(string id, global::StormThrift.ProfileRequest profileRequest, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setWorkerProfiler", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp808 = new InternalStructs.setWorkerProfiler_args() {
          Id = id,
          ProfileRequest = profileRequest,
        };
        
        await tmp808.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setWorkerProfiler(CancellationToken cancellationToken = default)
      {
        
        var tmp809 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp809.Type == TMessageType.Exception)
        {
          var tmp810 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp810;
        }

        var tmp811 = new InternalStructs.setWorkerProfiler_result();
        await tmp811.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::StormThrift.ProfileRequest>> getComponentPendingProfileActions(string id, string component_id, global::StormThrift.ProfileAction action, CancellationToken cancellationToken = default)
      {
        await send_getComponentPendingProfileActions(id, component_id, action, cancellationToken);
        return await recv_getComponentPendingProfileActions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getComponentPendingProfileActions(string id, string component_id, global::StormThrift.ProfileAction action, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getComponentPendingProfileActions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp812 = new InternalStructs.getComponentPendingProfileActions_args() {
          Id = id,
          Component_id = component_id,
          Action = action,
        };
        
        await tmp812.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::StormThrift.ProfileRequest>> recv_getComponentPendingProfileActions(CancellationToken cancellationToken = default)
      {
        
        var tmp813 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp813.Type == TMessageType.Exception)
        {
          var tmp814 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp814;
        }

        var tmp815 = new InternalStructs.getComponentPendingProfileActions_result();
        await tmp815.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp815.__isset.success)
        {
          return tmp815.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComponentPendingProfileActions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task uploadNewCredentials(string name, global::StormThrift.Credentials creds, CancellationToken cancellationToken = default)
      {
        await send_uploadNewCredentials(name, creds, cancellationToken);
        await recv_uploadNewCredentials(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_uploadNewCredentials(string name, global::StormThrift.Credentials creds, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("uploadNewCredentials", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp816 = new InternalStructs.uploadNewCredentials_args() {
          Name = name,
          Creds = creds,
        };
        
        await tmp816.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_uploadNewCredentials(CancellationToken cancellationToken = default)
      {
        
        var tmp817 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp817.Type == TMessageType.Exception)
        {
          var tmp818 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp818;
        }

        var tmp819 = new InternalStructs.uploadNewCredentials_result();
        await tmp819.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp819.__isset.e)
        {
          throw tmp819.E;
        }
        if (tmp819.__isset.ite)
        {
          throw tmp819.Ite;
        }
        if (tmp819.__isset.aze)
        {
          throw tmp819.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task<string> beginCreateBlob(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default)
      {
        await send_beginCreateBlob(key, meta, cancellationToken);
        return await recv_beginCreateBlob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_beginCreateBlob(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("beginCreateBlob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp820 = new InternalStructs.beginCreateBlob_args() {
          Key = key,
          Meta = meta,
        };
        
        await tmp820.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_beginCreateBlob(CancellationToken cancellationToken = default)
      {
        
        var tmp821 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp821.Type == TMessageType.Exception)
        {
          var tmp822 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp822;
        }

        var tmp823 = new InternalStructs.beginCreateBlob_result();
        await tmp823.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp823.__isset.success)
        {
          return tmp823.Success;
        }
        if (tmp823.__isset.aze)
        {
          throw tmp823.Aze;
        }
        if (tmp823.__isset.kae)
        {
          throw tmp823.Kae;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginCreateBlob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> beginUpdateBlob(string key, CancellationToken cancellationToken = default)
      {
        await send_beginUpdateBlob(key, cancellationToken);
        return await recv_beginUpdateBlob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_beginUpdateBlob(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("beginUpdateBlob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp824 = new InternalStructs.beginUpdateBlob_args() {
          Key = key,
        };
        
        await tmp824.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_beginUpdateBlob(CancellationToken cancellationToken = default)
      {
        
        var tmp825 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp825.Type == TMessageType.Exception)
        {
          var tmp826 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp826;
        }

        var tmp827 = new InternalStructs.beginUpdateBlob_result();
        await tmp827.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp827.__isset.success)
        {
          return tmp827.Success;
        }
        if (tmp827.__isset.aze)
        {
          throw tmp827.Aze;
        }
        if (tmp827.__isset.knf)
        {
          throw tmp827.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginUpdateBlob failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task uploadBlobChunk(string session, byte[] chunk, CancellationToken cancellationToken = default)
      {
        await send_uploadBlobChunk(session, chunk, cancellationToken);
        await recv_uploadBlobChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_uploadBlobChunk(string session, byte[] chunk, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("uploadBlobChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp828 = new InternalStructs.uploadBlobChunk_args() {
          Session = session,
          Chunk = chunk,
        };
        
        await tmp828.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_uploadBlobChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp829 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp829.Type == TMessageType.Exception)
        {
          var tmp830 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp830;
        }

        var tmp831 = new InternalStructs.uploadBlobChunk_result();
        await tmp831.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp831.__isset.aze)
        {
          throw tmp831.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task finishBlobUpload(string session, CancellationToken cancellationToken = default)
      {
        await send_finishBlobUpload(session, cancellationToken);
        await recv_finishBlobUpload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_finishBlobUpload(string session, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("finishBlobUpload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp832 = new InternalStructs.finishBlobUpload_args() {
          Session = session,
        };
        
        await tmp832.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_finishBlobUpload(CancellationToken cancellationToken = default)
      {
        
        var tmp833 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp833.Type == TMessageType.Exception)
        {
          var tmp834 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp834;
        }

        var tmp835 = new InternalStructs.finishBlobUpload_result();
        await tmp835.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp835.__isset.aze)
        {
          throw tmp835.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task cancelBlobUpload(string session, CancellationToken cancellationToken = default)
      {
        await send_cancelBlobUpload(session, cancellationToken);
        await recv_cancelBlobUpload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_cancelBlobUpload(string session, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("cancelBlobUpload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp836 = new InternalStructs.cancelBlobUpload_args() {
          Session = session,
        };
        
        await tmp836.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_cancelBlobUpload(CancellationToken cancellationToken = default)
      {
        
        var tmp837 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp837.Type == TMessageType.Exception)
        {
          var tmp838 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp838;
        }

        var tmp839 = new InternalStructs.cancelBlobUpload_result();
        await tmp839.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp839.__isset.aze)
        {
          throw tmp839.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ReadableBlobMeta> getBlobMeta(string key, CancellationToken cancellationToken = default)
      {
        await send_getBlobMeta(key, cancellationToken);
        return await recv_getBlobMeta(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getBlobMeta(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBlobMeta", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp840 = new InternalStructs.getBlobMeta_args() {
          Key = key,
        };
        
        await tmp840.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ReadableBlobMeta> recv_getBlobMeta(CancellationToken cancellationToken = default)
      {
        
        var tmp841 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp841.Type == TMessageType.Exception)
        {
          var tmp842 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp842;
        }

        var tmp843 = new InternalStructs.getBlobMeta_result();
        await tmp843.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp843.__isset.success)
        {
          return tmp843.Success;
        }
        if (tmp843.__isset.aze)
        {
          throw tmp843.Aze;
        }
        if (tmp843.__isset.knf)
        {
          throw tmp843.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlobMeta failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task setBlobMeta(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default)
      {
        await send_setBlobMeta(key, meta, cancellationToken);
        await recv_setBlobMeta(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_setBlobMeta(string key, global::StormThrift.SettableBlobMeta meta, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("setBlobMeta", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp844 = new InternalStructs.setBlobMeta_args() {
          Key = key,
          Meta = meta,
        };
        
        await tmp844.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_setBlobMeta(CancellationToken cancellationToken = default)
      {
        
        var tmp845 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp845.Type == TMessageType.Exception)
        {
          var tmp846 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp846;
        }

        var tmp847 = new InternalStructs.setBlobMeta_result();
        await tmp847.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp847.__isset.aze)
        {
          throw tmp847.Aze;
        }
        if (tmp847.__isset.knf)
        {
          throw tmp847.Knf;
        }
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.BeginDownloadResult> beginBlobDownload(string key, CancellationToken cancellationToken = default)
      {
        await send_beginBlobDownload(key, cancellationToken);
        return await recv_beginBlobDownload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_beginBlobDownload(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("beginBlobDownload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp848 = new InternalStructs.beginBlobDownload_args() {
          Key = key,
        };
        
        await tmp848.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.BeginDownloadResult> recv_beginBlobDownload(CancellationToken cancellationToken = default)
      {
        
        var tmp849 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp849.Type == TMessageType.Exception)
        {
          var tmp850 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp850;
        }

        var tmp851 = new InternalStructs.beginBlobDownload_result();
        await tmp851.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp851.__isset.success)
        {
          return tmp851.Success;
        }
        if (tmp851.__isset.aze)
        {
          throw tmp851.Aze;
        }
        if (tmp851.__isset.knf)
        {
          throw tmp851.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginBlobDownload failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> downloadBlobChunk(string session, CancellationToken cancellationToken = default)
      {
        await send_downloadBlobChunk(session, cancellationToken);
        return await recv_downloadBlobChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_downloadBlobChunk(string session, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadBlobChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp852 = new InternalStructs.downloadBlobChunk_args() {
          Session = session,
        };
        
        await tmp852.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_downloadBlobChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp853 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp853.Type == TMessageType.Exception)
        {
          var tmp854 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp854;
        }

        var tmp855 = new InternalStructs.downloadBlobChunk_result();
        await tmp855.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp855.__isset.success)
        {
          return tmp855.Success;
        }
        if (tmp855.__isset.aze)
        {
          throw tmp855.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadBlobChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task deleteBlob(string key, CancellationToken cancellationToken = default)
      {
        await send_deleteBlob(key, cancellationToken);
        await recv_deleteBlob(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_deleteBlob(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteBlob", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp856 = new InternalStructs.deleteBlob_args() {
          Key = key,
        };
        
        await tmp856.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_deleteBlob(CancellationToken cancellationToken = default)
      {
        
        var tmp857 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp857.Type == TMessageType.Exception)
        {
          var tmp858 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp858;
        }

        var tmp859 = new InternalStructs.deleteBlob_result();
        await tmp859.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp859.__isset.aze)
        {
          throw tmp859.Aze;
        }
        if (tmp859.__isset.knf)
        {
          throw tmp859.Knf;
        }
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ListBlobsResult> listBlobs(string session, CancellationToken cancellationToken = default)
      {
        await send_listBlobs(session, cancellationToken);
        return await recv_listBlobs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_listBlobs(string session, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("listBlobs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp860 = new InternalStructs.listBlobs_args() {
          Session = session,
        };
        
        await tmp860.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ListBlobsResult> recv_listBlobs(CancellationToken cancellationToken = default)
      {
        
        var tmp861 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp861.Type == TMessageType.Exception)
        {
          var tmp862 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp862;
        }

        var tmp863 = new InternalStructs.listBlobs_result();
        await tmp863.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp863.__isset.success)
        {
          return tmp863.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listBlobs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> getBlobReplication(string key, CancellationToken cancellationToken = default)
      {
        await send_getBlobReplication(key, cancellationToken);
        return await recv_getBlobReplication(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getBlobReplication(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBlobReplication", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp864 = new InternalStructs.getBlobReplication_args() {
          Key = key,
        };
        
        await tmp864.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_getBlobReplication(CancellationToken cancellationToken = default)
      {
        
        var tmp865 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp865.Type == TMessageType.Exception)
        {
          var tmp866 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp866;
        }

        var tmp867 = new InternalStructs.getBlobReplication_result();
        await tmp867.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp867.__isset.success)
        {
          return tmp867.Success;
        }
        if (tmp867.__isset.aze)
        {
          throw tmp867.Aze;
        }
        if (tmp867.__isset.knf)
        {
          throw tmp867.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlobReplication failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> updateBlobReplication(string key, int replication, CancellationToken cancellationToken = default)
      {
        await send_updateBlobReplication(key, replication, cancellationToken);
        return await recv_updateBlobReplication(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updateBlobReplication(string key, int replication, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updateBlobReplication", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp868 = new InternalStructs.updateBlobReplication_args() {
          Key = key,
          Replication = replication,
        };
        
        await tmp868.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_updateBlobReplication(CancellationToken cancellationToken = default)
      {
        
        var tmp869 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp869.Type == TMessageType.Exception)
        {
          var tmp870 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp870;
        }

        var tmp871 = new InternalStructs.updateBlobReplication_result();
        await tmp871.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp871.__isset.success)
        {
          return tmp871.Success;
        }
        if (tmp871.__isset.aze)
        {
          throw tmp871.Aze;
        }
        if (tmp871.__isset.knf)
        {
          throw tmp871.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBlobReplication failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task createStateInZookeeper(string key, CancellationToken cancellationToken = default)
      {
        await send_createStateInZookeeper(key, cancellationToken);
        await recv_createStateInZookeeper(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_createStateInZookeeper(string key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("createStateInZookeeper", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp872 = new InternalStructs.createStateInZookeeper_args() {
          Key = key,
        };
        
        await tmp872.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_createStateInZookeeper(CancellationToken cancellationToken = default)
      {
        
        var tmp873 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp873.Type == TMessageType.Exception)
        {
          var tmp874 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp874;
        }

        var tmp875 = new InternalStructs.createStateInZookeeper_result();
        await tmp875.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> beginFileUpload(CancellationToken cancellationToken = default)
      {
        await send_beginFileUpload(cancellationToken);
        return await recv_beginFileUpload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_beginFileUpload(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("beginFileUpload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp876 = new InternalStructs.beginFileUpload_args() {
        };
        
        await tmp876.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_beginFileUpload(CancellationToken cancellationToken = default)
      {
        
        var tmp877 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp877.Type == TMessageType.Exception)
        {
          var tmp878 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp878;
        }

        var tmp879 = new InternalStructs.beginFileUpload_result();
        await tmp879.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp879.__isset.success)
        {
          return tmp879.Success;
        }
        if (tmp879.__isset.aze)
        {
          throw tmp879.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileUpload failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task uploadChunk(string location, byte[] chunk, CancellationToken cancellationToken = default)
      {
        await send_uploadChunk(location, chunk, cancellationToken);
        await recv_uploadChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_uploadChunk(string location, byte[] chunk, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("uploadChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp880 = new InternalStructs.uploadChunk_args() {
          Location = location,
          Chunk = chunk,
        };
        
        await tmp880.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_uploadChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp881 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp881.Type == TMessageType.Exception)
        {
          var tmp882 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp882;
        }

        var tmp883 = new InternalStructs.uploadChunk_result();
        await tmp883.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp883.__isset.aze)
        {
          throw tmp883.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task finishFileUpload(string location, CancellationToken cancellationToken = default)
      {
        await send_finishFileUpload(location, cancellationToken);
        await recv_finishFileUpload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_finishFileUpload(string location, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("finishFileUpload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp884 = new InternalStructs.finishFileUpload_args() {
          Location = location,
        };
        
        await tmp884.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_finishFileUpload(CancellationToken cancellationToken = default)
      {
        
        var tmp885 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp885.Type == TMessageType.Exception)
        {
          var tmp886 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp886;
        }

        var tmp887 = new InternalStructs.finishFileUpload_result();
        await tmp887.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp887.__isset.aze)
        {
          throw tmp887.Aze;
        }
      }

      public async global::System.Threading.Tasks.Task<string> beginFileDownload(string file, CancellationToken cancellationToken = default)
      {
        await send_beginFileDownload(file, cancellationToken);
        return await recv_beginFileDownload(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_beginFileDownload(string file, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("beginFileDownload", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp888 = new InternalStructs.beginFileDownload_args() {
          File = file,
        };
        
        await tmp888.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_beginFileDownload(CancellationToken cancellationToken = default)
      {
        
        var tmp889 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp889.Type == TMessageType.Exception)
        {
          var tmp890 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp890;
        }

        var tmp891 = new InternalStructs.beginFileDownload_result();
        await tmp891.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp891.__isset.success)
        {
          return tmp891.Success;
        }
        if (tmp891.__isset.aze)
        {
          throw tmp891.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileDownload failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> downloadChunk(string id, CancellationToken cancellationToken = default)
      {
        await send_downloadChunk(id, cancellationToken);
        return await recv_downloadChunk(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_downloadChunk(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("downloadChunk", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp892 = new InternalStructs.downloadChunk_args() {
          Id = id,
        };
        
        await tmp892.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_downloadChunk(CancellationToken cancellationToken = default)
      {
        
        var tmp893 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp893.Type == TMessageType.Exception)
        {
          var tmp894 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp894;
        }

        var tmp895 = new InternalStructs.downloadChunk_result();
        await tmp895.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp895.__isset.success)
        {
          return tmp895.Success;
        }
        if (tmp895.__isset.aze)
        {
          throw tmp895.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadChunk failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getNimbusConf(CancellationToken cancellationToken = default)
      {
        await send_getNimbusConf(cancellationToken);
        return await recv_getNimbusConf(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getNimbusConf(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getNimbusConf", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp896 = new InternalStructs.getNimbusConf_args() {
        };
        
        await tmp896.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getNimbusConf(CancellationToken cancellationToken = default)
      {
        
        var tmp897 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp897.Type == TMessageType.Exception)
        {
          var tmp898 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp898;
        }

        var tmp899 = new InternalStructs.getNimbusConf_result();
        await tmp899.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp899.__isset.success)
        {
          return tmp899.Success;
        }
        if (tmp899.__isset.aze)
        {
          throw tmp899.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNimbusConf failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ClusterSummary> getClusterInfo(CancellationToken cancellationToken = default)
      {
        await send_getClusterInfo(cancellationToken);
        return await recv_getClusterInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getClusterInfo(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getClusterInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp900 = new InternalStructs.getClusterInfo_args() {
        };
        
        await tmp900.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ClusterSummary> recv_getClusterInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp901 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp901.Type == TMessageType.Exception)
        {
          var tmp902 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp902;
        }

        var tmp903 = new InternalStructs.getClusterInfo_result();
        await tmp903.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp903.__isset.success)
        {
          return tmp903.Success;
        }
        if (tmp903.__isset.aze)
        {
          throw tmp903.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> getTopologyInfo(string id, CancellationToken cancellationToken = default)
      {
        await send_getTopologyInfo(id, cancellationToken);
        return await recv_getTopologyInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopologyInfo(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopologyInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp904 = new InternalStructs.getTopologyInfo_args() {
          Id = id,
        };
        
        await tmp904.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> recv_getTopologyInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp905 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp905.Type == TMessageType.Exception)
        {
          var tmp906 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp906;
        }

        var tmp907 = new InternalStructs.getTopologyInfo_result();
        await tmp907.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp907.__isset.success)
        {
          return tmp907.Success;
        }
        if (tmp907.__isset.e)
        {
          throw tmp907.E;
        }
        if (tmp907.__isset.aze)
        {
          throw tmp907.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> getTopologyInfoWithOpts(string id, global::StormThrift.GetInfoOptions options, CancellationToken cancellationToken = default)
      {
        await send_getTopologyInfoWithOpts(id, options, cancellationToken);
        return await recv_getTopologyInfoWithOpts(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopologyInfoWithOpts(string id, global::StormThrift.GetInfoOptions options, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopologyInfoWithOpts", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp908 = new InternalStructs.getTopologyInfoWithOpts_args() {
          Id = id,
          Options = options,
        };
        
        await tmp908.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyInfo> recv_getTopologyInfoWithOpts(CancellationToken cancellationToken = default)
      {
        
        var tmp909 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp909.Type == TMessageType.Exception)
        {
          var tmp910 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp910;
        }

        var tmp911 = new InternalStructs.getTopologyInfoWithOpts_result();
        await tmp911.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp911.__isset.success)
        {
          return tmp911.Success;
        }
        if (tmp911.__isset.e)
        {
          throw tmp911.E;
        }
        if (tmp911.__isset.aze)
        {
          throw tmp911.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfoWithOpts failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyPageInfo> getTopologyPageInfo(string id, string window, bool is_include_sys, CancellationToken cancellationToken = default)
      {
        await send_getTopologyPageInfo(id, window, is_include_sys, cancellationToken);
        return await recv_getTopologyPageInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopologyPageInfo(string id, string window, bool is_include_sys, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopologyPageInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp912 = new InternalStructs.getTopologyPageInfo_args() {
          Id = id,
          Window = window,
          Is_include_sys = is_include_sys,
        };
        
        await tmp912.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyPageInfo> recv_getTopologyPageInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp913 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp913.Type == TMessageType.Exception)
        {
          var tmp914 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp914;
        }

        var tmp915 = new InternalStructs.getTopologyPageInfo_result();
        await tmp915.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp915.__isset.success)
        {
          return tmp915.Success;
        }
        if (tmp915.__isset.e)
        {
          throw tmp915.E;
        }
        if (tmp915.__isset.aze)
        {
          throw tmp915.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyPageInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ComponentPageInfo> getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys, CancellationToken cancellationToken = default)
      {
        await send_getComponentPageInfo(topology_id, component_id, window, is_include_sys, cancellationToken);
        return await recv_getComponentPageInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getComponentPageInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp916 = new InternalStructs.getComponentPageInfo_args() {
          Topology_id = topology_id,
          Component_id = component_id,
          Window = window,
          Is_include_sys = is_include_sys,
        };
        
        await tmp916.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.ComponentPageInfo> recv_getComponentPageInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp917 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp917.Type == TMessageType.Exception)
        {
          var tmp918 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp918;
        }

        var tmp919 = new InternalStructs.getComponentPageInfo_result();
        await tmp919.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp919.__isset.success)
        {
          return tmp919.Success;
        }
        if (tmp919.__isset.e)
        {
          throw tmp919.E;
        }
        if (tmp919.__isset.aze)
        {
          throw tmp919.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComponentPageInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getTopologyConf(string id, CancellationToken cancellationToken = default)
      {
        await send_getTopologyConf(id, cancellationToken);
        return await recv_getTopologyConf(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopologyConf(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopologyConf", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp920 = new InternalStructs.getTopologyConf_args() {
          Id = id,
        };
        
        await tmp920.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getTopologyConf(CancellationToken cancellationToken = default)
      {
        
        var tmp921 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp921.Type == TMessageType.Exception)
        {
          var tmp922 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp922;
        }

        var tmp923 = new InternalStructs.getTopologyConf_result();
        await tmp923.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp923.__isset.success)
        {
          return tmp923.Success;
        }
        if (tmp923.__isset.e)
        {
          throw tmp923.E;
        }
        if (tmp923.__isset.aze)
        {
          throw tmp923.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyConf failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> getTopology(string id, CancellationToken cancellationToken = default)
      {
        await send_getTopology(id, cancellationToken);
        return await recv_getTopology(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopology(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopology", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp924 = new InternalStructs.getTopology_args() {
          Id = id,
        };
        
        await tmp924.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> recv_getTopology(CancellationToken cancellationToken = default)
      {
        
        var tmp925 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp925.Type == TMessageType.Exception)
        {
          var tmp926 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp926;
        }

        var tmp927 = new InternalStructs.getTopology_result();
        await tmp927.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp927.__isset.success)
        {
          return tmp927.Success;
        }
        if (tmp927.__isset.e)
        {
          throw tmp927.E;
        }
        if (tmp927.__isset.aze)
        {
          throw tmp927.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopology failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> getUserTopology(string id, CancellationToken cancellationToken = default)
      {
        await send_getUserTopology(id, cancellationToken);
        return await recv_getUserTopology(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getUserTopology(string id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getUserTopology", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp928 = new InternalStructs.getUserTopology_args() {
          Id = id,
        };
        
        await tmp928.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.StormTopology> recv_getUserTopology(CancellationToken cancellationToken = default)
      {
        
        var tmp929 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp929.Type == TMessageType.Exception)
        {
          var tmp930 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp930;
        }

        var tmp931 = new InternalStructs.getUserTopology_result();
        await tmp931.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp931.__isset.success)
        {
          return tmp931.Success;
        }
        if (tmp931.__isset.e)
        {
          throw tmp931.E;
        }
        if (tmp931.__isset.aze)
        {
          throw tmp931.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTopology failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyHistoryInfo> getTopologyHistory(string user, CancellationToken cancellationToken = default)
      {
        await send_getTopologyHistory(user, cancellationToken);
        return await recv_getTopologyHistory(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getTopologyHistory(string user, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTopologyHistory", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp932 = new InternalStructs.getTopologyHistory_args() {
          User = user,
        };
        
        await tmp932.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::StormThrift.TopologyHistoryInfo> recv_getTopologyHistory(CancellationToken cancellationToken = default)
      {
        
        var tmp933 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp933.Type == TMessageType.Exception)
        {
          var tmp934 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp934;
        }

        var tmp935 = new InternalStructs.getTopologyHistory_result();
        await tmp935.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp935.__isset.success)
        {
          return tmp935.Success;
        }
        if (tmp935.__isset.aze)
        {
          throw tmp935.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyHistory failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["submitTopology"] = submitTopology_ProcessAsync;
        processMap_["submitTopologyWithOpts"] = submitTopologyWithOpts_ProcessAsync;
        processMap_["killTopology"] = killTopology_ProcessAsync;
        processMap_["killTopologyWithOpts"] = killTopologyWithOpts_ProcessAsync;
        processMap_["activate"] = activate_ProcessAsync;
        processMap_["deactivate"] = deactivate_ProcessAsync;
        processMap_["rebalance"] = rebalance_ProcessAsync;
        processMap_["setLogConfig"] = setLogConfig_ProcessAsync;
        processMap_["getLogConfig"] = getLogConfig_ProcessAsync;
        processMap_["debug"] = debug_ProcessAsync;
        processMap_["setWorkerProfiler"] = setWorkerProfiler_ProcessAsync;
        processMap_["getComponentPendingProfileActions"] = getComponentPendingProfileActions_ProcessAsync;
        processMap_["uploadNewCredentials"] = uploadNewCredentials_ProcessAsync;
        processMap_["beginCreateBlob"] = beginCreateBlob_ProcessAsync;
        processMap_["beginUpdateBlob"] = beginUpdateBlob_ProcessAsync;
        processMap_["uploadBlobChunk"] = uploadBlobChunk_ProcessAsync;
        processMap_["finishBlobUpload"] = finishBlobUpload_ProcessAsync;
        processMap_["cancelBlobUpload"] = cancelBlobUpload_ProcessAsync;
        processMap_["getBlobMeta"] = getBlobMeta_ProcessAsync;
        processMap_["setBlobMeta"] = setBlobMeta_ProcessAsync;
        processMap_["beginBlobDownload"] = beginBlobDownload_ProcessAsync;
        processMap_["downloadBlobChunk"] = downloadBlobChunk_ProcessAsync;
        processMap_["deleteBlob"] = deleteBlob_ProcessAsync;
        processMap_["listBlobs"] = listBlobs_ProcessAsync;
        processMap_["getBlobReplication"] = getBlobReplication_ProcessAsync;
        processMap_["updateBlobReplication"] = updateBlobReplication_ProcessAsync;
        processMap_["createStateInZookeeper"] = createStateInZookeeper_ProcessAsync;
        processMap_["beginFileUpload"] = beginFileUpload_ProcessAsync;
        processMap_["uploadChunk"] = uploadChunk_ProcessAsync;
        processMap_["finishFileUpload"] = finishFileUpload_ProcessAsync;
        processMap_["beginFileDownload"] = beginFileDownload_ProcessAsync;
        processMap_["downloadChunk"] = downloadChunk_ProcessAsync;
        processMap_["getNimbusConf"] = getNimbusConf_ProcessAsync;
        processMap_["getClusterInfo"] = getClusterInfo_ProcessAsync;
        processMap_["getTopologyInfo"] = getTopologyInfo_ProcessAsync;
        processMap_["getTopologyInfoWithOpts"] = getTopologyInfoWithOpts_ProcessAsync;
        processMap_["getTopologyPageInfo"] = getTopologyPageInfo_ProcessAsync;
        processMap_["getComponentPageInfo"] = getComponentPageInfo_ProcessAsync;
        processMap_["getTopologyConf"] = getTopologyConf_ProcessAsync;
        processMap_["getTopology"] = getTopology_ProcessAsync;
        processMap_["getUserTopology"] = getUserTopology_ProcessAsync;
        processMap_["getTopologyHistory"] = getTopologyHistory_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task submitTopology_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp936 = new InternalStructs.submitTopology_args();
        await tmp936.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp937 = new InternalStructs.submitTopology_result();
        try
        {
          try
          {
            await _iAsync.submitTopology(tmp936.Name, tmp936.UploadedJarLocation, tmp936.JsonConf, tmp936.Topology, cancellationToken);
          }
          catch (global::StormThrift.AlreadyAliveException tmp938)
          {
            tmp937.E = tmp938;
          }
          catch (global::StormThrift.InvalidTopologyException tmp939)
          {
            tmp937.Ite = tmp939;
          }
          catch (global::StormThrift.AuthorizationException tmp940)
          {
            tmp937.Aze = tmp940;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("submitTopology", TMessageType.Reply, seqid), cancellationToken); 
          await tmp937.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp941)
        {
          var tmp942 = $"Error occurred in {GetType().FullName}: {tmp941.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp941, tmp942);
          else
            Console.Error.WriteLine(tmp942);
          var tmp943 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("submitTopology", TMessageType.Exception, seqid), cancellationToken);
          await tmp943.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task submitTopologyWithOpts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp944 = new InternalStructs.submitTopologyWithOpts_args();
        await tmp944.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp945 = new InternalStructs.submitTopologyWithOpts_result();
        try
        {
          try
          {
            await _iAsync.submitTopologyWithOpts(tmp944.Name, tmp944.UploadedJarLocation, tmp944.JsonConf, tmp944.Topology, tmp944.Options, cancellationToken);
          }
          catch (global::StormThrift.AlreadyAliveException tmp946)
          {
            tmp945.E = tmp946;
          }
          catch (global::StormThrift.InvalidTopologyException tmp947)
          {
            tmp945.Ite = tmp947;
          }
          catch (global::StormThrift.AuthorizationException tmp948)
          {
            tmp945.Aze = tmp948;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("submitTopologyWithOpts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp945.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp949)
        {
          var tmp950 = $"Error occurred in {GetType().FullName}: {tmp949.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp949, tmp950);
          else
            Console.Error.WriteLine(tmp950);
          var tmp951 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("submitTopologyWithOpts", TMessageType.Exception, seqid), cancellationToken);
          await tmp951.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task killTopology_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp952 = new InternalStructs.killTopology_args();
        await tmp952.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp953 = new InternalStructs.killTopology_result();
        try
        {
          try
          {
            await _iAsync.killTopology(tmp952.Name, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp954)
          {
            tmp953.E = tmp954;
          }
          catch (global::StormThrift.AuthorizationException tmp955)
          {
            tmp953.Aze = tmp955;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("killTopology", TMessageType.Reply, seqid), cancellationToken); 
          await tmp953.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp956)
        {
          var tmp957 = $"Error occurred in {GetType().FullName}: {tmp956.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp956, tmp957);
          else
            Console.Error.WriteLine(tmp957);
          var tmp958 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("killTopology", TMessageType.Exception, seqid), cancellationToken);
          await tmp958.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task killTopologyWithOpts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp959 = new InternalStructs.killTopologyWithOpts_args();
        await tmp959.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp960 = new InternalStructs.killTopologyWithOpts_result();
        try
        {
          try
          {
            await _iAsync.killTopologyWithOpts(tmp959.Name, tmp959.Options, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp961)
          {
            tmp960.E = tmp961;
          }
          catch (global::StormThrift.AuthorizationException tmp962)
          {
            tmp960.Aze = tmp962;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("killTopologyWithOpts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp960.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp963)
        {
          var tmp964 = $"Error occurred in {GetType().FullName}: {tmp963.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp963, tmp964);
          else
            Console.Error.WriteLine(tmp964);
          var tmp965 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("killTopologyWithOpts", TMessageType.Exception, seqid), cancellationToken);
          await tmp965.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task activate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp966 = new InternalStructs.activate_args();
        await tmp966.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp967 = new InternalStructs.activate_result();
        try
        {
          try
          {
            await _iAsync.activate(tmp966.Name, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp968)
          {
            tmp967.E = tmp968;
          }
          catch (global::StormThrift.AuthorizationException tmp969)
          {
            tmp967.Aze = tmp969;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("activate", TMessageType.Reply, seqid), cancellationToken); 
          await tmp967.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp970)
        {
          var tmp971 = $"Error occurred in {GetType().FullName}: {tmp970.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp970, tmp971);
          else
            Console.Error.WriteLine(tmp971);
          var tmp972 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("activate", TMessageType.Exception, seqid), cancellationToken);
          await tmp972.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deactivate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp973 = new InternalStructs.deactivate_args();
        await tmp973.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp974 = new InternalStructs.deactivate_result();
        try
        {
          try
          {
            await _iAsync.deactivate(tmp973.Name, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp975)
          {
            tmp974.E = tmp975;
          }
          catch (global::StormThrift.AuthorizationException tmp976)
          {
            tmp974.Aze = tmp976;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deactivate", TMessageType.Reply, seqid), cancellationToken); 
          await tmp974.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp977)
        {
          var tmp978 = $"Error occurred in {GetType().FullName}: {tmp977.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp977, tmp978);
          else
            Console.Error.WriteLine(tmp978);
          var tmp979 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deactivate", TMessageType.Exception, seqid), cancellationToken);
          await tmp979.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task rebalance_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp980 = new InternalStructs.rebalance_args();
        await tmp980.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp981 = new InternalStructs.rebalance_result();
        try
        {
          try
          {
            await _iAsync.rebalance(tmp980.Name, tmp980.Options, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp982)
          {
            tmp981.E = tmp982;
          }
          catch (global::StormThrift.InvalidTopologyException tmp983)
          {
            tmp981.Ite = tmp983;
          }
          catch (global::StormThrift.AuthorizationException tmp984)
          {
            tmp981.Aze = tmp984;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("rebalance", TMessageType.Reply, seqid), cancellationToken); 
          await tmp981.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp985)
        {
          var tmp986 = $"Error occurred in {GetType().FullName}: {tmp985.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp985, tmp986);
          else
            Console.Error.WriteLine(tmp986);
          var tmp987 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("rebalance", TMessageType.Exception, seqid), cancellationToken);
          await tmp987.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setLogConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp988 = new InternalStructs.setLogConfig_args();
        await tmp988.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp989 = new InternalStructs.setLogConfig_result();
        try
        {
          await _iAsync.setLogConfig(tmp988.Name, tmp988.Config, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setLogConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp989.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp990)
        {
          var tmp991 = $"Error occurred in {GetType().FullName}: {tmp990.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp990, tmp991);
          else
            Console.Error.WriteLine(tmp991);
          var tmp992 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setLogConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp992.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getLogConfig_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp993 = new InternalStructs.getLogConfig_args();
        await tmp993.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp994 = new InternalStructs.getLogConfig_result();
        try
        {
          tmp994.Success = await _iAsync.getLogConfig(tmp993.Name, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getLogConfig", TMessageType.Reply, seqid), cancellationToken); 
          await tmp994.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp995)
        {
          var tmp996 = $"Error occurred in {GetType().FullName}: {tmp995.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp995, tmp996);
          else
            Console.Error.WriteLine(tmp996);
          var tmp997 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getLogConfig", TMessageType.Exception, seqid), cancellationToken);
          await tmp997.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task debug_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp998 = new InternalStructs.debug_args();
        await tmp998.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp999 = new InternalStructs.debug_result();
        try
        {
          try
          {
            await _iAsync.debug(tmp998.Name, tmp998.Component, tmp998.Enable, tmp998.SamplingPercentage, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1000)
          {
            tmp999.E = tmp1000;
          }
          catch (global::StormThrift.AuthorizationException tmp1001)
          {
            tmp999.Aze = tmp1001;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("debug", TMessageType.Reply, seqid), cancellationToken); 
          await tmp999.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1002)
        {
          var tmp1003 = $"Error occurred in {GetType().FullName}: {tmp1002.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1002, tmp1003);
          else
            Console.Error.WriteLine(tmp1003);
          var tmp1004 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("debug", TMessageType.Exception, seqid), cancellationToken);
          await tmp1004.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setWorkerProfiler_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1005 = new InternalStructs.setWorkerProfiler_args();
        await tmp1005.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1006 = new InternalStructs.setWorkerProfiler_result();
        try
        {
          await _iAsync.setWorkerProfiler(tmp1005.Id, tmp1005.ProfileRequest, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkerProfiler", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1006.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1007)
        {
          var tmp1008 = $"Error occurred in {GetType().FullName}: {tmp1007.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1007, tmp1008);
          else
            Console.Error.WriteLine(tmp1008);
          var tmp1009 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setWorkerProfiler", TMessageType.Exception, seqid), cancellationToken);
          await tmp1009.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getComponentPendingProfileActions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1010 = new InternalStructs.getComponentPendingProfileActions_args();
        await tmp1010.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1011 = new InternalStructs.getComponentPendingProfileActions_result();
        try
        {
          tmp1011.Success = await _iAsync.getComponentPendingProfileActions(tmp1010.Id, tmp1010.Component_id, tmp1010.Action, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getComponentPendingProfileActions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1011.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1012)
        {
          var tmp1013 = $"Error occurred in {GetType().FullName}: {tmp1012.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1012, tmp1013);
          else
            Console.Error.WriteLine(tmp1013);
          var tmp1014 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getComponentPendingProfileActions", TMessageType.Exception, seqid), cancellationToken);
          await tmp1014.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task uploadNewCredentials_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1015 = new InternalStructs.uploadNewCredentials_args();
        await tmp1015.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1016 = new InternalStructs.uploadNewCredentials_result();
        try
        {
          try
          {
            await _iAsync.uploadNewCredentials(tmp1015.Name, tmp1015.Creds, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1017)
          {
            tmp1016.E = tmp1017;
          }
          catch (global::StormThrift.InvalidTopologyException tmp1018)
          {
            tmp1016.Ite = tmp1018;
          }
          catch (global::StormThrift.AuthorizationException tmp1019)
          {
            tmp1016.Aze = tmp1019;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("uploadNewCredentials", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1016.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1020)
        {
          var tmp1021 = $"Error occurred in {GetType().FullName}: {tmp1020.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1020, tmp1021);
          else
            Console.Error.WriteLine(tmp1021);
          var tmp1022 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("uploadNewCredentials", TMessageType.Exception, seqid), cancellationToken);
          await tmp1022.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task beginCreateBlob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1023 = new InternalStructs.beginCreateBlob_args();
        await tmp1023.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1024 = new InternalStructs.beginCreateBlob_result();
        try
        {
          try
          {
            tmp1024.Success = await _iAsync.beginCreateBlob(tmp1023.Key, tmp1023.Meta, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1025)
          {
            tmp1024.Aze = tmp1025;
          }
          catch (global::StormThrift.KeyAlreadyExistsException tmp1026)
          {
            tmp1024.Kae = tmp1026;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("beginCreateBlob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1024.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1027)
        {
          var tmp1028 = $"Error occurred in {GetType().FullName}: {tmp1027.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1027, tmp1028);
          else
            Console.Error.WriteLine(tmp1028);
          var tmp1029 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("beginCreateBlob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1029.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task beginUpdateBlob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1030 = new InternalStructs.beginUpdateBlob_args();
        await tmp1030.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1031 = new InternalStructs.beginUpdateBlob_result();
        try
        {
          try
          {
            tmp1031.Success = await _iAsync.beginUpdateBlob(tmp1030.Key, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1032)
          {
            tmp1031.Aze = tmp1032;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1033)
          {
            tmp1031.Knf = tmp1033;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("beginUpdateBlob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1031.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1034)
        {
          var tmp1035 = $"Error occurred in {GetType().FullName}: {tmp1034.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1034, tmp1035);
          else
            Console.Error.WriteLine(tmp1035);
          var tmp1036 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("beginUpdateBlob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1036.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task uploadBlobChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1037 = new InternalStructs.uploadBlobChunk_args();
        await tmp1037.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1038 = new InternalStructs.uploadBlobChunk_result();
        try
        {
          try
          {
            await _iAsync.uploadBlobChunk(tmp1037.Session, tmp1037.Chunk, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1039)
          {
            tmp1038.Aze = tmp1039;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("uploadBlobChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1038.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1040)
        {
          var tmp1041 = $"Error occurred in {GetType().FullName}: {tmp1040.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1040, tmp1041);
          else
            Console.Error.WriteLine(tmp1041);
          var tmp1042 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("uploadBlobChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp1042.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task finishBlobUpload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1043 = new InternalStructs.finishBlobUpload_args();
        await tmp1043.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1044 = new InternalStructs.finishBlobUpload_result();
        try
        {
          try
          {
            await _iAsync.finishBlobUpload(tmp1043.Session, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1045)
          {
            tmp1044.Aze = tmp1045;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("finishBlobUpload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1044.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1046)
        {
          var tmp1047 = $"Error occurred in {GetType().FullName}: {tmp1046.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1046, tmp1047);
          else
            Console.Error.WriteLine(tmp1047);
          var tmp1048 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("finishBlobUpload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1048.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task cancelBlobUpload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1049 = new InternalStructs.cancelBlobUpload_args();
        await tmp1049.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1050 = new InternalStructs.cancelBlobUpload_result();
        try
        {
          try
          {
            await _iAsync.cancelBlobUpload(tmp1049.Session, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1051)
          {
            tmp1050.Aze = tmp1051;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("cancelBlobUpload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1050.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1052)
        {
          var tmp1053 = $"Error occurred in {GetType().FullName}: {tmp1052.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1052, tmp1053);
          else
            Console.Error.WriteLine(tmp1053);
          var tmp1054 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("cancelBlobUpload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1054.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getBlobMeta_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1055 = new InternalStructs.getBlobMeta_args();
        await tmp1055.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1056 = new InternalStructs.getBlobMeta_result();
        try
        {
          try
          {
            tmp1056.Success = await _iAsync.getBlobMeta(tmp1055.Key, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1057)
          {
            tmp1056.Aze = tmp1057;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1058)
          {
            tmp1056.Knf = tmp1058;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getBlobMeta", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1056.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1059)
        {
          var tmp1060 = $"Error occurred in {GetType().FullName}: {tmp1059.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1059, tmp1060);
          else
            Console.Error.WriteLine(tmp1060);
          var tmp1061 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getBlobMeta", TMessageType.Exception, seqid), cancellationToken);
          await tmp1061.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task setBlobMeta_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1062 = new InternalStructs.setBlobMeta_args();
        await tmp1062.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1063 = new InternalStructs.setBlobMeta_result();
        try
        {
          try
          {
            await _iAsync.setBlobMeta(tmp1062.Key, tmp1062.Meta, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1064)
          {
            tmp1063.Aze = tmp1064;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1065)
          {
            tmp1063.Knf = tmp1065;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("setBlobMeta", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1063.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1066)
        {
          var tmp1067 = $"Error occurred in {GetType().FullName}: {tmp1066.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1066, tmp1067);
          else
            Console.Error.WriteLine(tmp1067);
          var tmp1068 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("setBlobMeta", TMessageType.Exception, seqid), cancellationToken);
          await tmp1068.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task beginBlobDownload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1069 = new InternalStructs.beginBlobDownload_args();
        await tmp1069.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1070 = new InternalStructs.beginBlobDownload_result();
        try
        {
          try
          {
            tmp1070.Success = await _iAsync.beginBlobDownload(tmp1069.Key, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1071)
          {
            tmp1070.Aze = tmp1071;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1072)
          {
            tmp1070.Knf = tmp1072;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("beginBlobDownload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1070.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1073)
        {
          var tmp1074 = $"Error occurred in {GetType().FullName}: {tmp1073.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1073, tmp1074);
          else
            Console.Error.WriteLine(tmp1074);
          var tmp1075 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("beginBlobDownload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1075.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task downloadBlobChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1076 = new InternalStructs.downloadBlobChunk_args();
        await tmp1076.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1077 = new InternalStructs.downloadBlobChunk_result();
        try
        {
          try
          {
            tmp1077.Success = await _iAsync.downloadBlobChunk(tmp1076.Session, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1078)
          {
            tmp1077.Aze = tmp1078;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("downloadBlobChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1077.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1079)
        {
          var tmp1080 = $"Error occurred in {GetType().FullName}: {tmp1079.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1079, tmp1080);
          else
            Console.Error.WriteLine(tmp1080);
          var tmp1081 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("downloadBlobChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp1081.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task deleteBlob_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1082 = new InternalStructs.deleteBlob_args();
        await tmp1082.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1083 = new InternalStructs.deleteBlob_result();
        try
        {
          try
          {
            await _iAsync.deleteBlob(tmp1082.Key, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1084)
          {
            tmp1083.Aze = tmp1084;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1085)
          {
            tmp1083.Knf = tmp1085;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("deleteBlob", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1083.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1086)
        {
          var tmp1087 = $"Error occurred in {GetType().FullName}: {tmp1086.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1086, tmp1087);
          else
            Console.Error.WriteLine(tmp1087);
          var tmp1088 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("deleteBlob", TMessageType.Exception, seqid), cancellationToken);
          await tmp1088.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task listBlobs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1089 = new InternalStructs.listBlobs_args();
        await tmp1089.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1090 = new InternalStructs.listBlobs_result();
        try
        {
          tmp1090.Success = await _iAsync.listBlobs(tmp1089.Session, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("listBlobs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1090.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1091)
        {
          var tmp1092 = $"Error occurred in {GetType().FullName}: {tmp1091.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1091, tmp1092);
          else
            Console.Error.WriteLine(tmp1092);
          var tmp1093 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("listBlobs", TMessageType.Exception, seqid), cancellationToken);
          await tmp1093.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getBlobReplication_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1094 = new InternalStructs.getBlobReplication_args();
        await tmp1094.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1095 = new InternalStructs.getBlobReplication_result();
        try
        {
          try
          {
            tmp1095.Success = await _iAsync.getBlobReplication(tmp1094.Key, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1096)
          {
            tmp1095.Aze = tmp1096;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1097)
          {
            tmp1095.Knf = tmp1097;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getBlobReplication", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1095.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1098)
        {
          var tmp1099 = $"Error occurred in {GetType().FullName}: {tmp1098.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1098, tmp1099);
          else
            Console.Error.WriteLine(tmp1099);
          var tmp1100 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getBlobReplication", TMessageType.Exception, seqid), cancellationToken);
          await tmp1100.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updateBlobReplication_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1101 = new InternalStructs.updateBlobReplication_args();
        await tmp1101.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1102 = new InternalStructs.updateBlobReplication_result();
        try
        {
          try
          {
            tmp1102.Success = await _iAsync.updateBlobReplication(tmp1101.Key, tmp1101.Replication, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1103)
          {
            tmp1102.Aze = tmp1103;
          }
          catch (global::StormThrift.KeyNotFoundException tmp1104)
          {
            tmp1102.Knf = tmp1104;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("updateBlobReplication", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1102.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1105)
        {
          var tmp1106 = $"Error occurred in {GetType().FullName}: {tmp1105.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1105, tmp1106);
          else
            Console.Error.WriteLine(tmp1106);
          var tmp1107 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updateBlobReplication", TMessageType.Exception, seqid), cancellationToken);
          await tmp1107.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task createStateInZookeeper_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1108 = new InternalStructs.createStateInZookeeper_args();
        await tmp1108.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1109 = new InternalStructs.createStateInZookeeper_result();
        try
        {
          await _iAsync.createStateInZookeeper(tmp1108.Key, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("createStateInZookeeper", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1109.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1110)
        {
          var tmp1111 = $"Error occurred in {GetType().FullName}: {tmp1110.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1110, tmp1111);
          else
            Console.Error.WriteLine(tmp1111);
          var tmp1112 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("createStateInZookeeper", TMessageType.Exception, seqid), cancellationToken);
          await tmp1112.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task beginFileUpload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1113 = new InternalStructs.beginFileUpload_args();
        await tmp1113.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1114 = new InternalStructs.beginFileUpload_result();
        try
        {
          try
          {
            tmp1114.Success = await _iAsync.beginFileUpload(cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1115)
          {
            tmp1114.Aze = tmp1115;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("beginFileUpload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1114.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1116)
        {
          var tmp1117 = $"Error occurred in {GetType().FullName}: {tmp1116.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1116, tmp1117);
          else
            Console.Error.WriteLine(tmp1117);
          var tmp1118 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("beginFileUpload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1118.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task uploadChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1119 = new InternalStructs.uploadChunk_args();
        await tmp1119.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1120 = new InternalStructs.uploadChunk_result();
        try
        {
          try
          {
            await _iAsync.uploadChunk(tmp1119.Location, tmp1119.Chunk, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1121)
          {
            tmp1120.Aze = tmp1121;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("uploadChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1120.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1122)
        {
          var tmp1123 = $"Error occurred in {GetType().FullName}: {tmp1122.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1122, tmp1123);
          else
            Console.Error.WriteLine(tmp1123);
          var tmp1124 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("uploadChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp1124.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task finishFileUpload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1125 = new InternalStructs.finishFileUpload_args();
        await tmp1125.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1126 = new InternalStructs.finishFileUpload_result();
        try
        {
          try
          {
            await _iAsync.finishFileUpload(tmp1125.Location, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1127)
          {
            tmp1126.Aze = tmp1127;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("finishFileUpload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1126.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1128)
        {
          var tmp1129 = $"Error occurred in {GetType().FullName}: {tmp1128.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1128, tmp1129);
          else
            Console.Error.WriteLine(tmp1129);
          var tmp1130 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("finishFileUpload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1130.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task beginFileDownload_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1131 = new InternalStructs.beginFileDownload_args();
        await tmp1131.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1132 = new InternalStructs.beginFileDownload_result();
        try
        {
          try
          {
            tmp1132.Success = await _iAsync.beginFileDownload(tmp1131.File, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1133)
          {
            tmp1132.Aze = tmp1133;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("beginFileDownload", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1132.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1134)
        {
          var tmp1135 = $"Error occurred in {GetType().FullName}: {tmp1134.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1134, tmp1135);
          else
            Console.Error.WriteLine(tmp1135);
          var tmp1136 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("beginFileDownload", TMessageType.Exception, seqid), cancellationToken);
          await tmp1136.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task downloadChunk_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1137 = new InternalStructs.downloadChunk_args();
        await tmp1137.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1138 = new InternalStructs.downloadChunk_result();
        try
        {
          try
          {
            tmp1138.Success = await _iAsync.downloadChunk(tmp1137.Id, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1139)
          {
            tmp1138.Aze = tmp1139;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("downloadChunk", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1138.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1140)
        {
          var tmp1141 = $"Error occurred in {GetType().FullName}: {tmp1140.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1140, tmp1141);
          else
            Console.Error.WriteLine(tmp1141);
          var tmp1142 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("downloadChunk", TMessageType.Exception, seqid), cancellationToken);
          await tmp1142.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getNimbusConf_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1143 = new InternalStructs.getNimbusConf_args();
        await tmp1143.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1144 = new InternalStructs.getNimbusConf_result();
        try
        {
          try
          {
            tmp1144.Success = await _iAsync.getNimbusConf(cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1145)
          {
            tmp1144.Aze = tmp1145;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getNimbusConf", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1144.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1146)
        {
          var tmp1147 = $"Error occurred in {GetType().FullName}: {tmp1146.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1146, tmp1147);
          else
            Console.Error.WriteLine(tmp1147);
          var tmp1148 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getNimbusConf", TMessageType.Exception, seqid), cancellationToken);
          await tmp1148.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getClusterInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1149 = new InternalStructs.getClusterInfo_args();
        await tmp1149.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1150 = new InternalStructs.getClusterInfo_result();
        try
        {
          try
          {
            tmp1150.Success = await _iAsync.getClusterInfo(cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1151)
          {
            tmp1150.Aze = tmp1151;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getClusterInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1150.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1152)
        {
          var tmp1153 = $"Error occurred in {GetType().FullName}: {tmp1152.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1152, tmp1153);
          else
            Console.Error.WriteLine(tmp1153);
          var tmp1154 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getClusterInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopologyInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1155 = new InternalStructs.getTopologyInfo_args();
        await tmp1155.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1156 = new InternalStructs.getTopologyInfo_result();
        try
        {
          try
          {
            tmp1156.Success = await _iAsync.getTopologyInfo(tmp1155.Id, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1157)
          {
            tmp1156.E = tmp1157;
          }
          catch (global::StormThrift.AuthorizationException tmp1158)
          {
            tmp1156.Aze = tmp1158;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1156.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1159)
        {
          var tmp1160 = $"Error occurred in {GetType().FullName}: {tmp1159.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1159, tmp1160);
          else
            Console.Error.WriteLine(tmp1160);
          var tmp1161 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1161.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopologyInfoWithOpts_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1162 = new InternalStructs.getTopologyInfoWithOpts_args();
        await tmp1162.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1163 = new InternalStructs.getTopologyInfoWithOpts_result();
        try
        {
          try
          {
            tmp1163.Success = await _iAsync.getTopologyInfoWithOpts(tmp1162.Id, tmp1162.Options, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1164)
          {
            tmp1163.E = tmp1164;
          }
          catch (global::StormThrift.AuthorizationException tmp1165)
          {
            tmp1163.Aze = tmp1165;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyInfoWithOpts", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1163.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1166)
        {
          var tmp1167 = $"Error occurred in {GetType().FullName}: {tmp1166.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1166, tmp1167);
          else
            Console.Error.WriteLine(tmp1167);
          var tmp1168 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyInfoWithOpts", TMessageType.Exception, seqid), cancellationToken);
          await tmp1168.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopologyPageInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1169 = new InternalStructs.getTopologyPageInfo_args();
        await tmp1169.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1170 = new InternalStructs.getTopologyPageInfo_result();
        try
        {
          try
          {
            tmp1170.Success = await _iAsync.getTopologyPageInfo(tmp1169.Id, tmp1169.Window, tmp1169.Is_include_sys, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1171)
          {
            tmp1170.E = tmp1171;
          }
          catch (global::StormThrift.AuthorizationException tmp1172)
          {
            tmp1170.Aze = tmp1172;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyPageInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1170.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1173)
        {
          var tmp1174 = $"Error occurred in {GetType().FullName}: {tmp1173.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1173, tmp1174);
          else
            Console.Error.WriteLine(tmp1174);
          var tmp1175 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyPageInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1175.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getComponentPageInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1176 = new InternalStructs.getComponentPageInfo_args();
        await tmp1176.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1177 = new InternalStructs.getComponentPageInfo_result();
        try
        {
          try
          {
            tmp1177.Success = await _iAsync.getComponentPageInfo(tmp1176.Topology_id, tmp1176.Component_id, tmp1176.Window, tmp1176.Is_include_sys, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1178)
          {
            tmp1177.E = tmp1178;
          }
          catch (global::StormThrift.AuthorizationException tmp1179)
          {
            tmp1177.Aze = tmp1179;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getComponentPageInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1177.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1180)
        {
          var tmp1181 = $"Error occurred in {GetType().FullName}: {tmp1180.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1180, tmp1181);
          else
            Console.Error.WriteLine(tmp1181);
          var tmp1182 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getComponentPageInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp1182.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopologyConf_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1183 = new InternalStructs.getTopologyConf_args();
        await tmp1183.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1184 = new InternalStructs.getTopologyConf_result();
        try
        {
          try
          {
            tmp1184.Success = await _iAsync.getTopologyConf(tmp1183.Id, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1185)
          {
            tmp1184.E = tmp1185;
          }
          catch (global::StormThrift.AuthorizationException tmp1186)
          {
            tmp1184.Aze = tmp1186;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyConf", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1184.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1187)
        {
          var tmp1188 = $"Error occurred in {GetType().FullName}: {tmp1187.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1187, tmp1188);
          else
            Console.Error.WriteLine(tmp1188);
          var tmp1189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyConf", TMessageType.Exception, seqid), cancellationToken);
          await tmp1189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopology_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1190 = new InternalStructs.getTopology_args();
        await tmp1190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1191 = new InternalStructs.getTopology_result();
        try
        {
          try
          {
            tmp1191.Success = await _iAsync.getTopology(tmp1190.Id, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1192)
          {
            tmp1191.E = tmp1192;
          }
          catch (global::StormThrift.AuthorizationException tmp1193)
          {
            tmp1191.Aze = tmp1193;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopology", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1194)
        {
          var tmp1195 = $"Error occurred in {GetType().FullName}: {tmp1194.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1194, tmp1195);
          else
            Console.Error.WriteLine(tmp1195);
          var tmp1196 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopology", TMessageType.Exception, seqid), cancellationToken);
          await tmp1196.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getUserTopology_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1197 = new InternalStructs.getUserTopology_args();
        await tmp1197.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1198 = new InternalStructs.getUserTopology_result();
        try
        {
          try
          {
            tmp1198.Success = await _iAsync.getUserTopology(tmp1197.Id, cancellationToken);
          }
          catch (global::StormThrift.NotAliveException tmp1199)
          {
            tmp1198.E = tmp1199;
          }
          catch (global::StormThrift.AuthorizationException tmp1200)
          {
            tmp1198.Aze = tmp1200;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getUserTopology", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1198.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1201)
        {
          var tmp1202 = $"Error occurred in {GetType().FullName}: {tmp1201.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1201, tmp1202);
          else
            Console.Error.WriteLine(tmp1202);
          var tmp1203 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getUserTopology", TMessageType.Exception, seqid), cancellationToken);
          await tmp1203.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getTopologyHistory_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp1204 = new InternalStructs.getTopologyHistory_args();
        await tmp1204.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp1205 = new InternalStructs.getTopologyHistory_result();
        try
        {
          try
          {
            tmp1205.Success = await _iAsync.getTopologyHistory(tmp1204.User, cancellationToken);
          }
          catch (global::StormThrift.AuthorizationException tmp1206)
          {
            tmp1205.Aze = tmp1206;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyHistory", TMessageType.Reply, seqid), cancellationToken); 
          await tmp1205.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp1207)
        {
          var tmp1208 = $"Error occurred in {GetType().FullName}: {tmp1207.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp1207, tmp1208);
          else
            Console.Error.WriteLine(tmp1208);
          var tmp1209 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTopologyHistory", TMessageType.Exception, seqid), cancellationToken);
          await tmp1209.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class submitTopology_args : TBase
      {
        private string _name;
        private string _uploadedJarLocation;
        private string _jsonConf;
        private global::StormThrift.StormTopology _topology;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string UploadedJarLocation
        {
          get
          {
            return _uploadedJarLocation;
          }
          set
          {
            __isset.uploadedJarLocation = true;
            this._uploadedJarLocation = value;
          }
        }

        public string JsonConf
        {
          get
          {
            return _jsonConf;
          }
          set
          {
            __isset.jsonConf = true;
            this._jsonConf = value;
          }
        }

        public global::StormThrift.StormTopology Topology
        {
          get
          {
            return _topology;
          }
          set
          {
            __isset.topology = true;
            this._topology = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool uploadedJarLocation;
          public bool jsonConf;
          public bool topology;
        }

        public submitTopology_args()
        {
        }

        public submitTopology_args DeepCopy()
        {
          var tmp1210 = new submitTopology_args();
          if((Name != null) && __isset.name)
          {
            tmp1210.Name = this.Name;
          }
          tmp1210.__isset.name = this.__isset.name;
          if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
          {
            tmp1210.UploadedJarLocation = this.UploadedJarLocation;
          }
          tmp1210.__isset.uploadedJarLocation = this.__isset.uploadedJarLocation;
          if((JsonConf != null) && __isset.jsonConf)
          {
            tmp1210.JsonConf = this.JsonConf;
          }
          tmp1210.__isset.jsonConf = this.__isset.jsonConf;
          if((Topology != null) && __isset.topology)
          {
            tmp1210.Topology = (global::StormThrift.StormTopology)this.Topology.DeepCopy();
          }
          tmp1210.__isset.topology = this.__isset.topology;
          return tmp1210;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    UploadedJarLocation = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    JsonConf = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Topology = new global::StormThrift.StormTopology();
                    await Topology.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1211 = new TStruct("submitTopology_args");
            await oprot.WriteStructBeginAsync(tmp1211, cancellationToken);
            var tmp1212 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1212.Name = "name";
              tmp1212.Type = TType.String;
              tmp1212.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1212, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
            {
              tmp1212.Name = "uploadedJarLocation";
              tmp1212.Type = TType.String;
              tmp1212.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1212, cancellationToken);
              await oprot.WriteStringAsync(UploadedJarLocation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((JsonConf != null) && __isset.jsonConf)
            {
              tmp1212.Name = "jsonConf";
              tmp1212.Type = TType.String;
              tmp1212.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1212, cancellationToken);
              await oprot.WriteStringAsync(JsonConf, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Topology != null) && __isset.topology)
            {
              tmp1212.Name = "topology";
              tmp1212.Type = TType.Struct;
              tmp1212.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1212, cancellationToken);
              await Topology.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is submitTopology_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.uploadedJarLocation == other.__isset.uploadedJarLocation) && ((!__isset.uploadedJarLocation) || (global::System.Object.Equals(UploadedJarLocation, other.UploadedJarLocation))))
            && ((__isset.jsonConf == other.__isset.jsonConf) && ((!__isset.jsonConf) || (global::System.Object.Equals(JsonConf, other.JsonConf))))
            && ((__isset.topology == other.__isset.topology) && ((!__isset.topology) || (global::System.Object.Equals(Topology, other.Topology))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
            {
              hashcode = (hashcode * 397) + UploadedJarLocation.GetHashCode();
            }
            if((JsonConf != null) && __isset.jsonConf)
            {
              hashcode = (hashcode * 397) + JsonConf.GetHashCode();
            }
            if((Topology != null) && __isset.topology)
            {
              hashcode = (hashcode * 397) + Topology.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1213 = new StringBuilder("submitTopology_args(");
          int tmp1214 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1214++) { tmp1213.Append(", "); }
            tmp1213.Append("Name: ");
            Name.ToString(tmp1213);
          }
          if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
          {
            if(0 < tmp1214++) { tmp1213.Append(", "); }
            tmp1213.Append("UploadedJarLocation: ");
            UploadedJarLocation.ToString(tmp1213);
          }
          if((JsonConf != null) && __isset.jsonConf)
          {
            if(0 < tmp1214++) { tmp1213.Append(", "); }
            tmp1213.Append("JsonConf: ");
            JsonConf.ToString(tmp1213);
          }
          if((Topology != null) && __isset.topology)
          {
            if(0 < tmp1214++) { tmp1213.Append(", "); }
            tmp1213.Append("Topology: ");
            Topology.ToString(tmp1213);
          }
          tmp1213.Append(')');
          return tmp1213.ToString();
        }
      }


      public partial class submitTopology_result : TBase
      {
        private global::StormThrift.AlreadyAliveException _e;
        private global::StormThrift.InvalidTopologyException _ite;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AlreadyAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.InvalidTopologyException Ite
        {
          get
          {
            return _ite;
          }
          set
          {
            __isset.ite = true;
            this._ite = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool ite;
          public bool aze;
        }

        public submitTopology_result()
        {
        }

        public submitTopology_result DeepCopy()
        {
          var tmp1215 = new submitTopology_result();
          if((E != null) && __isset.e)
          {
            tmp1215.E = (global::StormThrift.AlreadyAliveException)this.E.DeepCopy();
          }
          tmp1215.__isset.e = this.__isset.e;
          if((Ite != null) && __isset.ite)
          {
            tmp1215.Ite = (global::StormThrift.InvalidTopologyException)this.Ite.DeepCopy();
          }
          tmp1215.__isset.ite = this.__isset.ite;
          if((Aze != null) && __isset.aze)
          {
            tmp1215.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1215.__isset.aze = this.__isset.aze;
          return tmp1215;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.AlreadyAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Ite = new global::StormThrift.InvalidTopologyException();
                    await Ite.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1216 = new TStruct("submitTopology_result");
            await oprot.WriteStructBeginAsync(tmp1216, cancellationToken);
            var tmp1217 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1217.Name = "E";
                tmp1217.Type = TType.Struct;
                tmp1217.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1217, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ite)
            {
              if (Ite != null)
              {
                tmp1217.Name = "Ite";
                tmp1217.Type = TType.Struct;
                tmp1217.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1217, cancellationToken);
                await Ite.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1217.Name = "Aze";
                tmp1217.Type = TType.Struct;
                tmp1217.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1217, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is submitTopology_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.ite == other.__isset.ite) && ((!__isset.ite) || (global::System.Object.Equals(Ite, other.Ite))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Ite != null) && __isset.ite)
            {
              hashcode = (hashcode * 397) + Ite.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1218 = new StringBuilder("submitTopology_result(");
          int tmp1219 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1219++) { tmp1218.Append(", "); }
            tmp1218.Append("E: ");
            E.ToString(tmp1218);
          }
          if((Ite != null) && __isset.ite)
          {
            if(0 < tmp1219++) { tmp1218.Append(", "); }
            tmp1218.Append("Ite: ");
            Ite.ToString(tmp1218);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1219++) { tmp1218.Append(", "); }
            tmp1218.Append("Aze: ");
            Aze.ToString(tmp1218);
          }
          tmp1218.Append(')');
          return tmp1218.ToString();
        }
      }


      public partial class submitTopologyWithOpts_args : TBase
      {
        private string _name;
        private string _uploadedJarLocation;
        private string _jsonConf;
        private global::StormThrift.StormTopology _topology;
        private global::StormThrift.SubmitOptions _options;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string UploadedJarLocation
        {
          get
          {
            return _uploadedJarLocation;
          }
          set
          {
            __isset.uploadedJarLocation = true;
            this._uploadedJarLocation = value;
          }
        }

        public string JsonConf
        {
          get
          {
            return _jsonConf;
          }
          set
          {
            __isset.jsonConf = true;
            this._jsonConf = value;
          }
        }

        public global::StormThrift.StormTopology Topology
        {
          get
          {
            return _topology;
          }
          set
          {
            __isset.topology = true;
            this._topology = value;
          }
        }

        public global::StormThrift.SubmitOptions Options
        {
          get
          {
            return _options;
          }
          set
          {
            __isset.options = true;
            this._options = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool uploadedJarLocation;
          public bool jsonConf;
          public bool topology;
          public bool options;
        }

        public submitTopologyWithOpts_args()
        {
        }

        public submitTopologyWithOpts_args DeepCopy()
        {
          var tmp1220 = new submitTopologyWithOpts_args();
          if((Name != null) && __isset.name)
          {
            tmp1220.Name = this.Name;
          }
          tmp1220.__isset.name = this.__isset.name;
          if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
          {
            tmp1220.UploadedJarLocation = this.UploadedJarLocation;
          }
          tmp1220.__isset.uploadedJarLocation = this.__isset.uploadedJarLocation;
          if((JsonConf != null) && __isset.jsonConf)
          {
            tmp1220.JsonConf = this.JsonConf;
          }
          tmp1220.__isset.jsonConf = this.__isset.jsonConf;
          if((Topology != null) && __isset.topology)
          {
            tmp1220.Topology = (global::StormThrift.StormTopology)this.Topology.DeepCopy();
          }
          tmp1220.__isset.topology = this.__isset.topology;
          if((Options != null) && __isset.options)
          {
            tmp1220.Options = (global::StormThrift.SubmitOptions)this.Options.DeepCopy();
          }
          tmp1220.__isset.options = this.__isset.options;
          return tmp1220;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    UploadedJarLocation = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    JsonConf = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Topology = new global::StormThrift.StormTopology();
                    await Topology.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Struct)
                  {
                    Options = new global::StormThrift.SubmitOptions();
                    await Options.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1221 = new TStruct("submitTopologyWithOpts_args");
            await oprot.WriteStructBeginAsync(tmp1221, cancellationToken);
            var tmp1222 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1222.Name = "name";
              tmp1222.Type = TType.String;
              tmp1222.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
            {
              tmp1222.Name = "uploadedJarLocation";
              tmp1222.Type = TType.String;
              tmp1222.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await oprot.WriteStringAsync(UploadedJarLocation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((JsonConf != null) && __isset.jsonConf)
            {
              tmp1222.Name = "jsonConf";
              tmp1222.Type = TType.String;
              tmp1222.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await oprot.WriteStringAsync(JsonConf, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Topology != null) && __isset.topology)
            {
              tmp1222.Name = "topology";
              tmp1222.Type = TType.Struct;
              tmp1222.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await Topology.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Options != null) && __isset.options)
            {
              tmp1222.Name = "options";
              tmp1222.Type = TType.Struct;
              tmp1222.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp1222, cancellationToken);
              await Options.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is submitTopologyWithOpts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.uploadedJarLocation == other.__isset.uploadedJarLocation) && ((!__isset.uploadedJarLocation) || (global::System.Object.Equals(UploadedJarLocation, other.UploadedJarLocation))))
            && ((__isset.jsonConf == other.__isset.jsonConf) && ((!__isset.jsonConf) || (global::System.Object.Equals(JsonConf, other.JsonConf))))
            && ((__isset.topology == other.__isset.topology) && ((!__isset.topology) || (global::System.Object.Equals(Topology, other.Topology))))
            && ((__isset.options == other.__isset.options) && ((!__isset.options) || (global::System.Object.Equals(Options, other.Options))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
            {
              hashcode = (hashcode * 397) + UploadedJarLocation.GetHashCode();
            }
            if((JsonConf != null) && __isset.jsonConf)
            {
              hashcode = (hashcode * 397) + JsonConf.GetHashCode();
            }
            if((Topology != null) && __isset.topology)
            {
              hashcode = (hashcode * 397) + Topology.GetHashCode();
            }
            if((Options != null) && __isset.options)
            {
              hashcode = (hashcode * 397) + Options.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1223 = new StringBuilder("submitTopologyWithOpts_args(");
          int tmp1224 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("Name: ");
            Name.ToString(tmp1223);
          }
          if((UploadedJarLocation != null) && __isset.uploadedJarLocation)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("UploadedJarLocation: ");
            UploadedJarLocation.ToString(tmp1223);
          }
          if((JsonConf != null) && __isset.jsonConf)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("JsonConf: ");
            JsonConf.ToString(tmp1223);
          }
          if((Topology != null) && __isset.topology)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("Topology: ");
            Topology.ToString(tmp1223);
          }
          if((Options != null) && __isset.options)
          {
            if(0 < tmp1224++) { tmp1223.Append(", "); }
            tmp1223.Append("Options: ");
            Options.ToString(tmp1223);
          }
          tmp1223.Append(')');
          return tmp1223.ToString();
        }
      }


      public partial class submitTopologyWithOpts_result : TBase
      {
        private global::StormThrift.AlreadyAliveException _e;
        private global::StormThrift.InvalidTopologyException _ite;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AlreadyAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.InvalidTopologyException Ite
        {
          get
          {
            return _ite;
          }
          set
          {
            __isset.ite = true;
            this._ite = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool ite;
          public bool aze;
        }

        public submitTopologyWithOpts_result()
        {
        }

        public submitTopologyWithOpts_result DeepCopy()
        {
          var tmp1225 = new submitTopologyWithOpts_result();
          if((E != null) && __isset.e)
          {
            tmp1225.E = (global::StormThrift.AlreadyAliveException)this.E.DeepCopy();
          }
          tmp1225.__isset.e = this.__isset.e;
          if((Ite != null) && __isset.ite)
          {
            tmp1225.Ite = (global::StormThrift.InvalidTopologyException)this.Ite.DeepCopy();
          }
          tmp1225.__isset.ite = this.__isset.ite;
          if((Aze != null) && __isset.aze)
          {
            tmp1225.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1225.__isset.aze = this.__isset.aze;
          return tmp1225;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.AlreadyAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Ite = new global::StormThrift.InvalidTopologyException();
                    await Ite.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1226 = new TStruct("submitTopologyWithOpts_result");
            await oprot.WriteStructBeginAsync(tmp1226, cancellationToken);
            var tmp1227 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1227.Name = "E";
                tmp1227.Type = TType.Struct;
                tmp1227.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ite)
            {
              if (Ite != null)
              {
                tmp1227.Name = "Ite";
                tmp1227.Type = TType.Struct;
                tmp1227.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
                await Ite.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1227.Name = "Aze";
                tmp1227.Type = TType.Struct;
                tmp1227.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1227, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is submitTopologyWithOpts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.ite == other.__isset.ite) && ((!__isset.ite) || (global::System.Object.Equals(Ite, other.Ite))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Ite != null) && __isset.ite)
            {
              hashcode = (hashcode * 397) + Ite.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1228 = new StringBuilder("submitTopologyWithOpts_result(");
          int tmp1229 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1229++) { tmp1228.Append(", "); }
            tmp1228.Append("E: ");
            E.ToString(tmp1228);
          }
          if((Ite != null) && __isset.ite)
          {
            if(0 < tmp1229++) { tmp1228.Append(", "); }
            tmp1228.Append("Ite: ");
            Ite.ToString(tmp1228);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1229++) { tmp1228.Append(", "); }
            tmp1228.Append("Aze: ");
            Aze.ToString(tmp1228);
          }
          tmp1228.Append(')');
          return tmp1228.ToString();
        }
      }


      public partial class killTopology_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public killTopology_args()
        {
        }

        public killTopology_args DeepCopy()
        {
          var tmp1230 = new killTopology_args();
          if((Name != null) && __isset.name)
          {
            tmp1230.Name = this.Name;
          }
          tmp1230.__isset.name = this.__isset.name;
          return tmp1230;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1231 = new TStruct("killTopology_args");
            await oprot.WriteStructBeginAsync(tmp1231, cancellationToken);
            var tmp1232 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1232.Name = "name";
              tmp1232.Type = TType.String;
              tmp1232.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1232, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killTopology_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1233 = new StringBuilder("killTopology_args(");
          int tmp1234 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1234++) { tmp1233.Append(", "); }
            tmp1233.Append("Name: ");
            Name.ToString(tmp1233);
          }
          tmp1233.Append(')');
          return tmp1233.ToString();
        }
      }


      public partial class killTopology_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool aze;
        }

        public killTopology_result()
        {
        }

        public killTopology_result DeepCopy()
        {
          var tmp1235 = new killTopology_result();
          if((E != null) && __isset.e)
          {
            tmp1235.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1235.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1235.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1235.__isset.aze = this.__isset.aze;
          return tmp1235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1236 = new TStruct("killTopology_result");
            await oprot.WriteStructBeginAsync(tmp1236, cancellationToken);
            var tmp1237 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1237.Name = "E";
                tmp1237.Type = TType.Struct;
                tmp1237.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1237, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1237.Name = "Aze";
                tmp1237.Type = TType.Struct;
                tmp1237.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1237, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killTopology_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1238 = new StringBuilder("killTopology_result(");
          int tmp1239 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1239++) { tmp1238.Append(", "); }
            tmp1238.Append("E: ");
            E.ToString(tmp1238);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1239++) { tmp1238.Append(", "); }
            tmp1238.Append("Aze: ");
            Aze.ToString(tmp1238);
          }
          tmp1238.Append(')');
          return tmp1238.ToString();
        }
      }


      public partial class killTopologyWithOpts_args : TBase
      {
        private string _name;
        private global::StormThrift.KillOptions _options;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::StormThrift.KillOptions Options
        {
          get
          {
            return _options;
          }
          set
          {
            __isset.options = true;
            this._options = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool options;
        }

        public killTopologyWithOpts_args()
        {
        }

        public killTopologyWithOpts_args DeepCopy()
        {
          var tmp1240 = new killTopologyWithOpts_args();
          if((Name != null) && __isset.name)
          {
            tmp1240.Name = this.Name;
          }
          tmp1240.__isset.name = this.__isset.name;
          if((Options != null) && __isset.options)
          {
            tmp1240.Options = (global::StormThrift.KillOptions)this.Options.DeepCopy();
          }
          tmp1240.__isset.options = this.__isset.options;
          return tmp1240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Options = new global::StormThrift.KillOptions();
                    await Options.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1241 = new TStruct("killTopologyWithOpts_args");
            await oprot.WriteStructBeginAsync(tmp1241, cancellationToken);
            var tmp1242 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1242.Name = "name";
              tmp1242.Type = TType.String;
              tmp1242.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1242, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Options != null) && __isset.options)
            {
              tmp1242.Name = "options";
              tmp1242.Type = TType.Struct;
              tmp1242.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1242, cancellationToken);
              await Options.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killTopologyWithOpts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.options == other.__isset.options) && ((!__isset.options) || (global::System.Object.Equals(Options, other.Options))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Options != null) && __isset.options)
            {
              hashcode = (hashcode * 397) + Options.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1243 = new StringBuilder("killTopologyWithOpts_args(");
          int tmp1244 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1244++) { tmp1243.Append(", "); }
            tmp1243.Append("Name: ");
            Name.ToString(tmp1243);
          }
          if((Options != null) && __isset.options)
          {
            if(0 < tmp1244++) { tmp1243.Append(", "); }
            tmp1243.Append("Options: ");
            Options.ToString(tmp1243);
          }
          tmp1243.Append(')');
          return tmp1243.ToString();
        }
      }


      public partial class killTopologyWithOpts_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool aze;
        }

        public killTopologyWithOpts_result()
        {
        }

        public killTopologyWithOpts_result DeepCopy()
        {
          var tmp1245 = new killTopologyWithOpts_result();
          if((E != null) && __isset.e)
          {
            tmp1245.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1245.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1245.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1245.__isset.aze = this.__isset.aze;
          return tmp1245;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1246 = new TStruct("killTopologyWithOpts_result");
            await oprot.WriteStructBeginAsync(tmp1246, cancellationToken);
            var tmp1247 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1247.Name = "E";
                tmp1247.Type = TType.Struct;
                tmp1247.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1247.Name = "Aze";
                tmp1247.Type = TType.Struct;
                tmp1247.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1247, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is killTopologyWithOpts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1248 = new StringBuilder("killTopologyWithOpts_result(");
          int tmp1249 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("E: ");
            E.ToString(tmp1248);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1249++) { tmp1248.Append(", "); }
            tmp1248.Append("Aze: ");
            Aze.ToString(tmp1248);
          }
          tmp1248.Append(')');
          return tmp1248.ToString();
        }
      }


      public partial class activate_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public activate_args()
        {
        }

        public activate_args DeepCopy()
        {
          var tmp1250 = new activate_args();
          if((Name != null) && __isset.name)
          {
            tmp1250.Name = this.Name;
          }
          tmp1250.__isset.name = this.__isset.name;
          return tmp1250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1251 = new TStruct("activate_args");
            await oprot.WriteStructBeginAsync(tmp1251, cancellationToken);
            var tmp1252 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1252.Name = "name";
              tmp1252.Type = TType.String;
              tmp1252.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1252, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activate_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1253 = new StringBuilder("activate_args(");
          int tmp1254 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1254++) { tmp1253.Append(", "); }
            tmp1253.Append("Name: ");
            Name.ToString(tmp1253);
          }
          tmp1253.Append(')');
          return tmp1253.ToString();
        }
      }


      public partial class activate_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool aze;
        }

        public activate_result()
        {
        }

        public activate_result DeepCopy()
        {
          var tmp1255 = new activate_result();
          if((E != null) && __isset.e)
          {
            tmp1255.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1255.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1255.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1255.__isset.aze = this.__isset.aze;
          return tmp1255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1256 = new TStruct("activate_result");
            await oprot.WriteStructBeginAsync(tmp1256, cancellationToken);
            var tmp1257 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1257.Name = "E";
                tmp1257.Type = TType.Struct;
                tmp1257.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1257, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1257.Name = "Aze";
                tmp1257.Type = TType.Struct;
                tmp1257.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1257, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is activate_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1258 = new StringBuilder("activate_result(");
          int tmp1259 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1259++) { tmp1258.Append(", "); }
            tmp1258.Append("E: ");
            E.ToString(tmp1258);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1259++) { tmp1258.Append(", "); }
            tmp1258.Append("Aze: ");
            Aze.ToString(tmp1258);
          }
          tmp1258.Append(')');
          return tmp1258.ToString();
        }
      }


      public partial class deactivate_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public deactivate_args()
        {
        }

        public deactivate_args DeepCopy()
        {
          var tmp1260 = new deactivate_args();
          if((Name != null) && __isset.name)
          {
            tmp1260.Name = this.Name;
          }
          tmp1260.__isset.name = this.__isset.name;
          return tmp1260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1261 = new TStruct("deactivate_args");
            await oprot.WriteStructBeginAsync(tmp1261, cancellationToken);
            var tmp1262 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1262.Name = "name";
              tmp1262.Type = TType.String;
              tmp1262.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1262, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deactivate_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1263 = new StringBuilder("deactivate_args(");
          int tmp1264 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1264++) { tmp1263.Append(", "); }
            tmp1263.Append("Name: ");
            Name.ToString(tmp1263);
          }
          tmp1263.Append(')');
          return tmp1263.ToString();
        }
      }


      public partial class deactivate_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool aze;
        }

        public deactivate_result()
        {
        }

        public deactivate_result DeepCopy()
        {
          var tmp1265 = new deactivate_result();
          if((E != null) && __isset.e)
          {
            tmp1265.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1265.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1265.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1265.__isset.aze = this.__isset.aze;
          return tmp1265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1266 = new TStruct("deactivate_result");
            await oprot.WriteStructBeginAsync(tmp1266, cancellationToken);
            var tmp1267 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1267.Name = "E";
                tmp1267.Type = TType.Struct;
                tmp1267.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1267.Name = "Aze";
                tmp1267.Type = TType.Struct;
                tmp1267.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1267, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deactivate_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1268 = new StringBuilder("deactivate_result(");
          int tmp1269 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("E: ");
            E.ToString(tmp1268);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1269++) { tmp1268.Append(", "); }
            tmp1268.Append("Aze: ");
            Aze.ToString(tmp1268);
          }
          tmp1268.Append(')');
          return tmp1268.ToString();
        }
      }


      public partial class rebalance_args : TBase
      {
        private string _name;
        private global::StormThrift.RebalanceOptions _options;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::StormThrift.RebalanceOptions Options
        {
          get
          {
            return _options;
          }
          set
          {
            __isset.options = true;
            this._options = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool options;
        }

        public rebalance_args()
        {
        }

        public rebalance_args DeepCopy()
        {
          var tmp1270 = new rebalance_args();
          if((Name != null) && __isset.name)
          {
            tmp1270.Name = this.Name;
          }
          tmp1270.__isset.name = this.__isset.name;
          if((Options != null) && __isset.options)
          {
            tmp1270.Options = (global::StormThrift.RebalanceOptions)this.Options.DeepCopy();
          }
          tmp1270.__isset.options = this.__isset.options;
          return tmp1270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Options = new global::StormThrift.RebalanceOptions();
                    await Options.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1271 = new TStruct("rebalance_args");
            await oprot.WriteStructBeginAsync(tmp1271, cancellationToken);
            var tmp1272 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1272.Name = "name";
              tmp1272.Type = TType.String;
              tmp1272.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Options != null) && __isset.options)
            {
              tmp1272.Name = "options";
              tmp1272.Type = TType.Struct;
              tmp1272.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1272, cancellationToken);
              await Options.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebalance_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.options == other.__isset.options) && ((!__isset.options) || (global::System.Object.Equals(Options, other.Options))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Options != null) && __isset.options)
            {
              hashcode = (hashcode * 397) + Options.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1273 = new StringBuilder("rebalance_args(");
          int tmp1274 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("Name: ");
            Name.ToString(tmp1273);
          }
          if((Options != null) && __isset.options)
          {
            if(0 < tmp1274++) { tmp1273.Append(", "); }
            tmp1273.Append("Options: ");
            Options.ToString(tmp1273);
          }
          tmp1273.Append(')');
          return tmp1273.ToString();
        }
      }


      public partial class rebalance_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.InvalidTopologyException _ite;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.InvalidTopologyException Ite
        {
          get
          {
            return _ite;
          }
          set
          {
            __isset.ite = true;
            this._ite = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool ite;
          public bool aze;
        }

        public rebalance_result()
        {
        }

        public rebalance_result DeepCopy()
        {
          var tmp1275 = new rebalance_result();
          if((E != null) && __isset.e)
          {
            tmp1275.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1275.__isset.e = this.__isset.e;
          if((Ite != null) && __isset.ite)
          {
            tmp1275.Ite = (global::StormThrift.InvalidTopologyException)this.Ite.DeepCopy();
          }
          tmp1275.__isset.ite = this.__isset.ite;
          if((Aze != null) && __isset.aze)
          {
            tmp1275.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1275.__isset.aze = this.__isset.aze;
          return tmp1275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Ite = new global::StormThrift.InvalidTopologyException();
                    await Ite.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1276 = new TStruct("rebalance_result");
            await oprot.WriteStructBeginAsync(tmp1276, cancellationToken);
            var tmp1277 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1277.Name = "E";
                tmp1277.Type = TType.Struct;
                tmp1277.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ite)
            {
              if (Ite != null)
              {
                tmp1277.Name = "Ite";
                tmp1277.Type = TType.Struct;
                tmp1277.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
                await Ite.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1277.Name = "Aze";
                tmp1277.Type = TType.Struct;
                tmp1277.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1277, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is rebalance_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.ite == other.__isset.ite) && ((!__isset.ite) || (global::System.Object.Equals(Ite, other.Ite))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Ite != null) && __isset.ite)
            {
              hashcode = (hashcode * 397) + Ite.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1278 = new StringBuilder("rebalance_result(");
          int tmp1279 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1279++) { tmp1278.Append(", "); }
            tmp1278.Append("E: ");
            E.ToString(tmp1278);
          }
          if((Ite != null) && __isset.ite)
          {
            if(0 < tmp1279++) { tmp1278.Append(", "); }
            tmp1278.Append("Ite: ");
            Ite.ToString(tmp1278);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1279++) { tmp1278.Append(", "); }
            tmp1278.Append("Aze: ");
            Aze.ToString(tmp1278);
          }
          tmp1278.Append(')');
          return tmp1278.ToString();
        }
      }


      public partial class setLogConfig_args : TBase
      {
        private string _name;
        private global::StormThrift.LogConfig _config;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::StormThrift.LogConfig Config
        {
          get
          {
            return _config;
          }
          set
          {
            __isset.config = true;
            this._config = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool config;
        }

        public setLogConfig_args()
        {
        }

        public setLogConfig_args DeepCopy()
        {
          var tmp1280 = new setLogConfig_args();
          if((Name != null) && __isset.name)
          {
            tmp1280.Name = this.Name;
          }
          tmp1280.__isset.name = this.__isset.name;
          if((Config != null) && __isset.config)
          {
            tmp1280.Config = (global::StormThrift.LogConfig)this.Config.DeepCopy();
          }
          tmp1280.__isset.config = this.__isset.config;
          return tmp1280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Config = new global::StormThrift.LogConfig();
                    await Config.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1281 = new TStruct("setLogConfig_args");
            await oprot.WriteStructBeginAsync(tmp1281, cancellationToken);
            var tmp1282 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1282.Name = "name";
              tmp1282.Type = TType.String;
              tmp1282.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1282, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Config != null) && __isset.config)
            {
              tmp1282.Name = "config";
              tmp1282.Type = TType.Struct;
              tmp1282.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1282, cancellationToken);
              await Config.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setLogConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.config == other.__isset.config) && ((!__isset.config) || (global::System.Object.Equals(Config, other.Config))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Config != null) && __isset.config)
            {
              hashcode = (hashcode * 397) + Config.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1283 = new StringBuilder("setLogConfig_args(");
          int tmp1284 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1284++) { tmp1283.Append(", "); }
            tmp1283.Append("Name: ");
            Name.ToString(tmp1283);
          }
          if((Config != null) && __isset.config)
          {
            if(0 < tmp1284++) { tmp1283.Append(", "); }
            tmp1283.Append("Config: ");
            Config.ToString(tmp1283);
          }
          tmp1283.Append(')');
          return tmp1283.ToString();
        }
      }


      public partial class setLogConfig_result : TBase
      {

        public setLogConfig_result()
        {
        }

        public setLogConfig_result DeepCopy()
        {
          var tmp1285 = new setLogConfig_result();
          return tmp1285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1286 = new TStruct("setLogConfig_result");
            await oprot.WriteStructBeginAsync(tmp1286, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setLogConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1287 = new StringBuilder("setLogConfig_result(");
          tmp1287.Append(')');
          return tmp1287.ToString();
        }
      }


      public partial class getLogConfig_args : TBase
      {
        private string _name;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
        }

        public getLogConfig_args()
        {
        }

        public getLogConfig_args DeepCopy()
        {
          var tmp1289 = new getLogConfig_args();
          if((Name != null) && __isset.name)
          {
            tmp1289.Name = this.Name;
          }
          tmp1289.__isset.name = this.__isset.name;
          return tmp1289;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1290 = new TStruct("getLogConfig_args");
            await oprot.WriteStructBeginAsync(tmp1290, cancellationToken);
            var tmp1291 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1291.Name = "name";
              tmp1291.Type = TType.String;
              tmp1291.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1291, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLogConfig_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1292 = new StringBuilder("getLogConfig_args(");
          int tmp1293 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1293++) { tmp1292.Append(", "); }
            tmp1292.Append("Name: ");
            Name.ToString(tmp1292);
          }
          tmp1292.Append(')');
          return tmp1292.ToString();
        }
      }


      public partial class getLogConfig_result : TBase
      {
        private global::StormThrift.LogConfig _success;

        public global::StormThrift.LogConfig Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getLogConfig_result()
        {
        }

        public getLogConfig_result DeepCopy()
        {
          var tmp1294 = new getLogConfig_result();
          if((Success != null) && __isset.success)
          {
            tmp1294.Success = (global::StormThrift.LogConfig)this.Success.DeepCopy();
          }
          tmp1294.__isset.success = this.__isset.success;
          return tmp1294;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.LogConfig();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1295 = new TStruct("getLogConfig_result");
            await oprot.WriteStructBeginAsync(tmp1295, cancellationToken);
            var tmp1296 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1296.Name = "Success";
                tmp1296.Type = TType.Struct;
                tmp1296.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1296, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getLogConfig_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1297 = new StringBuilder("getLogConfig_result(");
          int tmp1298 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1298++) { tmp1297.Append(", "); }
            tmp1297.Append("Success: ");
            Success.ToString(tmp1297);
          }
          tmp1297.Append(')');
          return tmp1297.ToString();
        }
      }


      public partial class debug_args : TBase
      {
        private string _name;
        private string _component;
        private bool _enable;
        private double _samplingPercentage;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public string Component
        {
          get
          {
            return _component;
          }
          set
          {
            __isset.component = true;
            this._component = value;
          }
        }

        public bool Enable
        {
          get
          {
            return _enable;
          }
          set
          {
            __isset.enable = true;
            this._enable = value;
          }
        }

        public double SamplingPercentage
        {
          get
          {
            return _samplingPercentage;
          }
          set
          {
            __isset.samplingPercentage = true;
            this._samplingPercentage = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool component;
          public bool enable;
          public bool samplingPercentage;
        }

        public debug_args()
        {
        }

        public debug_args DeepCopy()
        {
          var tmp1299 = new debug_args();
          if((Name != null) && __isset.name)
          {
            tmp1299.Name = this.Name;
          }
          tmp1299.__isset.name = this.__isset.name;
          if((Component != null) && __isset.component)
          {
            tmp1299.Component = this.Component;
          }
          tmp1299.__isset.component = this.__isset.component;
          if(__isset.enable)
          {
            tmp1299.Enable = this.Enable;
          }
          tmp1299.__isset.enable = this.__isset.enable;
          if(__isset.samplingPercentage)
          {
            tmp1299.SamplingPercentage = this.SamplingPercentage;
          }
          tmp1299.__isset.samplingPercentage = this.__isset.samplingPercentage;
          return tmp1299;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Component = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Enable = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Double)
                  {
                    SamplingPercentage = await iprot.ReadDoubleAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1300 = new TStruct("debug_args");
            await oprot.WriteStructBeginAsync(tmp1300, cancellationToken);
            var tmp1301 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1301.Name = "name";
              tmp1301.Type = TType.String;
              tmp1301.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1301, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Component != null) && __isset.component)
            {
              tmp1301.Name = "component";
              tmp1301.Type = TType.String;
              tmp1301.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1301, cancellationToken);
              await oprot.WriteStringAsync(Component, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.enable)
            {
              tmp1301.Name = "enable";
              tmp1301.Type = TType.Bool;
              tmp1301.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1301, cancellationToken);
              await oprot.WriteBoolAsync(Enable, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.samplingPercentage)
            {
              tmp1301.Name = "samplingPercentage";
              tmp1301.Type = TType.Double;
              tmp1301.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1301, cancellationToken);
              await oprot.WriteDoubleAsync(SamplingPercentage, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is debug_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.component == other.__isset.component) && ((!__isset.component) || (global::System.Object.Equals(Component, other.Component))))
            && ((__isset.enable == other.__isset.enable) && ((!__isset.enable) || (global::System.Object.Equals(Enable, other.Enable))))
            && ((__isset.samplingPercentage == other.__isset.samplingPercentage) && ((!__isset.samplingPercentage) || (global::System.Object.Equals(SamplingPercentage, other.SamplingPercentage))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Component != null) && __isset.component)
            {
              hashcode = (hashcode * 397) + Component.GetHashCode();
            }
            if(__isset.enable)
            {
              hashcode = (hashcode * 397) + Enable.GetHashCode();
            }
            if(__isset.samplingPercentage)
            {
              hashcode = (hashcode * 397) + SamplingPercentage.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1302 = new StringBuilder("debug_args(");
          int tmp1303 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1303++) { tmp1302.Append(", "); }
            tmp1302.Append("Name: ");
            Name.ToString(tmp1302);
          }
          if((Component != null) && __isset.component)
          {
            if(0 < tmp1303++) { tmp1302.Append(", "); }
            tmp1302.Append("Component: ");
            Component.ToString(tmp1302);
          }
          if(__isset.enable)
          {
            if(0 < tmp1303++) { tmp1302.Append(", "); }
            tmp1302.Append("Enable: ");
            Enable.ToString(tmp1302);
          }
          if(__isset.samplingPercentage)
          {
            if(0 < tmp1303++) { tmp1302.Append(", "); }
            tmp1302.Append("SamplingPercentage: ");
            SamplingPercentage.ToString(tmp1302);
          }
          tmp1302.Append(')');
          return tmp1302.ToString();
        }
      }


      public partial class debug_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool aze;
        }

        public debug_result()
        {
        }

        public debug_result DeepCopy()
        {
          var tmp1304 = new debug_result();
          if((E != null) && __isset.e)
          {
            tmp1304.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1304.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1304.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1304.__isset.aze = this.__isset.aze;
          return tmp1304;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1305 = new TStruct("debug_result");
            await oprot.WriteStructBeginAsync(tmp1305, cancellationToken);
            var tmp1306 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1306.Name = "E";
                tmp1306.Type = TType.Struct;
                tmp1306.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1306, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1306.Name = "Aze";
                tmp1306.Type = TType.Struct;
                tmp1306.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1306, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is debug_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1307 = new StringBuilder("debug_result(");
          int tmp1308 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1308++) { tmp1307.Append(", "); }
            tmp1307.Append("E: ");
            E.ToString(tmp1307);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1308++) { tmp1307.Append(", "); }
            tmp1307.Append("Aze: ");
            Aze.ToString(tmp1307);
          }
          tmp1307.Append(')');
          return tmp1307.ToString();
        }
      }


      public partial class setWorkerProfiler_args : TBase
      {
        private string _id;
        private global::StormThrift.ProfileRequest _profileRequest;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public global::StormThrift.ProfileRequest ProfileRequest
        {
          get
          {
            return _profileRequest;
          }
          set
          {
            __isset.profileRequest = true;
            this._profileRequest = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool profileRequest;
        }

        public setWorkerProfiler_args()
        {
        }

        public setWorkerProfiler_args DeepCopy()
        {
          var tmp1309 = new setWorkerProfiler_args();
          if((Id != null) && __isset.id)
          {
            tmp1309.Id = this.Id;
          }
          tmp1309.__isset.id = this.__isset.id;
          if((ProfileRequest != null) && __isset.profileRequest)
          {
            tmp1309.ProfileRequest = (global::StormThrift.ProfileRequest)this.ProfileRequest.DeepCopy();
          }
          tmp1309.__isset.profileRequest = this.__isset.profileRequest;
          return tmp1309;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    ProfileRequest = new global::StormThrift.ProfileRequest();
                    await ProfileRequest.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1310 = new TStruct("setWorkerProfiler_args");
            await oprot.WriteStructBeginAsync(tmp1310, cancellationToken);
            var tmp1311 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1311.Name = "id";
              tmp1311.Type = TType.String;
              tmp1311.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1311, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ProfileRequest != null) && __isset.profileRequest)
            {
              tmp1311.Name = "profileRequest";
              tmp1311.Type = TType.Struct;
              tmp1311.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1311, cancellationToken);
              await ProfileRequest.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkerProfiler_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.profileRequest == other.__isset.profileRequest) && ((!__isset.profileRequest) || (global::System.Object.Equals(ProfileRequest, other.ProfileRequest))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((ProfileRequest != null) && __isset.profileRequest)
            {
              hashcode = (hashcode * 397) + ProfileRequest.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1312 = new StringBuilder("setWorkerProfiler_args(");
          int tmp1313 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1313++) { tmp1312.Append(", "); }
            tmp1312.Append("Id: ");
            Id.ToString(tmp1312);
          }
          if((ProfileRequest != null) && __isset.profileRequest)
          {
            if(0 < tmp1313++) { tmp1312.Append(", "); }
            tmp1312.Append("ProfileRequest: ");
            ProfileRequest.ToString(tmp1312);
          }
          tmp1312.Append(')');
          return tmp1312.ToString();
        }
      }


      public partial class setWorkerProfiler_result : TBase
      {

        public setWorkerProfiler_result()
        {
        }

        public setWorkerProfiler_result DeepCopy()
        {
          var tmp1314 = new setWorkerProfiler_result();
          return tmp1314;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1315 = new TStruct("setWorkerProfiler_result");
            await oprot.WriteStructBeginAsync(tmp1315, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setWorkerProfiler_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1316 = new StringBuilder("setWorkerProfiler_result(");
          tmp1316.Append(')');
          return tmp1316.ToString();
        }
      }


      public partial class getComponentPendingProfileActions_args : TBase
      {
        private string _id;
        private string _component_id;
        private global::StormThrift.ProfileAction _action;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Component_id
        {
          get
          {
            return _component_id;
          }
          set
          {
            __isset.component_id = true;
            this._component_id = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::StormThrift.ProfileAction"/>
        /// </summary>
        public global::StormThrift.ProfileAction Action
        {
          get
          {
            return _action;
          }
          set
          {
            __isset.action = true;
            this._action = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool component_id;
          public bool action;
        }

        public getComponentPendingProfileActions_args()
        {
        }

        public getComponentPendingProfileActions_args DeepCopy()
        {
          var tmp1318 = new getComponentPendingProfileActions_args();
          if((Id != null) && __isset.id)
          {
            tmp1318.Id = this.Id;
          }
          tmp1318.__isset.id = this.__isset.id;
          if((Component_id != null) && __isset.component_id)
          {
            tmp1318.Component_id = this.Component_id;
          }
          tmp1318.__isset.component_id = this.__isset.component_id;
          if(__isset.action)
          {
            tmp1318.Action = this.Action;
          }
          tmp1318.__isset.action = this.__isset.action;
          return tmp1318;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Component_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Action = (global::StormThrift.ProfileAction)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1319 = new TStruct("getComponentPendingProfileActions_args");
            await oprot.WriteStructBeginAsync(tmp1319, cancellationToken);
            var tmp1320 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1320.Name = "id";
              tmp1320.Type = TType.String;
              tmp1320.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Component_id != null) && __isset.component_id)
            {
              tmp1320.Name = "component_id";
              tmp1320.Type = TType.String;
              tmp1320.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteStringAsync(Component_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.action)
            {
              tmp1320.Name = "action";
              tmp1320.Type = TType.I32;
              tmp1320.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1320, cancellationToken);
              await oprot.WriteI32Async((int)Action, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getComponentPendingProfileActions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.component_id == other.__isset.component_id) && ((!__isset.component_id) || (global::System.Object.Equals(Component_id, other.Component_id))))
            && ((__isset.action == other.__isset.action) && ((!__isset.action) || (global::System.Object.Equals(Action, other.Action))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Component_id != null) && __isset.component_id)
            {
              hashcode = (hashcode * 397) + Component_id.GetHashCode();
            }
            if(__isset.action)
            {
              hashcode = (hashcode * 397) + Action.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1321 = new StringBuilder("getComponentPendingProfileActions_args(");
          int tmp1322 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("Id: ");
            Id.ToString(tmp1321);
          }
          if((Component_id != null) && __isset.component_id)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("Component_id: ");
            Component_id.ToString(tmp1321);
          }
          if(__isset.action)
          {
            if(0 < tmp1322++) { tmp1321.Append(", "); }
            tmp1321.Append("Action: ");
            Action.ToString(tmp1321);
          }
          tmp1321.Append(')');
          return tmp1321.ToString();
        }
      }


      public partial class getComponentPendingProfileActions_result : TBase
      {
        private List<global::StormThrift.ProfileRequest> _success;

        public List<global::StormThrift.ProfileRequest> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getComponentPendingProfileActions_result()
        {
        }

        public getComponentPendingProfileActions_result DeepCopy()
        {
          var tmp1323 = new getComponentPendingProfileActions_result();
          if((Success != null) && __isset.success)
          {
            tmp1323.Success = this.Success.DeepCopy();
          }
          tmp1323.__isset.success = this.__isset.success;
          return tmp1323;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1324 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::StormThrift.ProfileRequest>(_list1324.Count);
                      for(int _i1325 = 0; _i1325 < _list1324.Count; ++_i1325)
                      {
                        global::StormThrift.ProfileRequest _elem1326;
                        _elem1326 = new global::StormThrift.ProfileRequest();
                        await _elem1326.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem1326);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1327 = new TStruct("getComponentPendingProfileActions_result");
            await oprot.WriteStructBeginAsync(tmp1327, cancellationToken);
            var tmp1328 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1328.Name = "Success";
                tmp1328.Type = TType.List;
                tmp1328.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1328, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::StormThrift.ProfileRequest _iter1329 in Success)
                  {
                    await _iter1329.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getComponentPendingProfileActions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1330 = new StringBuilder("getComponentPendingProfileActions_result(");
          int tmp1331 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1331++) { tmp1330.Append(", "); }
            tmp1330.Append("Success: ");
            Success.ToString(tmp1330);
          }
          tmp1330.Append(')');
          return tmp1330.ToString();
        }
      }


      public partial class uploadNewCredentials_args : TBase
      {
        private string _name;
        private global::StormThrift.Credentials _creds;

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        public global::StormThrift.Credentials Creds
        {
          get
          {
            return _creds;
          }
          set
          {
            __isset.creds = true;
            this._creds = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool name;
          public bool creds;
        }

        public uploadNewCredentials_args()
        {
        }

        public uploadNewCredentials_args DeepCopy()
        {
          var tmp1332 = new uploadNewCredentials_args();
          if((Name != null) && __isset.name)
          {
            tmp1332.Name = this.Name;
          }
          tmp1332.__isset.name = this.__isset.name;
          if((Creds != null) && __isset.creds)
          {
            tmp1332.Creds = (global::StormThrift.Credentials)this.Creds.DeepCopy();
          }
          tmp1332.__isset.creds = this.__isset.creds;
          return tmp1332;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Creds = new global::StormThrift.Credentials();
                    await Creds.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1333 = new TStruct("uploadNewCredentials_args");
            await oprot.WriteStructBeginAsync(tmp1333, cancellationToken);
            var tmp1334 = new TField();
            if((Name != null) && __isset.name)
            {
              tmp1334.Name = "name";
              tmp1334.Type = TType.String;
              tmp1334.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1334, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Creds != null) && __isset.creds)
            {
              tmp1334.Name = "creds";
              tmp1334.Type = TType.Struct;
              tmp1334.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1334, cancellationToken);
              await Creds.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadNewCredentials_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.creds == other.__isset.creds) && ((!__isset.creds) || (global::System.Object.Equals(Creds, other.Creds))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Creds != null) && __isset.creds)
            {
              hashcode = (hashcode * 397) + Creds.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1335 = new StringBuilder("uploadNewCredentials_args(");
          int tmp1336 = 0;
          if((Name != null) && __isset.name)
          {
            if(0 < tmp1336++) { tmp1335.Append(", "); }
            tmp1335.Append("Name: ");
            Name.ToString(tmp1335);
          }
          if((Creds != null) && __isset.creds)
          {
            if(0 < tmp1336++) { tmp1335.Append(", "); }
            tmp1335.Append("Creds: ");
            Creds.ToString(tmp1335);
          }
          tmp1335.Append(')');
          return tmp1335.ToString();
        }
      }


      public partial class uploadNewCredentials_result : TBase
      {
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.InvalidTopologyException _ite;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.InvalidTopologyException Ite
        {
          get
          {
            return _ite;
          }
          set
          {
            __isset.ite = true;
            this._ite = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
          public bool ite;
          public bool aze;
        }

        public uploadNewCredentials_result()
        {
        }

        public uploadNewCredentials_result DeepCopy()
        {
          var tmp1337 = new uploadNewCredentials_result();
          if((E != null) && __isset.e)
          {
            tmp1337.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1337.__isset.e = this.__isset.e;
          if((Ite != null) && __isset.ite)
          {
            tmp1337.Ite = (global::StormThrift.InvalidTopologyException)this.Ite.DeepCopy();
          }
          tmp1337.__isset.ite = this.__isset.ite;
          if((Aze != null) && __isset.aze)
          {
            tmp1337.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1337.__isset.aze = this.__isset.aze;
          return tmp1337;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Ite = new global::StormThrift.InvalidTopologyException();
                    await Ite.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1338 = new TStruct("uploadNewCredentials_result");
            await oprot.WriteStructBeginAsync(tmp1338, cancellationToken);
            var tmp1339 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1339.Name = "E";
                tmp1339.Type = TType.Struct;
                tmp1339.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1339, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.ite)
            {
              if (Ite != null)
              {
                tmp1339.Name = "Ite";
                tmp1339.Type = TType.Struct;
                tmp1339.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1339, cancellationToken);
                await Ite.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1339.Name = "Aze";
                tmp1339.Type = TType.Struct;
                tmp1339.ID = 3;
                await oprot.WriteFieldBeginAsync(tmp1339, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadNewCredentials_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.ite == other.__isset.ite) && ((!__isset.ite) || (global::System.Object.Equals(Ite, other.Ite))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Ite != null) && __isset.ite)
            {
              hashcode = (hashcode * 397) + Ite.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1340 = new StringBuilder("uploadNewCredentials_result(");
          int tmp1341 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp1341++) { tmp1340.Append(", "); }
            tmp1340.Append("E: ");
            E.ToString(tmp1340);
          }
          if((Ite != null) && __isset.ite)
          {
            if(0 < tmp1341++) { tmp1340.Append(", "); }
            tmp1340.Append("Ite: ");
            Ite.ToString(tmp1340);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1341++) { tmp1340.Append(", "); }
            tmp1340.Append("Aze: ");
            Aze.ToString(tmp1340);
          }
          tmp1340.Append(')');
          return tmp1340.ToString();
        }
      }


      public partial class beginCreateBlob_args : TBase
      {
        private string _key;
        private global::StormThrift.SettableBlobMeta _meta;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::StormThrift.SettableBlobMeta Meta
        {
          get
          {
            return _meta;
          }
          set
          {
            __isset.meta = true;
            this._meta = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
          public bool meta;
        }

        public beginCreateBlob_args()
        {
        }

        public beginCreateBlob_args DeepCopy()
        {
          var tmp1342 = new beginCreateBlob_args();
          if((Key != null) && __isset.key)
          {
            tmp1342.Key = this.Key;
          }
          tmp1342.__isset.key = this.__isset.key;
          if((Meta != null) && __isset.meta)
          {
            tmp1342.Meta = (global::StormThrift.SettableBlobMeta)this.Meta.DeepCopy();
          }
          tmp1342.__isset.meta = this.__isset.meta;
          return tmp1342;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Meta = new global::StormThrift.SettableBlobMeta();
                    await Meta.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1343 = new TStruct("beginCreateBlob_args");
            await oprot.WriteStructBeginAsync(tmp1343, cancellationToken);
            var tmp1344 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1344.Name = "key";
              tmp1344.Type = TType.String;
              tmp1344.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1344, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Meta != null) && __isset.meta)
            {
              tmp1344.Name = "meta";
              tmp1344.Type = TType.Struct;
              tmp1344.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1344, cancellationToken);
              await Meta.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginCreateBlob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.meta == other.__isset.meta) && ((!__isset.meta) || (global::System.Object.Equals(Meta, other.Meta))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Meta != null) && __isset.meta)
            {
              hashcode = (hashcode * 397) + Meta.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1345 = new StringBuilder("beginCreateBlob_args(");
          int tmp1346 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1346++) { tmp1345.Append(", "); }
            tmp1345.Append("Key: ");
            Key.ToString(tmp1345);
          }
          if((Meta != null) && __isset.meta)
          {
            if(0 < tmp1346++) { tmp1345.Append(", "); }
            tmp1345.Append("Meta: ");
            Meta.ToString(tmp1345);
          }
          tmp1345.Append(')');
          return tmp1345.ToString();
        }
      }


      public partial class beginCreateBlob_result : TBase
      {
        private string _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyAlreadyExistsException _kae;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyAlreadyExistsException Kae
        {
          get
          {
            return _kae;
          }
          set
          {
            __isset.kae = true;
            this._kae = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool kae;
        }

        public beginCreateBlob_result()
        {
        }

        public beginCreateBlob_result DeepCopy()
        {
          var tmp1347 = new beginCreateBlob_result();
          if((Success != null) && __isset.success)
          {
            tmp1347.Success = this.Success;
          }
          tmp1347.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1347.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1347.__isset.aze = this.__isset.aze;
          if((Kae != null) && __isset.kae)
          {
            tmp1347.Kae = (global::StormThrift.KeyAlreadyExistsException)this.Kae.DeepCopy();
          }
          tmp1347.__isset.kae = this.__isset.kae;
          return tmp1347;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Kae = new global::StormThrift.KeyAlreadyExistsException();
                    await Kae.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1348 = new TStruct("beginCreateBlob_result");
            await oprot.WriteStructBeginAsync(tmp1348, cancellationToken);
            var tmp1349 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1349.Name = "Success";
                tmp1349.Type = TType.String;
                tmp1349.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1349, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1349.Name = "Aze";
                tmp1349.Type = TType.Struct;
                tmp1349.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1349, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.kae)
            {
              if (Kae != null)
              {
                tmp1349.Name = "Kae";
                tmp1349.Type = TType.Struct;
                tmp1349.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1349, cancellationToken);
                await Kae.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginCreateBlob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.kae == other.__isset.kae) && ((!__isset.kae) || (global::System.Object.Equals(Kae, other.Kae))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Kae != null) && __isset.kae)
            {
              hashcode = (hashcode * 397) + Kae.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1350 = new StringBuilder("beginCreateBlob_result(");
          int tmp1351 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1351++) { tmp1350.Append(", "); }
            tmp1350.Append("Success: ");
            Success.ToString(tmp1350);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1351++) { tmp1350.Append(", "); }
            tmp1350.Append("Aze: ");
            Aze.ToString(tmp1350);
          }
          if((Kae != null) && __isset.kae)
          {
            if(0 < tmp1351++) { tmp1350.Append(", "); }
            tmp1350.Append("Kae: ");
            Kae.ToString(tmp1350);
          }
          tmp1350.Append(')');
          return tmp1350.ToString();
        }
      }


      public partial class beginUpdateBlob_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public beginUpdateBlob_args()
        {
        }

        public beginUpdateBlob_args DeepCopy()
        {
          var tmp1352 = new beginUpdateBlob_args();
          if((Key != null) && __isset.key)
          {
            tmp1352.Key = this.Key;
          }
          tmp1352.__isset.key = this.__isset.key;
          return tmp1352;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1353 = new TStruct("beginUpdateBlob_args");
            await oprot.WriteStructBeginAsync(tmp1353, cancellationToken);
            var tmp1354 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1354.Name = "key";
              tmp1354.Type = TType.String;
              tmp1354.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1354, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginUpdateBlob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1355 = new StringBuilder("beginUpdateBlob_args(");
          int tmp1356 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1356++) { tmp1355.Append(", "); }
            tmp1355.Append("Key: ");
            Key.ToString(tmp1355);
          }
          tmp1355.Append(')');
          return tmp1355.ToString();
        }
      }


      public partial class beginUpdateBlob_result : TBase
      {
        private string _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool knf;
        }

        public beginUpdateBlob_result()
        {
        }

        public beginUpdateBlob_result DeepCopy()
        {
          var tmp1357 = new beginUpdateBlob_result();
          if((Success != null) && __isset.success)
          {
            tmp1357.Success = this.Success;
          }
          tmp1357.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1357.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1357.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1357.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1357.__isset.knf = this.__isset.knf;
          return tmp1357;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1358 = new TStruct("beginUpdateBlob_result");
            await oprot.WriteStructBeginAsync(tmp1358, cancellationToken);
            var tmp1359 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1359.Name = "Success";
                tmp1359.Type = TType.String;
                tmp1359.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1359, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1359.Name = "Aze";
                tmp1359.Type = TType.Struct;
                tmp1359.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1359, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1359.Name = "Knf";
                tmp1359.Type = TType.Struct;
                tmp1359.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1359, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginUpdateBlob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1360 = new StringBuilder("beginUpdateBlob_result(");
          int tmp1361 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1361++) { tmp1360.Append(", "); }
            tmp1360.Append("Success: ");
            Success.ToString(tmp1360);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1361++) { tmp1360.Append(", "); }
            tmp1360.Append("Aze: ");
            Aze.ToString(tmp1360);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1361++) { tmp1360.Append(", "); }
            tmp1360.Append("Knf: ");
            Knf.ToString(tmp1360);
          }
          tmp1360.Append(')');
          return tmp1360.ToString();
        }
      }


      public partial class uploadBlobChunk_args : TBase
      {
        private string _session;
        private byte[] _chunk;

        public string Session
        {
          get
          {
            return _session;
          }
          set
          {
            __isset.session = true;
            this._session = value;
          }
        }

        public byte[] Chunk
        {
          get
          {
            return _chunk;
          }
          set
          {
            __isset.chunk = true;
            this._chunk = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool session;
          public bool chunk;
        }

        public uploadBlobChunk_args()
        {
        }

        public uploadBlobChunk_args DeepCopy()
        {
          var tmp1362 = new uploadBlobChunk_args();
          if((Session != null) && __isset.session)
          {
            tmp1362.Session = this.Session;
          }
          tmp1362.__isset.session = this.__isset.session;
          if((Chunk != null) && __isset.chunk)
          {
            tmp1362.Chunk = this.Chunk.ToArray();
          }
          tmp1362.__isset.chunk = this.__isset.chunk;
          return tmp1362;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Session = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Chunk = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1363 = new TStruct("uploadBlobChunk_args");
            await oprot.WriteStructBeginAsync(tmp1363, cancellationToken);
            var tmp1364 = new TField();
            if((Session != null) && __isset.session)
            {
              tmp1364.Name = "session";
              tmp1364.Type = TType.String;
              tmp1364.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1364, cancellationToken);
              await oprot.WriteStringAsync(Session, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Chunk != null) && __isset.chunk)
            {
              tmp1364.Name = "chunk";
              tmp1364.Type = TType.String;
              tmp1364.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1364, cancellationToken);
              await oprot.WriteBinaryAsync(Chunk, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadBlobChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.session == other.__isset.session) && ((!__isset.session) || (global::System.Object.Equals(Session, other.Session))))
            && ((__isset.chunk == other.__isset.chunk) && ((!__isset.chunk) || (TCollections.Equals(Chunk, other.Chunk))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Session != null) && __isset.session)
            {
              hashcode = (hashcode * 397) + Session.GetHashCode();
            }
            if((Chunk != null) && __isset.chunk)
            {
              hashcode = (hashcode * 397) + Chunk.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1365 = new StringBuilder("uploadBlobChunk_args(");
          int tmp1366 = 0;
          if((Session != null) && __isset.session)
          {
            if(0 < tmp1366++) { tmp1365.Append(", "); }
            tmp1365.Append("Session: ");
            Session.ToString(tmp1365);
          }
          if((Chunk != null) && __isset.chunk)
          {
            if(0 < tmp1366++) { tmp1365.Append(", "); }
            tmp1365.Append("Chunk: ");
            Chunk.ToString(tmp1365);
          }
          tmp1365.Append(')');
          return tmp1365.ToString();
        }
      }


      public partial class uploadBlobChunk_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public uploadBlobChunk_result()
        {
        }

        public uploadBlobChunk_result DeepCopy()
        {
          var tmp1367 = new uploadBlobChunk_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1367.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1367.__isset.aze = this.__isset.aze;
          return tmp1367;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1368 = new TStruct("uploadBlobChunk_result");
            await oprot.WriteStructBeginAsync(tmp1368, cancellationToken);
            var tmp1369 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1369.Name = "Aze";
                tmp1369.Type = TType.Struct;
                tmp1369.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1369, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadBlobChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1370 = new StringBuilder("uploadBlobChunk_result(");
          int tmp1371 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1371++) { tmp1370.Append(", "); }
            tmp1370.Append("Aze: ");
            Aze.ToString(tmp1370);
          }
          tmp1370.Append(')');
          return tmp1370.ToString();
        }
      }


      public partial class finishBlobUpload_args : TBase
      {
        private string _session;

        public string Session
        {
          get
          {
            return _session;
          }
          set
          {
            __isset.session = true;
            this._session = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool session;
        }

        public finishBlobUpload_args()
        {
        }

        public finishBlobUpload_args DeepCopy()
        {
          var tmp1372 = new finishBlobUpload_args();
          if((Session != null) && __isset.session)
          {
            tmp1372.Session = this.Session;
          }
          tmp1372.__isset.session = this.__isset.session;
          return tmp1372;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Session = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1373 = new TStruct("finishBlobUpload_args");
            await oprot.WriteStructBeginAsync(tmp1373, cancellationToken);
            var tmp1374 = new TField();
            if((Session != null) && __isset.session)
            {
              tmp1374.Name = "session";
              tmp1374.Type = TType.String;
              tmp1374.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1374, cancellationToken);
              await oprot.WriteStringAsync(Session, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is finishBlobUpload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.session == other.__isset.session) && ((!__isset.session) || (global::System.Object.Equals(Session, other.Session))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Session != null) && __isset.session)
            {
              hashcode = (hashcode * 397) + Session.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1375 = new StringBuilder("finishBlobUpload_args(");
          int tmp1376 = 0;
          if((Session != null) && __isset.session)
          {
            if(0 < tmp1376++) { tmp1375.Append(", "); }
            tmp1375.Append("Session: ");
            Session.ToString(tmp1375);
          }
          tmp1375.Append(')');
          return tmp1375.ToString();
        }
      }


      public partial class finishBlobUpload_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public finishBlobUpload_result()
        {
        }

        public finishBlobUpload_result DeepCopy()
        {
          var tmp1377 = new finishBlobUpload_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1377.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1377.__isset.aze = this.__isset.aze;
          return tmp1377;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1378 = new TStruct("finishBlobUpload_result");
            await oprot.WriteStructBeginAsync(tmp1378, cancellationToken);
            var tmp1379 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1379.Name = "Aze";
                tmp1379.Type = TType.Struct;
                tmp1379.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1379, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is finishBlobUpload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1380 = new StringBuilder("finishBlobUpload_result(");
          int tmp1381 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1381++) { tmp1380.Append(", "); }
            tmp1380.Append("Aze: ");
            Aze.ToString(tmp1380);
          }
          tmp1380.Append(')');
          return tmp1380.ToString();
        }
      }


      public partial class cancelBlobUpload_args : TBase
      {
        private string _session;

        public string Session
        {
          get
          {
            return _session;
          }
          set
          {
            __isset.session = true;
            this._session = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool session;
        }

        public cancelBlobUpload_args()
        {
        }

        public cancelBlobUpload_args DeepCopy()
        {
          var tmp1382 = new cancelBlobUpload_args();
          if((Session != null) && __isset.session)
          {
            tmp1382.Session = this.Session;
          }
          tmp1382.__isset.session = this.__isset.session;
          return tmp1382;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Session = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1383 = new TStruct("cancelBlobUpload_args");
            await oprot.WriteStructBeginAsync(tmp1383, cancellationToken);
            var tmp1384 = new TField();
            if((Session != null) && __isset.session)
            {
              tmp1384.Name = "session";
              tmp1384.Type = TType.String;
              tmp1384.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1384, cancellationToken);
              await oprot.WriteStringAsync(Session, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelBlobUpload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.session == other.__isset.session) && ((!__isset.session) || (global::System.Object.Equals(Session, other.Session))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Session != null) && __isset.session)
            {
              hashcode = (hashcode * 397) + Session.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1385 = new StringBuilder("cancelBlobUpload_args(");
          int tmp1386 = 0;
          if((Session != null) && __isset.session)
          {
            if(0 < tmp1386++) { tmp1385.Append(", "); }
            tmp1385.Append("Session: ");
            Session.ToString(tmp1385);
          }
          tmp1385.Append(')');
          return tmp1385.ToString();
        }
      }


      public partial class cancelBlobUpload_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public cancelBlobUpload_result()
        {
        }

        public cancelBlobUpload_result DeepCopy()
        {
          var tmp1387 = new cancelBlobUpload_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1387.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1387.__isset.aze = this.__isset.aze;
          return tmp1387;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1388 = new TStruct("cancelBlobUpload_result");
            await oprot.WriteStructBeginAsync(tmp1388, cancellationToken);
            var tmp1389 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1389.Name = "Aze";
                tmp1389.Type = TType.Struct;
                tmp1389.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1389, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is cancelBlobUpload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1390 = new StringBuilder("cancelBlobUpload_result(");
          int tmp1391 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1391++) { tmp1390.Append(", "); }
            tmp1390.Append("Aze: ");
            Aze.ToString(tmp1390);
          }
          tmp1390.Append(')');
          return tmp1390.ToString();
        }
      }


      public partial class getBlobMeta_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public getBlobMeta_args()
        {
        }

        public getBlobMeta_args DeepCopy()
        {
          var tmp1392 = new getBlobMeta_args();
          if((Key != null) && __isset.key)
          {
            tmp1392.Key = this.Key;
          }
          tmp1392.__isset.key = this.__isset.key;
          return tmp1392;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1393 = new TStruct("getBlobMeta_args");
            await oprot.WriteStructBeginAsync(tmp1393, cancellationToken);
            var tmp1394 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1394.Name = "key";
              tmp1394.Type = TType.String;
              tmp1394.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1394, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBlobMeta_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1395 = new StringBuilder("getBlobMeta_args(");
          int tmp1396 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1396++) { tmp1395.Append(", "); }
            tmp1395.Append("Key: ");
            Key.ToString(tmp1395);
          }
          tmp1395.Append(')');
          return tmp1395.ToString();
        }
      }


      public partial class getBlobMeta_result : TBase
      {
        private global::StormThrift.ReadableBlobMeta _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public global::StormThrift.ReadableBlobMeta Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool knf;
        }

        public getBlobMeta_result()
        {
        }

        public getBlobMeta_result DeepCopy()
        {
          var tmp1397 = new getBlobMeta_result();
          if((Success != null) && __isset.success)
          {
            tmp1397.Success = (global::StormThrift.ReadableBlobMeta)this.Success.DeepCopy();
          }
          tmp1397.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1397.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1397.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1397.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1397.__isset.knf = this.__isset.knf;
          return tmp1397;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.ReadableBlobMeta();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1398 = new TStruct("getBlobMeta_result");
            await oprot.WriteStructBeginAsync(tmp1398, cancellationToken);
            var tmp1399 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1399.Name = "Success";
                tmp1399.Type = TType.Struct;
                tmp1399.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1399, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1399.Name = "Aze";
                tmp1399.Type = TType.Struct;
                tmp1399.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1399, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1399.Name = "Knf";
                tmp1399.Type = TType.Struct;
                tmp1399.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1399, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBlobMeta_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1400 = new StringBuilder("getBlobMeta_result(");
          int tmp1401 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1401++) { tmp1400.Append(", "); }
            tmp1400.Append("Success: ");
            Success.ToString(tmp1400);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1401++) { tmp1400.Append(", "); }
            tmp1400.Append("Aze: ");
            Aze.ToString(tmp1400);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1401++) { tmp1400.Append(", "); }
            tmp1400.Append("Knf: ");
            Knf.ToString(tmp1400);
          }
          tmp1400.Append(')');
          return tmp1400.ToString();
        }
      }


      public partial class setBlobMeta_args : TBase
      {
        private string _key;
        private global::StormThrift.SettableBlobMeta _meta;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public global::StormThrift.SettableBlobMeta Meta
        {
          get
          {
            return _meta;
          }
          set
          {
            __isset.meta = true;
            this._meta = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
          public bool meta;
        }

        public setBlobMeta_args()
        {
        }

        public setBlobMeta_args DeepCopy()
        {
          var tmp1402 = new setBlobMeta_args();
          if((Key != null) && __isset.key)
          {
            tmp1402.Key = this.Key;
          }
          tmp1402.__isset.key = this.__isset.key;
          if((Meta != null) && __isset.meta)
          {
            tmp1402.Meta = (global::StormThrift.SettableBlobMeta)this.Meta.DeepCopy();
          }
          tmp1402.__isset.meta = this.__isset.meta;
          return tmp1402;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Meta = new global::StormThrift.SettableBlobMeta();
                    await Meta.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1403 = new TStruct("setBlobMeta_args");
            await oprot.WriteStructBeginAsync(tmp1403, cancellationToken);
            var tmp1404 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1404.Name = "key";
              tmp1404.Type = TType.String;
              tmp1404.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1404, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Meta != null) && __isset.meta)
            {
              tmp1404.Name = "meta";
              tmp1404.Type = TType.Struct;
              tmp1404.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1404, cancellationToken);
              await Meta.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setBlobMeta_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.meta == other.__isset.meta) && ((!__isset.meta) || (global::System.Object.Equals(Meta, other.Meta))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Meta != null) && __isset.meta)
            {
              hashcode = (hashcode * 397) + Meta.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1405 = new StringBuilder("setBlobMeta_args(");
          int tmp1406 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("Key: ");
            Key.ToString(tmp1405);
          }
          if((Meta != null) && __isset.meta)
          {
            if(0 < tmp1406++) { tmp1405.Append(", "); }
            tmp1405.Append("Meta: ");
            Meta.ToString(tmp1405);
          }
          tmp1405.Append(')');
          return tmp1405.ToString();
        }
      }


      public partial class setBlobMeta_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
          public bool knf;
        }

        public setBlobMeta_result()
        {
        }

        public setBlobMeta_result DeepCopy()
        {
          var tmp1407 = new setBlobMeta_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1407.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1407.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1407.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1407.__isset.knf = this.__isset.knf;
          return tmp1407;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1408 = new TStruct("setBlobMeta_result");
            await oprot.WriteStructBeginAsync(tmp1408, cancellationToken);
            var tmp1409 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1409.Name = "Aze";
                tmp1409.Type = TType.Struct;
                tmp1409.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1409, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1409.Name = "Knf";
                tmp1409.Type = TType.Struct;
                tmp1409.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1409, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is setBlobMeta_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1410 = new StringBuilder("setBlobMeta_result(");
          int tmp1411 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1411++) { tmp1410.Append(", "); }
            tmp1410.Append("Aze: ");
            Aze.ToString(tmp1410);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1411++) { tmp1410.Append(", "); }
            tmp1410.Append("Knf: ");
            Knf.ToString(tmp1410);
          }
          tmp1410.Append(')');
          return tmp1410.ToString();
        }
      }


      public partial class beginBlobDownload_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public beginBlobDownload_args()
        {
        }

        public beginBlobDownload_args DeepCopy()
        {
          var tmp1412 = new beginBlobDownload_args();
          if((Key != null) && __isset.key)
          {
            tmp1412.Key = this.Key;
          }
          tmp1412.__isset.key = this.__isset.key;
          return tmp1412;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1413 = new TStruct("beginBlobDownload_args");
            await oprot.WriteStructBeginAsync(tmp1413, cancellationToken);
            var tmp1414 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1414.Name = "key";
              tmp1414.Type = TType.String;
              tmp1414.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1414, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginBlobDownload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1415 = new StringBuilder("beginBlobDownload_args(");
          int tmp1416 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1416++) { tmp1415.Append(", "); }
            tmp1415.Append("Key: ");
            Key.ToString(tmp1415);
          }
          tmp1415.Append(')');
          return tmp1415.ToString();
        }
      }


      public partial class beginBlobDownload_result : TBase
      {
        private global::StormThrift.BeginDownloadResult _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public global::StormThrift.BeginDownloadResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool knf;
        }

        public beginBlobDownload_result()
        {
        }

        public beginBlobDownload_result DeepCopy()
        {
          var tmp1417 = new beginBlobDownload_result();
          if((Success != null) && __isset.success)
          {
            tmp1417.Success = (global::StormThrift.BeginDownloadResult)this.Success.DeepCopy();
          }
          tmp1417.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1417.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1417.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1417.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1417.__isset.knf = this.__isset.knf;
          return tmp1417;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.BeginDownloadResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1418 = new TStruct("beginBlobDownload_result");
            await oprot.WriteStructBeginAsync(tmp1418, cancellationToken);
            var tmp1419 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1419.Name = "Success";
                tmp1419.Type = TType.Struct;
                tmp1419.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1419, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1419.Name = "Aze";
                tmp1419.Type = TType.Struct;
                tmp1419.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1419, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1419.Name = "Knf";
                tmp1419.Type = TType.Struct;
                tmp1419.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1419, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginBlobDownload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1420 = new StringBuilder("beginBlobDownload_result(");
          int tmp1421 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1421++) { tmp1420.Append(", "); }
            tmp1420.Append("Success: ");
            Success.ToString(tmp1420);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1421++) { tmp1420.Append(", "); }
            tmp1420.Append("Aze: ");
            Aze.ToString(tmp1420);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1421++) { tmp1420.Append(", "); }
            tmp1420.Append("Knf: ");
            Knf.ToString(tmp1420);
          }
          tmp1420.Append(')');
          return tmp1420.ToString();
        }
      }


      public partial class downloadBlobChunk_args : TBase
      {
        private string _session;

        public string Session
        {
          get
          {
            return _session;
          }
          set
          {
            __isset.session = true;
            this._session = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool session;
        }

        public downloadBlobChunk_args()
        {
        }

        public downloadBlobChunk_args DeepCopy()
        {
          var tmp1422 = new downloadBlobChunk_args();
          if((Session != null) && __isset.session)
          {
            tmp1422.Session = this.Session;
          }
          tmp1422.__isset.session = this.__isset.session;
          return tmp1422;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Session = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1423 = new TStruct("downloadBlobChunk_args");
            await oprot.WriteStructBeginAsync(tmp1423, cancellationToken);
            var tmp1424 = new TField();
            if((Session != null) && __isset.session)
            {
              tmp1424.Name = "session";
              tmp1424.Type = TType.String;
              tmp1424.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1424, cancellationToken);
              await oprot.WriteStringAsync(Session, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is downloadBlobChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.session == other.__isset.session) && ((!__isset.session) || (global::System.Object.Equals(Session, other.Session))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Session != null) && __isset.session)
            {
              hashcode = (hashcode * 397) + Session.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1425 = new StringBuilder("downloadBlobChunk_args(");
          int tmp1426 = 0;
          if((Session != null) && __isset.session)
          {
            if(0 < tmp1426++) { tmp1425.Append(", "); }
            tmp1425.Append("Session: ");
            Session.ToString(tmp1425);
          }
          tmp1425.Append(')');
          return tmp1425.ToString();
        }
      }


      public partial class downloadBlobChunk_result : TBase
      {
        private byte[] _success;
        private global::StormThrift.AuthorizationException _aze;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public downloadBlobChunk_result()
        {
        }

        public downloadBlobChunk_result DeepCopy()
        {
          var tmp1427 = new downloadBlobChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp1427.Success = this.Success.ToArray();
          }
          tmp1427.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1427.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1427.__isset.aze = this.__isset.aze;
          return tmp1427;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1428 = new TStruct("downloadBlobChunk_result");
            await oprot.WriteStructBeginAsync(tmp1428, cancellationToken);
            var tmp1429 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1429.Name = "Success";
                tmp1429.Type = TType.String;
                tmp1429.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1429.Name = "Aze";
                tmp1429.Type = TType.Struct;
                tmp1429.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1429, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is downloadBlobChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1430 = new StringBuilder("downloadBlobChunk_result(");
          int tmp1431 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Success: ");
            Success.ToString(tmp1430);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1431++) { tmp1430.Append(", "); }
            tmp1430.Append("Aze: ");
            Aze.ToString(tmp1430);
          }
          tmp1430.Append(')');
          return tmp1430.ToString();
        }
      }


      public partial class deleteBlob_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public deleteBlob_args()
        {
        }

        public deleteBlob_args DeepCopy()
        {
          var tmp1432 = new deleteBlob_args();
          if((Key != null) && __isset.key)
          {
            tmp1432.Key = this.Key;
          }
          tmp1432.__isset.key = this.__isset.key;
          return tmp1432;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1433 = new TStruct("deleteBlob_args");
            await oprot.WriteStructBeginAsync(tmp1433, cancellationToken);
            var tmp1434 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1434.Name = "key";
              tmp1434.Type = TType.String;
              tmp1434.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1434, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteBlob_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1435 = new StringBuilder("deleteBlob_args(");
          int tmp1436 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1436++) { tmp1435.Append(", "); }
            tmp1435.Append("Key: ");
            Key.ToString(tmp1435);
          }
          tmp1435.Append(')');
          return tmp1435.ToString();
        }
      }


      public partial class deleteBlob_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
          public bool knf;
        }

        public deleteBlob_result()
        {
        }

        public deleteBlob_result DeepCopy()
        {
          var tmp1437 = new deleteBlob_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1437.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1437.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1437.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1437.__isset.knf = this.__isset.knf;
          return tmp1437;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1438 = new TStruct("deleteBlob_result");
            await oprot.WriteStructBeginAsync(tmp1438, cancellationToken);
            var tmp1439 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1439.Name = "Aze";
                tmp1439.Type = TType.Struct;
                tmp1439.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1439.Name = "Knf";
                tmp1439.Type = TType.Struct;
                tmp1439.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1439, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is deleteBlob_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1440 = new StringBuilder("deleteBlob_result(");
          int tmp1441 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("Aze: ");
            Aze.ToString(tmp1440);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1441++) { tmp1440.Append(", "); }
            tmp1440.Append("Knf: ");
            Knf.ToString(tmp1440);
          }
          tmp1440.Append(')');
          return tmp1440.ToString();
        }
      }


      public partial class listBlobs_args : TBase
      {
        private string _session;

        public string Session
        {
          get
          {
            return _session;
          }
          set
          {
            __isset.session = true;
            this._session = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool session;
        }

        public listBlobs_args()
        {
        }

        public listBlobs_args DeepCopy()
        {
          var tmp1442 = new listBlobs_args();
          if((Session != null) && __isset.session)
          {
            tmp1442.Session = this.Session;
          }
          tmp1442.__isset.session = this.__isset.session;
          return tmp1442;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Session = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1443 = new TStruct("listBlobs_args");
            await oprot.WriteStructBeginAsync(tmp1443, cancellationToken);
            var tmp1444 = new TField();
            if((Session != null) && __isset.session)
            {
              tmp1444.Name = "session";
              tmp1444.Type = TType.String;
              tmp1444.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1444, cancellationToken);
              await oprot.WriteStringAsync(Session, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBlobs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.session == other.__isset.session) && ((!__isset.session) || (global::System.Object.Equals(Session, other.Session))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Session != null) && __isset.session)
            {
              hashcode = (hashcode * 397) + Session.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1445 = new StringBuilder("listBlobs_args(");
          int tmp1446 = 0;
          if((Session != null) && __isset.session)
          {
            if(0 < tmp1446++) { tmp1445.Append(", "); }
            tmp1445.Append("Session: ");
            Session.ToString(tmp1445);
          }
          tmp1445.Append(')');
          return tmp1445.ToString();
        }
      }


      public partial class listBlobs_result : TBase
      {
        private global::StormThrift.ListBlobsResult _success;

        public global::StormThrift.ListBlobsResult Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public listBlobs_result()
        {
        }

        public listBlobs_result DeepCopy()
        {
          var tmp1447 = new listBlobs_result();
          if((Success != null) && __isset.success)
          {
            tmp1447.Success = (global::StormThrift.ListBlobsResult)this.Success.DeepCopy();
          }
          tmp1447.__isset.success = this.__isset.success;
          return tmp1447;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.ListBlobsResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1448 = new TStruct("listBlobs_result");
            await oprot.WriteStructBeginAsync(tmp1448, cancellationToken);
            var tmp1449 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1449.Name = "Success";
                tmp1449.Type = TType.Struct;
                tmp1449.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1449, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is listBlobs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1450 = new StringBuilder("listBlobs_result(");
          int tmp1451 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1451++) { tmp1450.Append(", "); }
            tmp1450.Append("Success: ");
            Success.ToString(tmp1450);
          }
          tmp1450.Append(')');
          return tmp1450.ToString();
        }
      }


      public partial class getBlobReplication_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public getBlobReplication_args()
        {
        }

        public getBlobReplication_args DeepCopy()
        {
          var tmp1452 = new getBlobReplication_args();
          if((Key != null) && __isset.key)
          {
            tmp1452.Key = this.Key;
          }
          tmp1452.__isset.key = this.__isset.key;
          return tmp1452;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1453 = new TStruct("getBlobReplication_args");
            await oprot.WriteStructBeginAsync(tmp1453, cancellationToken);
            var tmp1454 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1454.Name = "key";
              tmp1454.Type = TType.String;
              tmp1454.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1454, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBlobReplication_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1455 = new StringBuilder("getBlobReplication_args(");
          int tmp1456 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1456++) { tmp1455.Append(", "); }
            tmp1455.Append("Key: ");
            Key.ToString(tmp1455);
          }
          tmp1455.Append(')');
          return tmp1455.ToString();
        }
      }


      public partial class getBlobReplication_result : TBase
      {
        private int _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool knf;
        }

        public getBlobReplication_result()
        {
        }

        public getBlobReplication_result DeepCopy()
        {
          var tmp1457 = new getBlobReplication_result();
          if(__isset.success)
          {
            tmp1457.Success = this.Success;
          }
          tmp1457.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1457.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1457.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1457.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1457.__isset.knf = this.__isset.knf;
          return tmp1457;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1458 = new TStruct("getBlobReplication_result");
            await oprot.WriteStructBeginAsync(tmp1458, cancellationToken);
            var tmp1459 = new TField();

            if(this.__isset.success)
            {
              tmp1459.Name = "Success";
              tmp1459.Type = TType.I32;
              tmp1459.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1459, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1459.Name = "Aze";
                tmp1459.Type = TType.Struct;
                tmp1459.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1459, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1459.Name = "Knf";
                tmp1459.Type = TType.Struct;
                tmp1459.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1459, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBlobReplication_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1460 = new StringBuilder("getBlobReplication_result(");
          int tmp1461 = 0;
          if(__isset.success)
          {
            if(0 < tmp1461++) { tmp1460.Append(", "); }
            tmp1460.Append("Success: ");
            Success.ToString(tmp1460);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1461++) { tmp1460.Append(", "); }
            tmp1460.Append("Aze: ");
            Aze.ToString(tmp1460);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1461++) { tmp1460.Append(", "); }
            tmp1460.Append("Knf: ");
            Knf.ToString(tmp1460);
          }
          tmp1460.Append(')');
          return tmp1460.ToString();
        }
      }


      public partial class updateBlobReplication_args : TBase
      {
        private string _key;
        private int _replication;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }

        public int Replication
        {
          get
          {
            return _replication;
          }
          set
          {
            __isset.replication = true;
            this._replication = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
          public bool replication;
        }

        public updateBlobReplication_args()
        {
        }

        public updateBlobReplication_args DeepCopy()
        {
          var tmp1462 = new updateBlobReplication_args();
          if((Key != null) && __isset.key)
          {
            tmp1462.Key = this.Key;
          }
          tmp1462.__isset.key = this.__isset.key;
          if(__isset.replication)
          {
            tmp1462.Replication = this.Replication;
          }
          tmp1462.__isset.replication = this.__isset.replication;
          return tmp1462;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Replication = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1463 = new TStruct("updateBlobReplication_args");
            await oprot.WriteStructBeginAsync(tmp1463, cancellationToken);
            var tmp1464 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1464.Name = "key";
              tmp1464.Type = TType.String;
              tmp1464.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1464, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.replication)
            {
              tmp1464.Name = "replication";
              tmp1464.Type = TType.I32;
              tmp1464.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1464, cancellationToken);
              await oprot.WriteI32Async(Replication, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateBlobReplication_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))))
            && ((__isset.replication == other.__isset.replication) && ((!__isset.replication) || (global::System.Object.Equals(Replication, other.Replication))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if(__isset.replication)
            {
              hashcode = (hashcode * 397) + Replication.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1465 = new StringBuilder("updateBlobReplication_args(");
          int tmp1466 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1466++) { tmp1465.Append(", "); }
            tmp1465.Append("Key: ");
            Key.ToString(tmp1465);
          }
          if(__isset.replication)
          {
            if(0 < tmp1466++) { tmp1465.Append(", "); }
            tmp1465.Append("Replication: ");
            Replication.ToString(tmp1465);
          }
          tmp1465.Append(')');
          return tmp1465.ToString();
        }
      }


      public partial class updateBlobReplication_result : TBase
      {
        private int _success;
        private global::StormThrift.AuthorizationException _aze;
        private global::StormThrift.KeyNotFoundException _knf;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }

        public global::StormThrift.KeyNotFoundException Knf
        {
          get
          {
            return _knf;
          }
          set
          {
            __isset.knf = true;
            this._knf = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
          public bool knf;
        }

        public updateBlobReplication_result()
        {
        }

        public updateBlobReplication_result DeepCopy()
        {
          var tmp1467 = new updateBlobReplication_result();
          if(__isset.success)
          {
            tmp1467.Success = this.Success;
          }
          tmp1467.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1467.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1467.__isset.aze = this.__isset.aze;
          if((Knf != null) && __isset.knf)
          {
            tmp1467.Knf = (global::StormThrift.KeyNotFoundException)this.Knf.DeepCopy();
          }
          tmp1467.__isset.knf = this.__isset.knf;
          return tmp1467;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Knf = new global::StormThrift.KeyNotFoundException();
                    await Knf.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1468 = new TStruct("updateBlobReplication_result");
            await oprot.WriteStructBeginAsync(tmp1468, cancellationToken);
            var tmp1469 = new TField();

            if(this.__isset.success)
            {
              tmp1469.Name = "Success";
              tmp1469.Type = TType.I32;
              tmp1469.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1469, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1469.Name = "Aze";
                tmp1469.Type = TType.Struct;
                tmp1469.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1469, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.knf)
            {
              if (Knf != null)
              {
                tmp1469.Name = "Knf";
                tmp1469.Type = TType.Struct;
                tmp1469.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1469, cancellationToken);
                await Knf.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updateBlobReplication_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))))
            && ((__isset.knf == other.__isset.knf) && ((!__isset.knf) || (global::System.Object.Equals(Knf, other.Knf))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
            if((Knf != null) && __isset.knf)
            {
              hashcode = (hashcode * 397) + Knf.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1470 = new StringBuilder("updateBlobReplication_result(");
          int tmp1471 = 0;
          if(__isset.success)
          {
            if(0 < tmp1471++) { tmp1470.Append(", "); }
            tmp1470.Append("Success: ");
            Success.ToString(tmp1470);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1471++) { tmp1470.Append(", "); }
            tmp1470.Append("Aze: ");
            Aze.ToString(tmp1470);
          }
          if((Knf != null) && __isset.knf)
          {
            if(0 < tmp1471++) { tmp1470.Append(", "); }
            tmp1470.Append("Knf: ");
            Knf.ToString(tmp1470);
          }
          tmp1470.Append(')');
          return tmp1470.ToString();
        }
      }


      public partial class createStateInZookeeper_args : TBase
      {
        private string _key;

        public string Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public createStateInZookeeper_args()
        {
        }

        public createStateInZookeeper_args DeepCopy()
        {
          var tmp1472 = new createStateInZookeeper_args();
          if((Key != null) && __isset.key)
          {
            tmp1472.Key = this.Key;
          }
          tmp1472.__isset.key = this.__isset.key;
          return tmp1472;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1473 = new TStruct("createStateInZookeeper_args");
            await oprot.WriteStructBeginAsync(tmp1473, cancellationToken);
            var tmp1474 = new TField();
            if((Key != null) && __isset.key)
            {
              tmp1474.Name = "key";
              tmp1474.Type = TType.String;
              tmp1474.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1474, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createStateInZookeeper_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Key != null) && __isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1475 = new StringBuilder("createStateInZookeeper_args(");
          int tmp1476 = 0;
          if((Key != null) && __isset.key)
          {
            if(0 < tmp1476++) { tmp1475.Append(", "); }
            tmp1475.Append("Key: ");
            Key.ToString(tmp1475);
          }
          tmp1475.Append(')');
          return tmp1475.ToString();
        }
      }


      public partial class createStateInZookeeper_result : TBase
      {

        public createStateInZookeeper_result()
        {
        }

        public createStateInZookeeper_result DeepCopy()
        {
          var tmp1477 = new createStateInZookeeper_result();
          return tmp1477;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1478 = new TStruct("createStateInZookeeper_result");
            await oprot.WriteStructBeginAsync(tmp1478, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is createStateInZookeeper_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1479 = new StringBuilder("createStateInZookeeper_result(");
          tmp1479.Append(')');
          return tmp1479.ToString();
        }
      }


      public partial class beginFileUpload_args : TBase
      {

        public beginFileUpload_args()
        {
        }

        public beginFileUpload_args DeepCopy()
        {
          var tmp1481 = new beginFileUpload_args();
          return tmp1481;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1482 = new TStruct("beginFileUpload_args");
            await oprot.WriteStructBeginAsync(tmp1482, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginFileUpload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1483 = new StringBuilder("beginFileUpload_args(");
          tmp1483.Append(')');
          return tmp1483.ToString();
        }
      }


      public partial class beginFileUpload_result : TBase
      {
        private string _success;
        private global::StormThrift.AuthorizationException _aze;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public beginFileUpload_result()
        {
        }

        public beginFileUpload_result DeepCopy()
        {
          var tmp1485 = new beginFileUpload_result();
          if((Success != null) && __isset.success)
          {
            tmp1485.Success = this.Success;
          }
          tmp1485.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1485.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1485.__isset.aze = this.__isset.aze;
          return tmp1485;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1486 = new TStruct("beginFileUpload_result");
            await oprot.WriteStructBeginAsync(tmp1486, cancellationToken);
            var tmp1487 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1487.Name = "Success";
                tmp1487.Type = TType.String;
                tmp1487.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1487.Name = "Aze";
                tmp1487.Type = TType.Struct;
                tmp1487.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1487, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginFileUpload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1488 = new StringBuilder("beginFileUpload_result(");
          int tmp1489 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("Success: ");
            Success.ToString(tmp1488);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1489++) { tmp1488.Append(", "); }
            tmp1488.Append("Aze: ");
            Aze.ToString(tmp1488);
          }
          tmp1488.Append(')');
          return tmp1488.ToString();
        }
      }


      public partial class uploadChunk_args : TBase
      {
        private string _location;
        private byte[] _chunk;

        public string Location
        {
          get
          {
            return _location;
          }
          set
          {
            __isset.location = true;
            this._location = value;
          }
        }

        public byte[] Chunk
        {
          get
          {
            return _chunk;
          }
          set
          {
            __isset.chunk = true;
            this._chunk = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool location;
          public bool chunk;
        }

        public uploadChunk_args()
        {
        }

        public uploadChunk_args DeepCopy()
        {
          var tmp1490 = new uploadChunk_args();
          if((Location != null) && __isset.location)
          {
            tmp1490.Location = this.Location;
          }
          tmp1490.__isset.location = this.__isset.location;
          if((Chunk != null) && __isset.chunk)
          {
            tmp1490.Chunk = this.Chunk.ToArray();
          }
          tmp1490.__isset.chunk = this.__isset.chunk;
          return tmp1490;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Location = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Chunk = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1491 = new TStruct("uploadChunk_args");
            await oprot.WriteStructBeginAsync(tmp1491, cancellationToken);
            var tmp1492 = new TField();
            if((Location != null) && __isset.location)
            {
              tmp1492.Name = "location";
              tmp1492.Type = TType.String;
              tmp1492.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteStringAsync(Location, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Chunk != null) && __isset.chunk)
            {
              tmp1492.Name = "chunk";
              tmp1492.Type = TType.String;
              tmp1492.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1492, cancellationToken);
              await oprot.WriteBinaryAsync(Chunk, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.location == other.__isset.location) && ((!__isset.location) || (global::System.Object.Equals(Location, other.Location))))
            && ((__isset.chunk == other.__isset.chunk) && ((!__isset.chunk) || (TCollections.Equals(Chunk, other.Chunk))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Location != null) && __isset.location)
            {
              hashcode = (hashcode * 397) + Location.GetHashCode();
            }
            if((Chunk != null) && __isset.chunk)
            {
              hashcode = (hashcode * 397) + Chunk.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1493 = new StringBuilder("uploadChunk_args(");
          int tmp1494 = 0;
          if((Location != null) && __isset.location)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("Location: ");
            Location.ToString(tmp1493);
          }
          if((Chunk != null) && __isset.chunk)
          {
            if(0 < tmp1494++) { tmp1493.Append(", "); }
            tmp1493.Append("Chunk: ");
            Chunk.ToString(tmp1493);
          }
          tmp1493.Append(')');
          return tmp1493.ToString();
        }
      }


      public partial class uploadChunk_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public uploadChunk_result()
        {
        }

        public uploadChunk_result DeepCopy()
        {
          var tmp1495 = new uploadChunk_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1495.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1495.__isset.aze = this.__isset.aze;
          return tmp1495;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1496 = new TStruct("uploadChunk_result");
            await oprot.WriteStructBeginAsync(tmp1496, cancellationToken);
            var tmp1497 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1497.Name = "Aze";
                tmp1497.Type = TType.Struct;
                tmp1497.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1497, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is uploadChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1498 = new StringBuilder("uploadChunk_result(");
          int tmp1499 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1499++) { tmp1498.Append(", "); }
            tmp1498.Append("Aze: ");
            Aze.ToString(tmp1498);
          }
          tmp1498.Append(')');
          return tmp1498.ToString();
        }
      }


      public partial class finishFileUpload_args : TBase
      {
        private string _location;

        public string Location
        {
          get
          {
            return _location;
          }
          set
          {
            __isset.location = true;
            this._location = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool location;
        }

        public finishFileUpload_args()
        {
        }

        public finishFileUpload_args DeepCopy()
        {
          var tmp1500 = new finishFileUpload_args();
          if((Location != null) && __isset.location)
          {
            tmp1500.Location = this.Location;
          }
          tmp1500.__isset.location = this.__isset.location;
          return tmp1500;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Location = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1501 = new TStruct("finishFileUpload_args");
            await oprot.WriteStructBeginAsync(tmp1501, cancellationToken);
            var tmp1502 = new TField();
            if((Location != null) && __isset.location)
            {
              tmp1502.Name = "location";
              tmp1502.Type = TType.String;
              tmp1502.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1502, cancellationToken);
              await oprot.WriteStringAsync(Location, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is finishFileUpload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.location == other.__isset.location) && ((!__isset.location) || (global::System.Object.Equals(Location, other.Location))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Location != null) && __isset.location)
            {
              hashcode = (hashcode * 397) + Location.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1503 = new StringBuilder("finishFileUpload_args(");
          int tmp1504 = 0;
          if((Location != null) && __isset.location)
          {
            if(0 < tmp1504++) { tmp1503.Append(", "); }
            tmp1503.Append("Location: ");
            Location.ToString(tmp1503);
          }
          tmp1503.Append(')');
          return tmp1503.ToString();
        }
      }


      public partial class finishFileUpload_result : TBase
      {
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool aze;
        }

        public finishFileUpload_result()
        {
        }

        public finishFileUpload_result DeepCopy()
        {
          var tmp1505 = new finishFileUpload_result();
          if((Aze != null) && __isset.aze)
          {
            tmp1505.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1505.__isset.aze = this.__isset.aze;
          return tmp1505;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1506 = new TStruct("finishFileUpload_result");
            await oprot.WriteStructBeginAsync(tmp1506, cancellationToken);
            var tmp1507 = new TField();

            if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1507.Name = "Aze";
                tmp1507.Type = TType.Struct;
                tmp1507.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1507, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is finishFileUpload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1508 = new StringBuilder("finishFileUpload_result(");
          int tmp1509 = 0;
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1509++) { tmp1508.Append(", "); }
            tmp1508.Append("Aze: ");
            Aze.ToString(tmp1508);
          }
          tmp1508.Append(')');
          return tmp1508.ToString();
        }
      }


      public partial class beginFileDownload_args : TBase
      {
        private string _file;

        public string File
        {
          get
          {
            return _file;
          }
          set
          {
            __isset.file = true;
            this._file = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool file;
        }

        public beginFileDownload_args()
        {
        }

        public beginFileDownload_args DeepCopy()
        {
          var tmp1510 = new beginFileDownload_args();
          if((File != null) && __isset.file)
          {
            tmp1510.File = this.File;
          }
          tmp1510.__isset.file = this.__isset.file;
          return tmp1510;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    File = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1511 = new TStruct("beginFileDownload_args");
            await oprot.WriteStructBeginAsync(tmp1511, cancellationToken);
            var tmp1512 = new TField();
            if((File != null) && __isset.file)
            {
              tmp1512.Name = "file";
              tmp1512.Type = TType.String;
              tmp1512.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1512, cancellationToken);
              await oprot.WriteStringAsync(File, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginFileDownload_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.file == other.__isset.file) && ((!__isset.file) || (global::System.Object.Equals(File, other.File))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((File != null) && __isset.file)
            {
              hashcode = (hashcode * 397) + File.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1513 = new StringBuilder("beginFileDownload_args(");
          int tmp1514 = 0;
          if((File != null) && __isset.file)
          {
            if(0 < tmp1514++) { tmp1513.Append(", "); }
            tmp1513.Append("File: ");
            File.ToString(tmp1513);
          }
          tmp1513.Append(')');
          return tmp1513.ToString();
        }
      }


      public partial class beginFileDownload_result : TBase
      {
        private string _success;
        private global::StormThrift.AuthorizationException _aze;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public beginFileDownload_result()
        {
        }

        public beginFileDownload_result DeepCopy()
        {
          var tmp1515 = new beginFileDownload_result();
          if((Success != null) && __isset.success)
          {
            tmp1515.Success = this.Success;
          }
          tmp1515.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1515.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1515.__isset.aze = this.__isset.aze;
          return tmp1515;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1516 = new TStruct("beginFileDownload_result");
            await oprot.WriteStructBeginAsync(tmp1516, cancellationToken);
            var tmp1517 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1517.Name = "Success";
                tmp1517.Type = TType.String;
                tmp1517.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1517.Name = "Aze";
                tmp1517.Type = TType.Struct;
                tmp1517.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1517, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is beginFileDownload_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1518 = new StringBuilder("beginFileDownload_result(");
          int tmp1519 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("Success: ");
            Success.ToString(tmp1518);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1519++) { tmp1518.Append(", "); }
            tmp1518.Append("Aze: ");
            Aze.ToString(tmp1518);
          }
          tmp1518.Append(')');
          return tmp1518.ToString();
        }
      }


      public partial class downloadChunk_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public downloadChunk_args()
        {
        }

        public downloadChunk_args DeepCopy()
        {
          var tmp1520 = new downloadChunk_args();
          if((Id != null) && __isset.id)
          {
            tmp1520.Id = this.Id;
          }
          tmp1520.__isset.id = this.__isset.id;
          return tmp1520;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1521 = new TStruct("downloadChunk_args");
            await oprot.WriteStructBeginAsync(tmp1521, cancellationToken);
            var tmp1522 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1522.Name = "id";
              tmp1522.Type = TType.String;
              tmp1522.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1522, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is downloadChunk_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1523 = new StringBuilder("downloadChunk_args(");
          int tmp1524 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1524++) { tmp1523.Append(", "); }
            tmp1523.Append("Id: ");
            Id.ToString(tmp1523);
          }
          tmp1523.Append(')');
          return tmp1523.ToString();
        }
      }


      public partial class downloadChunk_result : TBase
      {
        private byte[] _success;
        private global::StormThrift.AuthorizationException _aze;

        public byte[] Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public downloadChunk_result()
        {
        }

        public downloadChunk_result DeepCopy()
        {
          var tmp1525 = new downloadChunk_result();
          if((Success != null) && __isset.success)
          {
            tmp1525.Success = this.Success.ToArray();
          }
          tmp1525.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1525.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1525.__isset.aze = this.__isset.aze;
          return tmp1525;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1526 = new TStruct("downloadChunk_result");
            await oprot.WriteStructBeginAsync(tmp1526, cancellationToken);
            var tmp1527 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1527.Name = "Success";
                tmp1527.Type = TType.String;
                tmp1527.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1527.Name = "Aze";
                tmp1527.Type = TType.Struct;
                tmp1527.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1527, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is downloadChunk_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1528 = new StringBuilder("downloadChunk_result(");
          int tmp1529 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("Success: ");
            Success.ToString(tmp1528);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1529++) { tmp1528.Append(", "); }
            tmp1528.Append("Aze: ");
            Aze.ToString(tmp1528);
          }
          tmp1528.Append(')');
          return tmp1528.ToString();
        }
      }


      public partial class getNimbusConf_args : TBase
      {

        public getNimbusConf_args()
        {
        }

        public getNimbusConf_args DeepCopy()
        {
          var tmp1530 = new getNimbusConf_args();
          return tmp1530;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1531 = new TStruct("getNimbusConf_args");
            await oprot.WriteStructBeginAsync(tmp1531, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNimbusConf_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1532 = new StringBuilder("getNimbusConf_args(");
          tmp1532.Append(')');
          return tmp1532.ToString();
        }
      }


      public partial class getNimbusConf_result : TBase
      {
        private string _success;
        private global::StormThrift.AuthorizationException _aze;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public getNimbusConf_result()
        {
        }

        public getNimbusConf_result DeepCopy()
        {
          var tmp1534 = new getNimbusConf_result();
          if((Success != null) && __isset.success)
          {
            tmp1534.Success = this.Success;
          }
          tmp1534.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1534.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1534.__isset.aze = this.__isset.aze;
          return tmp1534;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1535 = new TStruct("getNimbusConf_result");
            await oprot.WriteStructBeginAsync(tmp1535, cancellationToken);
            var tmp1536 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1536.Name = "Success";
                tmp1536.Type = TType.String;
                tmp1536.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1536, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1536.Name = "Aze";
                tmp1536.Type = TType.Struct;
                tmp1536.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1536, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getNimbusConf_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1537 = new StringBuilder("getNimbusConf_result(");
          int tmp1538 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1538++) { tmp1537.Append(", "); }
            tmp1537.Append("Success: ");
            Success.ToString(tmp1537);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1538++) { tmp1537.Append(", "); }
            tmp1537.Append("Aze: ");
            Aze.ToString(tmp1537);
          }
          tmp1537.Append(')');
          return tmp1537.ToString();
        }
      }


      public partial class getClusterInfo_args : TBase
      {

        public getClusterInfo_args()
        {
        }

        public getClusterInfo_args DeepCopy()
        {
          var tmp1539 = new getClusterInfo_args();
          return tmp1539;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1540 = new TStruct("getClusterInfo_args");
            await oprot.WriteStructBeginAsync(tmp1540, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getClusterInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1541 = new StringBuilder("getClusterInfo_args(");
          tmp1541.Append(')');
          return tmp1541.ToString();
        }
      }


      public partial class getClusterInfo_result : TBase
      {
        private global::StormThrift.ClusterSummary _success;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.ClusterSummary Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public getClusterInfo_result()
        {
        }

        public getClusterInfo_result DeepCopy()
        {
          var tmp1543 = new getClusterInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp1543.Success = (global::StormThrift.ClusterSummary)this.Success.DeepCopy();
          }
          tmp1543.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1543.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1543.__isset.aze = this.__isset.aze;
          return tmp1543;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.ClusterSummary();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1544 = new TStruct("getClusterInfo_result");
            await oprot.WriteStructBeginAsync(tmp1544, cancellationToken);
            var tmp1545 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1545.Name = "Success";
                tmp1545.Type = TType.Struct;
                tmp1545.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1545, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1545.Name = "Aze";
                tmp1545.Type = TType.Struct;
                tmp1545.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1545, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getClusterInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1546 = new StringBuilder("getClusterInfo_result(");
          int tmp1547 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1547++) { tmp1546.Append(", "); }
            tmp1546.Append("Success: ");
            Success.ToString(tmp1546);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1547++) { tmp1546.Append(", "); }
            tmp1546.Append("Aze: ");
            Aze.ToString(tmp1546);
          }
          tmp1546.Append(')');
          return tmp1546.ToString();
        }
      }


      public partial class getTopologyInfo_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public getTopologyInfo_args()
        {
        }

        public getTopologyInfo_args DeepCopy()
        {
          var tmp1548 = new getTopologyInfo_args();
          if((Id != null) && __isset.id)
          {
            tmp1548.Id = this.Id;
          }
          tmp1548.__isset.id = this.__isset.id;
          return tmp1548;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1549 = new TStruct("getTopologyInfo_args");
            await oprot.WriteStructBeginAsync(tmp1549, cancellationToken);
            var tmp1550 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1550.Name = "id";
              tmp1550.Type = TType.String;
              tmp1550.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1550, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1551 = new StringBuilder("getTopologyInfo_args(");
          int tmp1552 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1552++) { tmp1551.Append(", "); }
            tmp1551.Append("Id: ");
            Id.ToString(tmp1551);
          }
          tmp1551.Append(')');
          return tmp1551.ToString();
        }
      }


      public partial class getTopologyInfo_result : TBase
      {
        private global::StormThrift.TopologyInfo _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.TopologyInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getTopologyInfo_result()
        {
        }

        public getTopologyInfo_result DeepCopy()
        {
          var tmp1553 = new getTopologyInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp1553.Success = (global::StormThrift.TopologyInfo)this.Success.DeepCopy();
          }
          tmp1553.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1553.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1553.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1553.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1553.__isset.aze = this.__isset.aze;
          return tmp1553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.TopologyInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1554 = new TStruct("getTopologyInfo_result");
            await oprot.WriteStructBeginAsync(tmp1554, cancellationToken);
            var tmp1555 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1555.Name = "Success";
                tmp1555.Type = TType.Struct;
                tmp1555.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1555.Name = "E";
                tmp1555.Type = TType.Struct;
                tmp1555.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1555.Name = "Aze";
                tmp1555.Type = TType.Struct;
                tmp1555.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1555, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1556 = new StringBuilder("getTopologyInfo_result(");
          int tmp1557 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("Success: ");
            Success.ToString(tmp1556);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("E: ");
            E.ToString(tmp1556);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1557++) { tmp1556.Append(", "); }
            tmp1556.Append("Aze: ");
            Aze.ToString(tmp1556);
          }
          tmp1556.Append(')');
          return tmp1556.ToString();
        }
      }


      public partial class getTopologyInfoWithOpts_args : TBase
      {
        private string _id;
        private global::StormThrift.GetInfoOptions _options;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public global::StormThrift.GetInfoOptions Options
        {
          get
          {
            return _options;
          }
          set
          {
            __isset.options = true;
            this._options = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool options;
        }

        public getTopologyInfoWithOpts_args()
        {
        }

        public getTopologyInfoWithOpts_args DeepCopy()
        {
          var tmp1558 = new getTopologyInfoWithOpts_args();
          if((Id != null) && __isset.id)
          {
            tmp1558.Id = this.Id;
          }
          tmp1558.__isset.id = this.__isset.id;
          if((Options != null) && __isset.options)
          {
            tmp1558.Options = (global::StormThrift.GetInfoOptions)this.Options.DeepCopy();
          }
          tmp1558.__isset.options = this.__isset.options;
          return tmp1558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Options = new global::StormThrift.GetInfoOptions();
                    await Options.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1559 = new TStruct("getTopologyInfoWithOpts_args");
            await oprot.WriteStructBeginAsync(tmp1559, cancellationToken);
            var tmp1560 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1560.Name = "id";
              tmp1560.Type = TType.String;
              tmp1560.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1560, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Options != null) && __isset.options)
            {
              tmp1560.Name = "options";
              tmp1560.Type = TType.Struct;
              tmp1560.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1560, cancellationToken);
              await Options.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyInfoWithOpts_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.options == other.__isset.options) && ((!__isset.options) || (global::System.Object.Equals(Options, other.Options))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Options != null) && __isset.options)
            {
              hashcode = (hashcode * 397) + Options.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1561 = new StringBuilder("getTopologyInfoWithOpts_args(");
          int tmp1562 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1562++) { tmp1561.Append(", "); }
            tmp1561.Append("Id: ");
            Id.ToString(tmp1561);
          }
          if((Options != null) && __isset.options)
          {
            if(0 < tmp1562++) { tmp1561.Append(", "); }
            tmp1561.Append("Options: ");
            Options.ToString(tmp1561);
          }
          tmp1561.Append(')');
          return tmp1561.ToString();
        }
      }


      public partial class getTopologyInfoWithOpts_result : TBase
      {
        private global::StormThrift.TopologyInfo _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.TopologyInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getTopologyInfoWithOpts_result()
        {
        }

        public getTopologyInfoWithOpts_result DeepCopy()
        {
          var tmp1563 = new getTopologyInfoWithOpts_result();
          if((Success != null) && __isset.success)
          {
            tmp1563.Success = (global::StormThrift.TopologyInfo)this.Success.DeepCopy();
          }
          tmp1563.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1563.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1563.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1563.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1563.__isset.aze = this.__isset.aze;
          return tmp1563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.TopologyInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1564 = new TStruct("getTopologyInfoWithOpts_result");
            await oprot.WriteStructBeginAsync(tmp1564, cancellationToken);
            var tmp1565 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1565.Name = "Success";
                tmp1565.Type = TType.Struct;
                tmp1565.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1565.Name = "E";
                tmp1565.Type = TType.Struct;
                tmp1565.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1565.Name = "Aze";
                tmp1565.Type = TType.Struct;
                tmp1565.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1565, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyInfoWithOpts_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1566 = new StringBuilder("getTopologyInfoWithOpts_result(");
          int tmp1567 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("Success: ");
            Success.ToString(tmp1566);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("E: ");
            E.ToString(tmp1566);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1567++) { tmp1566.Append(", "); }
            tmp1566.Append("Aze: ");
            Aze.ToString(tmp1566);
          }
          tmp1566.Append(')');
          return tmp1566.ToString();
        }
      }


      public partial class getTopologyPageInfo_args : TBase
      {
        private string _id;
        private string _window;
        private bool _is_include_sys;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Window
        {
          get
          {
            return _window;
          }
          set
          {
            __isset.window = true;
            this._window = value;
          }
        }

        public bool Is_include_sys
        {
          get
          {
            return _is_include_sys;
          }
          set
          {
            __isset.is_include_sys = true;
            this._is_include_sys = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool window;
          public bool is_include_sys;
        }

        public getTopologyPageInfo_args()
        {
        }

        public getTopologyPageInfo_args DeepCopy()
        {
          var tmp1568 = new getTopologyPageInfo_args();
          if((Id != null) && __isset.id)
          {
            tmp1568.Id = this.Id;
          }
          tmp1568.__isset.id = this.__isset.id;
          if((Window != null) && __isset.window)
          {
            tmp1568.Window = this.Window;
          }
          tmp1568.__isset.window = this.__isset.window;
          if(__isset.is_include_sys)
          {
            tmp1568.Is_include_sys = this.Is_include_sys;
          }
          tmp1568.__isset.is_include_sys = this.__isset.is_include_sys;
          return tmp1568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Window = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Bool)
                  {
                    Is_include_sys = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1569 = new TStruct("getTopologyPageInfo_args");
            await oprot.WriteStructBeginAsync(tmp1569, cancellationToken);
            var tmp1570 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1570.Name = "id";
              tmp1570.Type = TType.String;
              tmp1570.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1570, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Window != null) && __isset.window)
            {
              tmp1570.Name = "window";
              tmp1570.Type = TType.String;
              tmp1570.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1570, cancellationToken);
              await oprot.WriteStringAsync(Window, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.is_include_sys)
            {
              tmp1570.Name = "is_include_sys";
              tmp1570.Type = TType.Bool;
              tmp1570.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1570, cancellationToken);
              await oprot.WriteBoolAsync(Is_include_sys, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyPageInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.window == other.__isset.window) && ((!__isset.window) || (global::System.Object.Equals(Window, other.Window))))
            && ((__isset.is_include_sys == other.__isset.is_include_sys) && ((!__isset.is_include_sys) || (global::System.Object.Equals(Is_include_sys, other.Is_include_sys))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Window != null) && __isset.window)
            {
              hashcode = (hashcode * 397) + Window.GetHashCode();
            }
            if(__isset.is_include_sys)
            {
              hashcode = (hashcode * 397) + Is_include_sys.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1571 = new StringBuilder("getTopologyPageInfo_args(");
          int tmp1572 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1572++) { tmp1571.Append(", "); }
            tmp1571.Append("Id: ");
            Id.ToString(tmp1571);
          }
          if((Window != null) && __isset.window)
          {
            if(0 < tmp1572++) { tmp1571.Append(", "); }
            tmp1571.Append("Window: ");
            Window.ToString(tmp1571);
          }
          if(__isset.is_include_sys)
          {
            if(0 < tmp1572++) { tmp1571.Append(", "); }
            tmp1571.Append("Is_include_sys: ");
            Is_include_sys.ToString(tmp1571);
          }
          tmp1571.Append(')');
          return tmp1571.ToString();
        }
      }


      public partial class getTopologyPageInfo_result : TBase
      {
        private global::StormThrift.TopologyPageInfo _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.TopologyPageInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getTopologyPageInfo_result()
        {
        }

        public getTopologyPageInfo_result DeepCopy()
        {
          var tmp1573 = new getTopologyPageInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp1573.Success = (global::StormThrift.TopologyPageInfo)this.Success.DeepCopy();
          }
          tmp1573.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1573.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1573.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1573.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1573.__isset.aze = this.__isset.aze;
          return tmp1573;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.TopologyPageInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1574 = new TStruct("getTopologyPageInfo_result");
            await oprot.WriteStructBeginAsync(tmp1574, cancellationToken);
            var tmp1575 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1575.Name = "Success";
                tmp1575.Type = TType.Struct;
                tmp1575.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1575, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1575.Name = "E";
                tmp1575.Type = TType.Struct;
                tmp1575.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1575, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1575.Name = "Aze";
                tmp1575.Type = TType.Struct;
                tmp1575.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1575, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyPageInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1576 = new StringBuilder("getTopologyPageInfo_result(");
          int tmp1577 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1577++) { tmp1576.Append(", "); }
            tmp1576.Append("Success: ");
            Success.ToString(tmp1576);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1577++) { tmp1576.Append(", "); }
            tmp1576.Append("E: ");
            E.ToString(tmp1576);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1577++) { tmp1576.Append(", "); }
            tmp1576.Append("Aze: ");
            Aze.ToString(tmp1576);
          }
          tmp1576.Append(')');
          return tmp1576.ToString();
        }
      }


      public partial class getComponentPageInfo_args : TBase
      {
        private string _topology_id;
        private string _component_id;
        private string _window;
        private bool _is_include_sys;

        public string Topology_id
        {
          get
          {
            return _topology_id;
          }
          set
          {
            __isset.topology_id = true;
            this._topology_id = value;
          }
        }

        public string Component_id
        {
          get
          {
            return _component_id;
          }
          set
          {
            __isset.component_id = true;
            this._component_id = value;
          }
        }

        public string Window
        {
          get
          {
            return _window;
          }
          set
          {
            __isset.window = true;
            this._window = value;
          }
        }

        public bool Is_include_sys
        {
          get
          {
            return _is_include_sys;
          }
          set
          {
            __isset.is_include_sys = true;
            this._is_include_sys = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool topology_id;
          public bool component_id;
          public bool window;
          public bool is_include_sys;
        }

        public getComponentPageInfo_args()
        {
        }

        public getComponentPageInfo_args DeepCopy()
        {
          var tmp1578 = new getComponentPageInfo_args();
          if((Topology_id != null) && __isset.topology_id)
          {
            tmp1578.Topology_id = this.Topology_id;
          }
          tmp1578.__isset.topology_id = this.__isset.topology_id;
          if((Component_id != null) && __isset.component_id)
          {
            tmp1578.Component_id = this.Component_id;
          }
          tmp1578.__isset.component_id = this.__isset.component_id;
          if((Window != null) && __isset.window)
          {
            tmp1578.Window = this.Window;
          }
          tmp1578.__isset.window = this.__isset.window;
          if(__isset.is_include_sys)
          {
            tmp1578.Is_include_sys = this.Is_include_sys;
          }
          tmp1578.__isset.is_include_sys = this.__isset.is_include_sys;
          return tmp1578;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Topology_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Component_id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Window = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Bool)
                  {
                    Is_include_sys = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1579 = new TStruct("getComponentPageInfo_args");
            await oprot.WriteStructBeginAsync(tmp1579, cancellationToken);
            var tmp1580 = new TField();
            if((Topology_id != null) && __isset.topology_id)
            {
              tmp1580.Name = "topology_id";
              tmp1580.Type = TType.String;
              tmp1580.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1580, cancellationToken);
              await oprot.WriteStringAsync(Topology_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Component_id != null) && __isset.component_id)
            {
              tmp1580.Name = "component_id";
              tmp1580.Type = TType.String;
              tmp1580.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp1580, cancellationToken);
              await oprot.WriteStringAsync(Component_id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Window != null) && __isset.window)
            {
              tmp1580.Name = "window";
              tmp1580.Type = TType.String;
              tmp1580.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp1580, cancellationToken);
              await oprot.WriteStringAsync(Window, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.is_include_sys)
            {
              tmp1580.Name = "is_include_sys";
              tmp1580.Type = TType.Bool;
              tmp1580.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp1580, cancellationToken);
              await oprot.WriteBoolAsync(Is_include_sys, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getComponentPageInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.topology_id == other.__isset.topology_id) && ((!__isset.topology_id) || (global::System.Object.Equals(Topology_id, other.Topology_id))))
            && ((__isset.component_id == other.__isset.component_id) && ((!__isset.component_id) || (global::System.Object.Equals(Component_id, other.Component_id))))
            && ((__isset.window == other.__isset.window) && ((!__isset.window) || (global::System.Object.Equals(Window, other.Window))))
            && ((__isset.is_include_sys == other.__isset.is_include_sys) && ((!__isset.is_include_sys) || (global::System.Object.Equals(Is_include_sys, other.Is_include_sys))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Topology_id != null) && __isset.topology_id)
            {
              hashcode = (hashcode * 397) + Topology_id.GetHashCode();
            }
            if((Component_id != null) && __isset.component_id)
            {
              hashcode = (hashcode * 397) + Component_id.GetHashCode();
            }
            if((Window != null) && __isset.window)
            {
              hashcode = (hashcode * 397) + Window.GetHashCode();
            }
            if(__isset.is_include_sys)
            {
              hashcode = (hashcode * 397) + Is_include_sys.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1581 = new StringBuilder("getComponentPageInfo_args(");
          int tmp1582 = 0;
          if((Topology_id != null) && __isset.topology_id)
          {
            if(0 < tmp1582++) { tmp1581.Append(", "); }
            tmp1581.Append("Topology_id: ");
            Topology_id.ToString(tmp1581);
          }
          if((Component_id != null) && __isset.component_id)
          {
            if(0 < tmp1582++) { tmp1581.Append(", "); }
            tmp1581.Append("Component_id: ");
            Component_id.ToString(tmp1581);
          }
          if((Window != null) && __isset.window)
          {
            if(0 < tmp1582++) { tmp1581.Append(", "); }
            tmp1581.Append("Window: ");
            Window.ToString(tmp1581);
          }
          if(__isset.is_include_sys)
          {
            if(0 < tmp1582++) { tmp1581.Append(", "); }
            tmp1581.Append("Is_include_sys: ");
            Is_include_sys.ToString(tmp1581);
          }
          tmp1581.Append(')');
          return tmp1581.ToString();
        }
      }


      public partial class getComponentPageInfo_result : TBase
      {
        private global::StormThrift.ComponentPageInfo _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.ComponentPageInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getComponentPageInfo_result()
        {
        }

        public getComponentPageInfo_result DeepCopy()
        {
          var tmp1583 = new getComponentPageInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp1583.Success = (global::StormThrift.ComponentPageInfo)this.Success.DeepCopy();
          }
          tmp1583.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1583.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1583.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1583.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1583.__isset.aze = this.__isset.aze;
          return tmp1583;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.ComponentPageInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1584 = new TStruct("getComponentPageInfo_result");
            await oprot.WriteStructBeginAsync(tmp1584, cancellationToken);
            var tmp1585 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1585.Name = "Success";
                tmp1585.Type = TType.Struct;
                tmp1585.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1585, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1585.Name = "E";
                tmp1585.Type = TType.Struct;
                tmp1585.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1585, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1585.Name = "Aze";
                tmp1585.Type = TType.Struct;
                tmp1585.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1585, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getComponentPageInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1586 = new StringBuilder("getComponentPageInfo_result(");
          int tmp1587 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1587++) { tmp1586.Append(", "); }
            tmp1586.Append("Success: ");
            Success.ToString(tmp1586);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1587++) { tmp1586.Append(", "); }
            tmp1586.Append("E: ");
            E.ToString(tmp1586);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1587++) { tmp1586.Append(", "); }
            tmp1586.Append("Aze: ");
            Aze.ToString(tmp1586);
          }
          tmp1586.Append(')');
          return tmp1586.ToString();
        }
      }


      public partial class getTopologyConf_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public getTopologyConf_args()
        {
        }

        public getTopologyConf_args DeepCopy()
        {
          var tmp1588 = new getTopologyConf_args();
          if((Id != null) && __isset.id)
          {
            tmp1588.Id = this.Id;
          }
          tmp1588.__isset.id = this.__isset.id;
          return tmp1588;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1589 = new TStruct("getTopologyConf_args");
            await oprot.WriteStructBeginAsync(tmp1589, cancellationToken);
            var tmp1590 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1590.Name = "id";
              tmp1590.Type = TType.String;
              tmp1590.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1590, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyConf_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1591 = new StringBuilder("getTopologyConf_args(");
          int tmp1592 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1592++) { tmp1591.Append(", "); }
            tmp1591.Append("Id: ");
            Id.ToString(tmp1591);
          }
          tmp1591.Append(')');
          return tmp1591.ToString();
        }
      }


      public partial class getTopologyConf_result : TBase
      {
        private string _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getTopologyConf_result()
        {
        }

        public getTopologyConf_result DeepCopy()
        {
          var tmp1593 = new getTopologyConf_result();
          if((Success != null) && __isset.success)
          {
            tmp1593.Success = this.Success;
          }
          tmp1593.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1593.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1593.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1593.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1593.__isset.aze = this.__isset.aze;
          return tmp1593;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1594 = new TStruct("getTopologyConf_result");
            await oprot.WriteStructBeginAsync(tmp1594, cancellationToken);
            var tmp1595 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1595.Name = "Success";
                tmp1595.Type = TType.String;
                tmp1595.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1595, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1595.Name = "E";
                tmp1595.Type = TType.Struct;
                tmp1595.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1595, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1595.Name = "Aze";
                tmp1595.Type = TType.Struct;
                tmp1595.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1595, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyConf_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1596 = new StringBuilder("getTopologyConf_result(");
          int tmp1597 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1597++) { tmp1596.Append(", "); }
            tmp1596.Append("Success: ");
            Success.ToString(tmp1596);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1597++) { tmp1596.Append(", "); }
            tmp1596.Append("E: ");
            E.ToString(tmp1596);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1597++) { tmp1596.Append(", "); }
            tmp1596.Append("Aze: ");
            Aze.ToString(tmp1596);
          }
          tmp1596.Append(')');
          return tmp1596.ToString();
        }
      }


      public partial class getTopology_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public getTopology_args()
        {
        }

        public getTopology_args DeepCopy()
        {
          var tmp1598 = new getTopology_args();
          if((Id != null) && __isset.id)
          {
            tmp1598.Id = this.Id;
          }
          tmp1598.__isset.id = this.__isset.id;
          return tmp1598;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1599 = new TStruct("getTopology_args");
            await oprot.WriteStructBeginAsync(tmp1599, cancellationToken);
            var tmp1600 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1600.Name = "id";
              tmp1600.Type = TType.String;
              tmp1600.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1600, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopology_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1601 = new StringBuilder("getTopology_args(");
          int tmp1602 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1602++) { tmp1601.Append(", "); }
            tmp1601.Append("Id: ");
            Id.ToString(tmp1601);
          }
          tmp1601.Append(')');
          return tmp1601.ToString();
        }
      }


      public partial class getTopology_result : TBase
      {
        private global::StormThrift.StormTopology _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.StormTopology Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getTopology_result()
        {
        }

        public getTopology_result DeepCopy()
        {
          var tmp1603 = new getTopology_result();
          if((Success != null) && __isset.success)
          {
            tmp1603.Success = (global::StormThrift.StormTopology)this.Success.DeepCopy();
          }
          tmp1603.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1603.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1603.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1603.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1603.__isset.aze = this.__isset.aze;
          return tmp1603;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.StormTopology();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1604 = new TStruct("getTopology_result");
            await oprot.WriteStructBeginAsync(tmp1604, cancellationToken);
            var tmp1605 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1605.Name = "Success";
                tmp1605.Type = TType.Struct;
                tmp1605.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1605, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1605.Name = "E";
                tmp1605.Type = TType.Struct;
                tmp1605.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1605, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1605.Name = "Aze";
                tmp1605.Type = TType.Struct;
                tmp1605.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1605, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopology_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1606 = new StringBuilder("getTopology_result(");
          int tmp1607 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1607++) { tmp1606.Append(", "); }
            tmp1606.Append("Success: ");
            Success.ToString(tmp1606);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1607++) { tmp1606.Append(", "); }
            tmp1606.Append("E: ");
            E.ToString(tmp1606);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1607++) { tmp1606.Append(", "); }
            tmp1606.Append("Aze: ");
            Aze.ToString(tmp1606);
          }
          tmp1606.Append(')');
          return tmp1606.ToString();
        }
      }


      public partial class getUserTopology_args : TBase
      {
        private string _id;

        public string Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
        }

        public getUserTopology_args()
        {
        }

        public getUserTopology_args DeepCopy()
        {
          var tmp1608 = new getUserTopology_args();
          if((Id != null) && __isset.id)
          {
            tmp1608.Id = this.Id;
          }
          tmp1608.__isset.id = this.__isset.id;
          return tmp1608;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Id = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1609 = new TStruct("getUserTopology_args");
            await oprot.WriteStructBeginAsync(tmp1609, cancellationToken);
            var tmp1610 = new TField();
            if((Id != null) && __isset.id)
            {
              tmp1610.Name = "id";
              tmp1610.Type = TType.String;
              tmp1610.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1610, cancellationToken);
              await oprot.WriteStringAsync(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserTopology_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Id != null) && __isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1611 = new StringBuilder("getUserTopology_args(");
          int tmp1612 = 0;
          if((Id != null) && __isset.id)
          {
            if(0 < tmp1612++) { tmp1611.Append(", "); }
            tmp1611.Append("Id: ");
            Id.ToString(tmp1611);
          }
          tmp1611.Append(')');
          return tmp1611.ToString();
        }
      }


      public partial class getUserTopology_result : TBase
      {
        private global::StormThrift.StormTopology _success;
        private global::StormThrift.NotAliveException _e;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.StormTopology Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.NotAliveException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool e;
          public bool aze;
        }

        public getUserTopology_result()
        {
        }

        public getUserTopology_result DeepCopy()
        {
          var tmp1613 = new getUserTopology_result();
          if((Success != null) && __isset.success)
          {
            tmp1613.Success = (global::StormThrift.StormTopology)this.Success.DeepCopy();
          }
          tmp1613.__isset.success = this.__isset.success;
          if((E != null) && __isset.e)
          {
            tmp1613.E = (global::StormThrift.NotAliveException)this.E.DeepCopy();
          }
          tmp1613.__isset.e = this.__isset.e;
          if((Aze != null) && __isset.aze)
          {
            tmp1613.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1613.__isset.aze = this.__isset.aze;
          return tmp1613;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.StormTopology();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::StormThrift.NotAliveException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1614 = new TStruct("getUserTopology_result");
            await oprot.WriteStructBeginAsync(tmp1614, cancellationToken);
            var tmp1615 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1615.Name = "Success";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.e)
            {
              if (E != null)
              {
                tmp1615.Name = "E";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1615.Name = "Aze";
                tmp1615.Type = TType.Struct;
                tmp1615.ID = 2;
                await oprot.WriteFieldBeginAsync(tmp1615, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getUserTopology_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1616 = new StringBuilder("getUserTopology_result(");
          int tmp1617 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1617++) { tmp1616.Append(", "); }
            tmp1616.Append("Success: ");
            Success.ToString(tmp1616);
          }
          if((E != null) && __isset.e)
          {
            if(0 < tmp1617++) { tmp1616.Append(", "); }
            tmp1616.Append("E: ");
            E.ToString(tmp1616);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1617++) { tmp1616.Append(", "); }
            tmp1616.Append("Aze: ");
            Aze.ToString(tmp1616);
          }
          tmp1616.Append(')');
          return tmp1616.ToString();
        }
      }


      public partial class getTopologyHistory_args : TBase
      {
        private string _user;

        public string User
        {
          get
          {
            return _user;
          }
          set
          {
            __isset.user = true;
            this._user = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool user;
        }

        public getTopologyHistory_args()
        {
        }

        public getTopologyHistory_args DeepCopy()
        {
          var tmp1618 = new getTopologyHistory_args();
          if((User != null) && __isset.user)
          {
            tmp1618.User = this.User;
          }
          tmp1618.__isset.user = this.__isset.user;
          return tmp1618;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    User = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1619 = new TStruct("getTopologyHistory_args");
            await oprot.WriteStructBeginAsync(tmp1619, cancellationToken);
            var tmp1620 = new TField();
            if((User != null) && __isset.user)
            {
              tmp1620.Name = "user";
              tmp1620.Type = TType.String;
              tmp1620.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1620, cancellationToken);
              await oprot.WriteStringAsync(User, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyHistory_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.user == other.__isset.user) && ((!__isset.user) || (global::System.Object.Equals(User, other.User))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((User != null) && __isset.user)
            {
              hashcode = (hashcode * 397) + User.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1621 = new StringBuilder("getTopologyHistory_args(");
          int tmp1622 = 0;
          if((User != null) && __isset.user)
          {
            if(0 < tmp1622++) { tmp1621.Append(", "); }
            tmp1621.Append("User: ");
            User.ToString(tmp1621);
          }
          tmp1621.Append(')');
          return tmp1621.ToString();
        }
      }


      public partial class getTopologyHistory_result : TBase
      {
        private global::StormThrift.TopologyHistoryInfo _success;
        private global::StormThrift.AuthorizationException _aze;

        public global::StormThrift.TopologyHistoryInfo Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::StormThrift.AuthorizationException Aze
        {
          get
          {
            return _aze;
          }
          set
          {
            __isset.aze = true;
            this._aze = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool aze;
        }

        public getTopologyHistory_result()
        {
        }

        public getTopologyHistory_result DeepCopy()
        {
          var tmp1623 = new getTopologyHistory_result();
          if((Success != null) && __isset.success)
          {
            tmp1623.Success = (global::StormThrift.TopologyHistoryInfo)this.Success.DeepCopy();
          }
          tmp1623.__isset.success = this.__isset.success;
          if((Aze != null) && __isset.aze)
          {
            tmp1623.Aze = (global::StormThrift.AuthorizationException)this.Aze.DeepCopy();
          }
          tmp1623.__isset.aze = this.__isset.aze;
          return tmp1623;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::StormThrift.TopologyHistoryInfo();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Aze = new global::StormThrift.AuthorizationException();
                    await Aze.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1624 = new TStruct("getTopologyHistory_result");
            await oprot.WriteStructBeginAsync(tmp1624, cancellationToken);
            var tmp1625 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp1625.Name = "Success";
                tmp1625.Type = TType.Struct;
                tmp1625.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1625, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.aze)
            {
              if (Aze != null)
              {
                tmp1625.Name = "Aze";
                tmp1625.Type = TType.Struct;
                tmp1625.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp1625, cancellationToken);
                await Aze.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getTopologyHistory_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.aze == other.__isset.aze) && ((!__isset.aze) || (global::System.Object.Equals(Aze, other.Aze))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Aze != null) && __isset.aze)
            {
              hashcode = (hashcode * 397) + Aze.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1626 = new StringBuilder("getTopologyHistory_result(");
          int tmp1627 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp1627++) { tmp1626.Append(", "); }
            tmp1626.Append("Success: ");
            Success.ToString(tmp1626);
          }
          if((Aze != null) && __isset.aze)
          {
            if(0 < tmp1627++) { tmp1626.Append(", "); }
            tmp1626.Append("Aze: ");
            Aze.ToString(tmp1626);
          }
          tmp1626.Append(')');
          return tmp1626.ToString();
        }
      }

    }

  }
}
