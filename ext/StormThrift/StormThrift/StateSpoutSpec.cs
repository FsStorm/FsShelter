/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class StateSpoutSpec : TBase
  {

    public global::StormThrift.ComponentObject State_spout_object { get; set; }

    public global::StormThrift.ComponentCommon Common { get; set; }

    public StateSpoutSpec()
    {
    }

    public StateSpoutSpec(global::StormThrift.ComponentObject state_spout_object, global::StormThrift.ComponentCommon common) : this()
    {
      this.State_spout_object = state_spout_object;
      this.Common = common;
    }

    public StateSpoutSpec DeepCopy()
    {
      var tmp76 = new StateSpoutSpec();
      if((State_spout_object != null))
      {
        tmp76.State_spout_object = (global::StormThrift.ComponentObject)this.State_spout_object.DeepCopy();
      }
      if((Common != null))
      {
        tmp76.Common = (global::StormThrift.ComponentCommon)this.Common.DeepCopy();
      }
      return tmp76;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_state_spout_object = false;
        bool isset_common = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                State_spout_object = new global::StormThrift.ComponentObject();
                await State_spout_object.ReadAsync(iprot, cancellationToken);
                isset_state_spout_object = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Common = new global::StormThrift.ComponentCommon();
                await Common.ReadAsync(iprot, cancellationToken);
                isset_common = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_state_spout_object)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_common)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp77 = new TStruct("StateSpoutSpec");
        await oprot.WriteStructBeginAsync(tmp77, cancellationToken);
        var tmp78 = new TField();
        if((State_spout_object != null))
        {
          tmp78.Name = "state_spout_object";
          tmp78.Type = TType.Struct;
          tmp78.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp78, cancellationToken);
          await State_spout_object.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Common != null))
        {
          tmp78.Name = "common";
          tmp78.Type = TType.Struct;
          tmp78.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp78, cancellationToken);
          await Common.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StateSpoutSpec other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(State_spout_object, other.State_spout_object)
        && global::System.Object.Equals(Common, other.Common);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((State_spout_object != null))
        {
          hashcode = (hashcode * 397) + State_spout_object.GetHashCode();
        }
        if((Common != null))
        {
          hashcode = (hashcode * 397) + Common.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp79 = new StringBuilder("StateSpoutSpec(");
      if((State_spout_object != null))
      {
        tmp79.Append(", State_spout_object: ");
        State_spout_object.ToString(tmp79);
      }
      if((Common != null))
      {
        tmp79.Append(", Common: ");
        Common.ToString(tmp79);
      }
      tmp79.Append(')');
      return tmp79.ToString();
    }
  }

}
