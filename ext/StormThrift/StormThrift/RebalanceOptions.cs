/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class RebalanceOptions : TBase
  {
    private int _wait_secs;
    private int _num_workers;
    private Dictionary<string, int> _num_executors;

    public int Wait_secs
    {
      get
      {
        return _wait_secs;
      }
      set
      {
        __isset.wait_secs = true;
        this._wait_secs = value;
      }
    }

    public int Num_workers
    {
      get
      {
        return _num_workers;
      }
      set
      {
        __isset.num_workers = true;
        this._num_workers = value;
      }
    }

    public Dictionary<string, int> Num_executors
    {
      get
      {
        return _num_executors;
      }
      set
      {
        __isset.num_executors = true;
        this._num_executors = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool wait_secs;
      public bool num_workers;
      public bool num_executors;
    }

    public RebalanceOptions()
    {
    }

    public RebalanceOptions DeepCopy()
    {
      var tmp443 = new RebalanceOptions();
      if(__isset.wait_secs)
      {
        tmp443.Wait_secs = this.Wait_secs;
      }
      tmp443.__isset.wait_secs = this.__isset.wait_secs;
      if(__isset.num_workers)
      {
        tmp443.Num_workers = this.Num_workers;
      }
      tmp443.__isset.num_workers = this.__isset.num_workers;
      if((Num_executors != null) && __isset.num_executors)
      {
        tmp443.Num_executors = this.Num_executors.DeepCopy();
      }
      tmp443.__isset.num_executors = this.__isset.num_executors;
      return tmp443;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Wait_secs = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Num_workers = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map444 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Num_executors = new Dictionary<string, int>(_map444.Count);
                  for(int _i445 = 0; _i445 < _map444.Count; ++_i445)
                  {
                    string _key446;
                    int _val447;
                    _key446 = await iprot.ReadStringAsync(cancellationToken);
                    _val447 = await iprot.ReadI32Async(cancellationToken);
                    Num_executors[_key446] = _val447;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp448 = new TStruct("RebalanceOptions");
        await oprot.WriteStructBeginAsync(tmp448, cancellationToken);
        var tmp449 = new TField();
        if(__isset.wait_secs)
        {
          tmp449.Name = "wait_secs";
          tmp449.Type = TType.I32;
          tmp449.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
          await oprot.WriteI32Async(Wait_secs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.num_workers)
        {
          tmp449.Name = "num_workers";
          tmp449.Type = TType.I32;
          tmp449.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
          await oprot.WriteI32Async(Num_workers, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Num_executors != null) && __isset.num_executors)
        {
          tmp449.Name = "num_executors";
          tmp449.Type = TType.Map;
          tmp449.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp449, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Num_executors.Count), cancellationToken);
            foreach (string _iter450 in Num_executors.Keys)
            {
              await oprot.WriteStringAsync(_iter450, cancellationToken);
              await oprot.WriteI32Async(Num_executors[_iter450], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is RebalanceOptions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.wait_secs == other.__isset.wait_secs) && ((!__isset.wait_secs) || (global::System.Object.Equals(Wait_secs, other.Wait_secs))))
        && ((__isset.num_workers == other.__isset.num_workers) && ((!__isset.num_workers) || (global::System.Object.Equals(Num_workers, other.Num_workers))))
        && ((__isset.num_executors == other.__isset.num_executors) && ((!__isset.num_executors) || (TCollections.Equals(Num_executors, other.Num_executors))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.wait_secs)
        {
          hashcode = (hashcode * 397) + Wait_secs.GetHashCode();
        }
        if(__isset.num_workers)
        {
          hashcode = (hashcode * 397) + Num_workers.GetHashCode();
        }
        if((Num_executors != null) && __isset.num_executors)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Num_executors);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp451 = new StringBuilder("RebalanceOptions(");
      int tmp452 = 0;
      if(__isset.wait_secs)
      {
        if(0 < tmp452++) { tmp451.Append(", "); }
        tmp451.Append("Wait_secs: ");
        Wait_secs.ToString(tmp451);
      }
      if(__isset.num_workers)
      {
        if(0 < tmp452++) { tmp451.Append(", "); }
        tmp451.Append("Num_workers: ");
        Num_workers.ToString(tmp451);
      }
      if((Num_executors != null) && __isset.num_executors)
      {
        if(0 < tmp452++) { tmp451.Append(", "); }
        tmp451.Append("Num_executors: ");
        Num_executors.ToString(tmp451);
      }
      tmp451.Append(')');
      return tmp451.ToString();
    }
  }

}
