/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class SettableBlobMeta : TBase
  {
    private int _replication_factor;

    public List<global::StormThrift.AccessControl> Acl { get; set; }

    public int Replication_factor
    {
      get
      {
        return _replication_factor;
      }
      set
      {
        __isset.replication_factor = true;
        this._replication_factor = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool replication_factor;
    }

    public SettableBlobMeta()
    {
    }

    public SettableBlobMeta(List<global::StormThrift.AccessControl> acl) : this()
    {
      this.Acl = acl;
    }

    public SettableBlobMeta DeepCopy()
    {
      var tmp473 = new SettableBlobMeta();
      if((Acl != null))
      {
        tmp473.Acl = this.Acl.DeepCopy();
      }
      if(__isset.replication_factor)
      {
        tmp473.Replication_factor = this.Replication_factor;
      }
      tmp473.__isset.replication_factor = this.__isset.replication_factor;
      return tmp473;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_acl = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list474 = await iprot.ReadListBeginAsync(cancellationToken);
                  Acl = new List<global::StormThrift.AccessControl>(_list474.Count);
                  for(int _i475 = 0; _i475 < _list474.Count; ++_i475)
                  {
                    global::StormThrift.AccessControl _elem476;
                    _elem476 = new global::StormThrift.AccessControl();
                    await _elem476.ReadAsync(iprot, cancellationToken);
                    Acl.Add(_elem476);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_acl = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Replication_factor = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_acl)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp477 = new TStruct("SettableBlobMeta");
        await oprot.WriteStructBeginAsync(tmp477, cancellationToken);
        var tmp478 = new TField();
        if((Acl != null))
        {
          tmp478.Name = "acl";
          tmp478.Type = TType.List;
          tmp478.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp478, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Acl.Count), cancellationToken);
            foreach (global::StormThrift.AccessControl _iter479 in Acl)
            {
              await _iter479.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.replication_factor)
        {
          tmp478.Name = "replication_factor";
          tmp478.Type = TType.I32;
          tmp478.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp478, cancellationToken);
          await oprot.WriteI32Async(Replication_factor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SettableBlobMeta other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Acl, other.Acl)
        && ((__isset.replication_factor == other.__isset.replication_factor) && ((!__isset.replication_factor) || (global::System.Object.Equals(Replication_factor, other.Replication_factor))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Acl != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Acl);
        }
        if(__isset.replication_factor)
        {
          hashcode = (hashcode * 397) + Replication_factor.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp480 = new StringBuilder("SettableBlobMeta(");
      if((Acl != null))
      {
        tmp480.Append(", Acl: ");
        Acl.ToString(tmp480);
      }
      if(__isset.replication_factor)
      {
        tmp480.Append(", Replication_factor: ");
        Replication_factor.ToString(tmp480);
      }
      tmp480.Append(')');
      return tmp480.ToString();
    }
  }

}
