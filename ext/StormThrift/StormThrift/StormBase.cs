/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class StormBase : TBase
  {
    private Dictionary<string, int> _component_executors;
    private int _launch_time_secs;
    private string _owner;
    private global::StormThrift.TopologyActionOptions _topology_action_options;
    private global::StormThrift.TopologyStatus _prev_status;
    private Dictionary<string, global::StormThrift.DebugOptions> _component_debug;

    public string Name { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.TopologyStatus"/>
    /// </summary>
    public global::StormThrift.TopologyStatus Status { get; set; }

    public int Num_workers { get; set; }

    public Dictionary<string, int> Component_executors
    {
      get
      {
        return _component_executors;
      }
      set
      {
        __isset.component_executors = true;
        this._component_executors = value;
      }
    }

    public int Launch_time_secs
    {
      get
      {
        return _launch_time_secs;
      }
      set
      {
        __isset.launch_time_secs = true;
        this._launch_time_secs = value;
      }
    }

    public string Owner
    {
      get
      {
        return _owner;
      }
      set
      {
        __isset.owner = true;
        this._owner = value;
      }
    }

    public global::StormThrift.TopologyActionOptions Topology_action_options
    {
      get
      {
        return _topology_action_options;
      }
      set
      {
        __isset.topology_action_options = true;
        this._topology_action_options = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.TopologyStatus"/>
    /// </summary>
    public global::StormThrift.TopologyStatus Prev_status
    {
      get
      {
        return _prev_status;
      }
      set
      {
        __isset.prev_status = true;
        this._prev_status = value;
      }
    }

    public Dictionary<string, global::StormThrift.DebugOptions> Component_debug
    {
      get
      {
        return _component_debug;
      }
      set
      {
        __isset.component_debug = true;
        this._component_debug = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool component_executors;
      public bool launch_time_secs;
      public bool owner;
      public bool topology_action_options;
      public bool prev_status;
      public bool component_debug;
    }

    public StormBase()
    {
    }

    public StormBase(string name, global::StormThrift.TopologyStatus status, int num_workers) : this()
    {
      this.Name = name;
      this.Status = status;
      this.Num_workers = num_workers;
    }

    public StormBase DeepCopy()
    {
      var tmp576 = new StormBase();
      if((Name != null))
      {
        tmp576.Name = this.Name;
      }
      tmp576.Status = this.Status;
      tmp576.Num_workers = this.Num_workers;
      if((Component_executors != null) && __isset.component_executors)
      {
        tmp576.Component_executors = this.Component_executors.DeepCopy();
      }
      tmp576.__isset.component_executors = this.__isset.component_executors;
      if(__isset.launch_time_secs)
      {
        tmp576.Launch_time_secs = this.Launch_time_secs;
      }
      tmp576.__isset.launch_time_secs = this.__isset.launch_time_secs;
      if((Owner != null) && __isset.owner)
      {
        tmp576.Owner = this.Owner;
      }
      tmp576.__isset.owner = this.__isset.owner;
      if((Topology_action_options != null) && __isset.topology_action_options)
      {
        tmp576.Topology_action_options = (global::StormThrift.TopologyActionOptions)this.Topology_action_options.DeepCopy();
      }
      tmp576.__isset.topology_action_options = this.__isset.topology_action_options;
      if(__isset.prev_status)
      {
        tmp576.Prev_status = this.Prev_status;
      }
      tmp576.__isset.prev_status = this.__isset.prev_status;
      if((Component_debug != null) && __isset.component_debug)
      {
        tmp576.Component_debug = this.Component_debug.DeepCopy();
      }
      tmp576.__isset.component_debug = this.__isset.component_debug;
      return tmp576;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_status = false;
        bool isset_num_workers = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Status = (global::StormThrift.TopologyStatus)await iprot.ReadI32Async(cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Num_workers = await iprot.ReadI32Async(cancellationToken);
                isset_num_workers = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map577 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Component_executors = new Dictionary<string, int>(_map577.Count);
                  for(int _i578 = 0; _i578 < _map577.Count; ++_i578)
                  {
                    string _key579;
                    int _val580;
                    _key579 = await iprot.ReadStringAsync(cancellationToken);
                    _val580 = await iprot.ReadI32Async(cancellationToken);
                    Component_executors[_key579] = _val580;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Launch_time_secs = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Owner = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Topology_action_options = new global::StormThrift.TopologyActionOptions();
                await Topology_action_options.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Prev_status = (global::StormThrift.TopologyStatus)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map581 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Component_debug = new Dictionary<string, global::StormThrift.DebugOptions>(_map581.Count);
                  for(int _i582 = 0; _i582 < _map581.Count; ++_i582)
                  {
                    string _key583;
                    global::StormThrift.DebugOptions _val584;
                    _key583 = await iprot.ReadStringAsync(cancellationToken);
                    _val584 = new global::StormThrift.DebugOptions();
                    await _val584.ReadAsync(iprot, cancellationToken);
                    Component_debug[_key583] = _val584;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_workers)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp585 = new TStruct("StormBase");
        await oprot.WriteStructBeginAsync(tmp585, cancellationToken);
        var tmp586 = new TField();
        if((Name != null))
        {
          tmp586.Name = "name";
          tmp586.Type = TType.String;
          tmp586.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp586.Name = "status";
        tmp586.Type = TType.I32;
        tmp586.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
        await oprot.WriteI32Async((int)Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp586.Name = "num_workers";
        tmp586.Type = TType.I32;
        tmp586.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
        await oprot.WriteI32Async(Num_workers, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Component_executors != null) && __isset.component_executors)
        {
          tmp586.Name = "component_executors";
          tmp586.Type = TType.Map;
          tmp586.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Component_executors.Count), cancellationToken);
            foreach (string _iter587 in Component_executors.Keys)
            {
              await oprot.WriteStringAsync(_iter587, cancellationToken);
              await oprot.WriteI32Async(Component_executors[_iter587], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.launch_time_secs)
        {
          tmp586.Name = "launch_time_secs";
          tmp586.Type = TType.I32;
          tmp586.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          await oprot.WriteI32Async(Launch_time_secs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Owner != null) && __isset.owner)
        {
          tmp586.Name = "owner";
          tmp586.Type = TType.String;
          tmp586.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          await oprot.WriteStringAsync(Owner, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Topology_action_options != null) && __isset.topology_action_options)
        {
          tmp586.Name = "topology_action_options";
          tmp586.Type = TType.Struct;
          tmp586.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          await Topology_action_options.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.prev_status)
        {
          tmp586.Name = "prev_status";
          tmp586.Type = TType.I32;
          tmp586.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          await oprot.WriteI32Async((int)Prev_status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Component_debug != null) && __isset.component_debug)
        {
          tmp586.Name = "component_debug";
          tmp586.Type = TType.Map;
          tmp586.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Component_debug.Count), cancellationToken);
            foreach (string _iter588 in Component_debug.Keys)
            {
              await oprot.WriteStringAsync(_iter588, cancellationToken);
              await Component_debug[_iter588].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StormBase other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Name, other.Name)
        && global::System.Object.Equals(Status, other.Status)
        && global::System.Object.Equals(Num_workers, other.Num_workers)
        && ((__isset.component_executors == other.__isset.component_executors) && ((!__isset.component_executors) || (TCollections.Equals(Component_executors, other.Component_executors))))
        && ((__isset.launch_time_secs == other.__isset.launch_time_secs) && ((!__isset.launch_time_secs) || (global::System.Object.Equals(Launch_time_secs, other.Launch_time_secs))))
        && ((__isset.owner == other.__isset.owner) && ((!__isset.owner) || (global::System.Object.Equals(Owner, other.Owner))))
        && ((__isset.topology_action_options == other.__isset.topology_action_options) && ((!__isset.topology_action_options) || (global::System.Object.Equals(Topology_action_options, other.Topology_action_options))))
        && ((__isset.prev_status == other.__isset.prev_status) && ((!__isset.prev_status) || (global::System.Object.Equals(Prev_status, other.Prev_status))))
        && ((__isset.component_debug == other.__isset.component_debug) && ((!__isset.component_debug) || (TCollections.Equals(Component_debug, other.Component_debug))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null))
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        hashcode = (hashcode * 397) + Status.GetHashCode();
        hashcode = (hashcode * 397) + Num_workers.GetHashCode();
        if((Component_executors != null) && __isset.component_executors)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Component_executors);
        }
        if(__isset.launch_time_secs)
        {
          hashcode = (hashcode * 397) + Launch_time_secs.GetHashCode();
        }
        if((Owner != null) && __isset.owner)
        {
          hashcode = (hashcode * 397) + Owner.GetHashCode();
        }
        if((Topology_action_options != null) && __isset.topology_action_options)
        {
          hashcode = (hashcode * 397) + Topology_action_options.GetHashCode();
        }
        if(__isset.prev_status)
        {
          hashcode = (hashcode * 397) + Prev_status.GetHashCode();
        }
        if((Component_debug != null) && __isset.component_debug)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Component_debug);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp589 = new StringBuilder("StormBase(");
      if((Name != null))
      {
        tmp589.Append(", Name: ");
        Name.ToString(tmp589);
      }
      tmp589.Append(", Status: ");
      Status.ToString(tmp589);
      tmp589.Append(", Num_workers: ");
      Num_workers.ToString(tmp589);
      if((Component_executors != null) && __isset.component_executors)
      {
        tmp589.Append(", Component_executors: ");
        Component_executors.ToString(tmp589);
      }
      if(__isset.launch_time_secs)
      {
        tmp589.Append(", Launch_time_secs: ");
        Launch_time_secs.ToString(tmp589);
      }
      if((Owner != null) && __isset.owner)
      {
        tmp589.Append(", Owner: ");
        Owner.ToString(tmp589);
      }
      if((Topology_action_options != null) && __isset.topology_action_options)
      {
        tmp589.Append(", Topology_action_options: ");
        Topology_action_options.ToString(tmp589);
      }
      if(__isset.prev_status)
      {
        tmp589.Append(", Prev_status: ");
        Prev_status.ToString(tmp589);
      }
      if((Component_debug != null) && __isset.component_debug)
      {
        tmp589.Append(", Component_debug: ");
        Component_debug.ToString(tmp589);
      }
      tmp589.Append(')');
      return tmp589.ToString();
    }
  }

}
