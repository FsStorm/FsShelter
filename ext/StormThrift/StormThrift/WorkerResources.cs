/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class WorkerResources : TBase
  {
    private double _mem_on_heap;
    private double _mem_off_heap;
    private double _cpu;

    public double Mem_on_heap
    {
      get
      {
        return _mem_on_heap;
      }
      set
      {
        __isset.mem_on_heap = true;
        this._mem_on_heap = value;
      }
    }

    public double Mem_off_heap
    {
      get
      {
        return _mem_off_heap;
      }
      set
      {
        __isset.mem_off_heap = true;
        this._mem_off_heap = value;
      }
    }

    public double Cpu
    {
      get
      {
        return _cpu;
      }
      set
      {
        __isset.cpu = true;
        this._cpu = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool mem_on_heap;
      public bool mem_off_heap;
      public bool cpu;
    }

    public WorkerResources()
    {
    }

    public WorkerResources DeepCopy()
    {
      var tmp533 = new WorkerResources();
      if(__isset.mem_on_heap)
      {
        tmp533.Mem_on_heap = this.Mem_on_heap;
      }
      tmp533.__isset.mem_on_heap = this.__isset.mem_on_heap;
      if(__isset.mem_off_heap)
      {
        tmp533.Mem_off_heap = this.Mem_off_heap;
      }
      tmp533.__isset.mem_off_heap = this.__isset.mem_off_heap;
      if(__isset.cpu)
      {
        tmp533.Cpu = this.Cpu;
      }
      tmp533.__isset.cpu = this.__isset.cpu;
      return tmp533;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double)
              {
                Mem_on_heap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                Mem_off_heap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                Cpu = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp534 = new TStruct("WorkerResources");
        await oprot.WriteStructBeginAsync(tmp534, cancellationToken);
        var tmp535 = new TField();
        if(__isset.mem_on_heap)
        {
          tmp535.Name = "mem_on_heap";
          tmp535.Type = TType.Double;
          tmp535.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp535, cancellationToken);
          await oprot.WriteDoubleAsync(Mem_on_heap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.mem_off_heap)
        {
          tmp535.Name = "mem_off_heap";
          tmp535.Type = TType.Double;
          tmp535.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp535, cancellationToken);
          await oprot.WriteDoubleAsync(Mem_off_heap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.cpu)
        {
          tmp535.Name = "cpu";
          tmp535.Type = TType.Double;
          tmp535.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp535, cancellationToken);
          await oprot.WriteDoubleAsync(Cpu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is WorkerResources other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.mem_on_heap == other.__isset.mem_on_heap) && ((!__isset.mem_on_heap) || (global::System.Object.Equals(Mem_on_heap, other.Mem_on_heap))))
        && ((__isset.mem_off_heap == other.__isset.mem_off_heap) && ((!__isset.mem_off_heap) || (global::System.Object.Equals(Mem_off_heap, other.Mem_off_heap))))
        && ((__isset.cpu == other.__isset.cpu) && ((!__isset.cpu) || (global::System.Object.Equals(Cpu, other.Cpu))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.mem_on_heap)
        {
          hashcode = (hashcode * 397) + Mem_on_heap.GetHashCode();
        }
        if(__isset.mem_off_heap)
        {
          hashcode = (hashcode * 397) + Mem_off_heap.GetHashCode();
        }
        if(__isset.cpu)
        {
          hashcode = (hashcode * 397) + Cpu.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp536 = new StringBuilder("WorkerResources(");
      int tmp537 = 0;
      if(__isset.mem_on_heap)
      {
        if(0 < tmp537++) { tmp536.Append(", "); }
        tmp536.Append("Mem_on_heap: ");
        Mem_on_heap.ToString(tmp536);
      }
      if(__isset.mem_off_heap)
      {
        if(0 < tmp537++) { tmp536.Append(", "); }
        tmp536.Append("Mem_off_heap: ");
        Mem_off_heap.ToString(tmp536);
      }
      if(__isset.cpu)
      {
        if(0 < tmp537++) { tmp536.Append(", "); }
        tmp536.Append("Cpu: ");
        Cpu.ToString(tmp536);
      }
      tmp536.Append(')');
      return tmp536.ToString();
    }
  }

}
