/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class TopologyStats : TBase
  {
    private Dictionary<string, long> _window_to_emitted;
    private Dictionary<string, long> _window_to_transferred;
    private Dictionary<string, double> _window_to_complete_latencies_ms;
    private Dictionary<string, long> _window_to_acked;
    private Dictionary<string, long> _window_to_failed;

    public Dictionary<string, long> Window_to_emitted
    {
      get
      {
        return _window_to_emitted;
      }
      set
      {
        __isset.window_to_emitted = true;
        this._window_to_emitted = value;
      }
    }

    public Dictionary<string, long> Window_to_transferred
    {
      get
      {
        return _window_to_transferred;
      }
      set
      {
        __isset.window_to_transferred = true;
        this._window_to_transferred = value;
      }
    }

    public Dictionary<string, double> Window_to_complete_latencies_ms
    {
      get
      {
        return _window_to_complete_latencies_ms;
      }
      set
      {
        __isset.window_to_complete_latencies_ms = true;
        this._window_to_complete_latencies_ms = value;
      }
    }

    public Dictionary<string, long> Window_to_acked
    {
      get
      {
        return _window_to_acked;
      }
      set
      {
        __isset.window_to_acked = true;
        this._window_to_acked = value;
      }
    }

    public Dictionary<string, long> Window_to_failed
    {
      get
      {
        return _window_to_failed;
      }
      set
      {
        __isset.window_to_failed = true;
        this._window_to_failed = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool window_to_emitted;
      public bool window_to_transferred;
      public bool window_to_complete_latencies_ms;
      public bool window_to_acked;
      public bool window_to_failed;
    }

    public TopologyStats()
    {
    }

    public TopologyStats DeepCopy()
    {
      var tmp360 = new TopologyStats();
      if((Window_to_emitted != null) && __isset.window_to_emitted)
      {
        tmp360.Window_to_emitted = this.Window_to_emitted.DeepCopy();
      }
      tmp360.__isset.window_to_emitted = this.__isset.window_to_emitted;
      if((Window_to_transferred != null) && __isset.window_to_transferred)
      {
        tmp360.Window_to_transferred = this.Window_to_transferred.DeepCopy();
      }
      tmp360.__isset.window_to_transferred = this.__isset.window_to_transferred;
      if((Window_to_complete_latencies_ms != null) && __isset.window_to_complete_latencies_ms)
      {
        tmp360.Window_to_complete_latencies_ms = this.Window_to_complete_latencies_ms.DeepCopy();
      }
      tmp360.__isset.window_to_complete_latencies_ms = this.__isset.window_to_complete_latencies_ms;
      if((Window_to_acked != null) && __isset.window_to_acked)
      {
        tmp360.Window_to_acked = this.Window_to_acked.DeepCopy();
      }
      tmp360.__isset.window_to_acked = this.__isset.window_to_acked;
      if((Window_to_failed != null) && __isset.window_to_failed)
      {
        tmp360.Window_to_failed = this.Window_to_failed.DeepCopy();
      }
      tmp360.__isset.window_to_failed = this.__isset.window_to_failed;
      return tmp360;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map361 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_emitted = new Dictionary<string, long>(_map361.Count);
                  for(int _i362 = 0; _i362 < _map361.Count; ++_i362)
                  {
                    string _key363;
                    long _val364;
                    _key363 = await iprot.ReadStringAsync(cancellationToken);
                    _val364 = await iprot.ReadI64Async(cancellationToken);
                    Window_to_emitted[_key363] = _val364;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map365 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_transferred = new Dictionary<string, long>(_map365.Count);
                  for(int _i366 = 0; _i366 < _map365.Count; ++_i366)
                  {
                    string _key367;
                    long _val368;
                    _key367 = await iprot.ReadStringAsync(cancellationToken);
                    _val368 = await iprot.ReadI64Async(cancellationToken);
                    Window_to_transferred[_key367] = _val368;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map369 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_complete_latencies_ms = new Dictionary<string, double>(_map369.Count);
                  for(int _i370 = 0; _i370 < _map369.Count; ++_i370)
                  {
                    string _key371;
                    double _val372;
                    _key371 = await iprot.ReadStringAsync(cancellationToken);
                    _val372 = await iprot.ReadDoubleAsync(cancellationToken);
                    Window_to_complete_latencies_ms[_key371] = _val372;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map373 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_acked = new Dictionary<string, long>(_map373.Count);
                  for(int _i374 = 0; _i374 < _map373.Count; ++_i374)
                  {
                    string _key375;
                    long _val376;
                    _key375 = await iprot.ReadStringAsync(cancellationToken);
                    _val376 = await iprot.ReadI64Async(cancellationToken);
                    Window_to_acked[_key375] = _val376;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map377 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Window_to_failed = new Dictionary<string, long>(_map377.Count);
                  for(int _i378 = 0; _i378 < _map377.Count; ++_i378)
                  {
                    string _key379;
                    long _val380;
                    _key379 = await iprot.ReadStringAsync(cancellationToken);
                    _val380 = await iprot.ReadI64Async(cancellationToken);
                    Window_to_failed[_key379] = _val380;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp381 = new TStruct("TopologyStats");
        await oprot.WriteStructBeginAsync(tmp381, cancellationToken);
        var tmp382 = new TField();
        if((Window_to_emitted != null) && __isset.window_to_emitted)
        {
          tmp382.Name = "window_to_emitted";
          tmp382.Type = TType.Map;
          tmp382.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Window_to_emitted.Count), cancellationToken);
            foreach (string _iter383 in Window_to_emitted.Keys)
            {
              await oprot.WriteStringAsync(_iter383, cancellationToken);
              await oprot.WriteI64Async(Window_to_emitted[_iter383], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Window_to_transferred != null) && __isset.window_to_transferred)
        {
          tmp382.Name = "window_to_transferred";
          tmp382.Type = TType.Map;
          tmp382.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Window_to_transferred.Count), cancellationToken);
            foreach (string _iter384 in Window_to_transferred.Keys)
            {
              await oprot.WriteStringAsync(_iter384, cancellationToken);
              await oprot.WriteI64Async(Window_to_transferred[_iter384], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Window_to_complete_latencies_ms != null) && __isset.window_to_complete_latencies_ms)
        {
          tmp382.Name = "window_to_complete_latencies_ms";
          tmp382.Type = TType.Map;
          tmp382.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Double, Window_to_complete_latencies_ms.Count), cancellationToken);
            foreach (string _iter385 in Window_to_complete_latencies_ms.Keys)
            {
              await oprot.WriteStringAsync(_iter385, cancellationToken);
              await oprot.WriteDoubleAsync(Window_to_complete_latencies_ms[_iter385], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Window_to_acked != null) && __isset.window_to_acked)
        {
          tmp382.Name = "window_to_acked";
          tmp382.Type = TType.Map;
          tmp382.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Window_to_acked.Count), cancellationToken);
            foreach (string _iter386 in Window_to_acked.Keys)
            {
              await oprot.WriteStringAsync(_iter386, cancellationToken);
              await oprot.WriteI64Async(Window_to_acked[_iter386], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Window_to_failed != null) && __isset.window_to_failed)
        {
          tmp382.Name = "window_to_failed";
          tmp382.Type = TType.Map;
          tmp382.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp382, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Window_to_failed.Count), cancellationToken);
            foreach (string _iter387 in Window_to_failed.Keys)
            {
              await oprot.WriteStringAsync(_iter387, cancellationToken);
              await oprot.WriteI64Async(Window_to_failed[_iter387], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TopologyStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.window_to_emitted == other.__isset.window_to_emitted) && ((!__isset.window_to_emitted) || (TCollections.Equals(Window_to_emitted, other.Window_to_emitted))))
        && ((__isset.window_to_transferred == other.__isset.window_to_transferred) && ((!__isset.window_to_transferred) || (TCollections.Equals(Window_to_transferred, other.Window_to_transferred))))
        && ((__isset.window_to_complete_latencies_ms == other.__isset.window_to_complete_latencies_ms) && ((!__isset.window_to_complete_latencies_ms) || (TCollections.Equals(Window_to_complete_latencies_ms, other.Window_to_complete_latencies_ms))))
        && ((__isset.window_to_acked == other.__isset.window_to_acked) && ((!__isset.window_to_acked) || (TCollections.Equals(Window_to_acked, other.Window_to_acked))))
        && ((__isset.window_to_failed == other.__isset.window_to_failed) && ((!__isset.window_to_failed) || (TCollections.Equals(Window_to_failed, other.Window_to_failed))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Window_to_emitted != null) && __isset.window_to_emitted)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_emitted);
        }
        if((Window_to_transferred != null) && __isset.window_to_transferred)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_transferred);
        }
        if((Window_to_complete_latencies_ms != null) && __isset.window_to_complete_latencies_ms)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_complete_latencies_ms);
        }
        if((Window_to_acked != null) && __isset.window_to_acked)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_acked);
        }
        if((Window_to_failed != null) && __isset.window_to_failed)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Window_to_failed);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp388 = new StringBuilder("TopologyStats(");
      int tmp389 = 0;
      if((Window_to_emitted != null) && __isset.window_to_emitted)
      {
        if(0 < tmp389++) { tmp388.Append(", "); }
        tmp388.Append("Window_to_emitted: ");
        Window_to_emitted.ToString(tmp388);
      }
      if((Window_to_transferred != null) && __isset.window_to_transferred)
      {
        if(0 < tmp389++) { tmp388.Append(", "); }
        tmp388.Append("Window_to_transferred: ");
        Window_to_transferred.ToString(tmp388);
      }
      if((Window_to_complete_latencies_ms != null) && __isset.window_to_complete_latencies_ms)
      {
        if(0 < tmp389++) { tmp388.Append(", "); }
        tmp388.Append("Window_to_complete_latencies_ms: ");
        Window_to_complete_latencies_ms.ToString(tmp388);
      }
      if((Window_to_acked != null) && __isset.window_to_acked)
      {
        if(0 < tmp389++) { tmp388.Append(", "); }
        tmp388.Append("Window_to_acked: ");
        Window_to_acked.ToString(tmp388);
      }
      if((Window_to_failed != null) && __isset.window_to_failed)
      {
        if(0 < tmp389++) { tmp388.Append(", "); }
        tmp388.Append("Window_to_failed: ");
        Window_to_failed.ToString(tmp388);
      }
      tmp388.Append(')');
      return tmp388.ToString();
    }
  }

}
