/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ClusterSummary : TBase
  {
    private int _nimbus_uptime_secs;

    public List<global::StormThrift.SupervisorSummary> Supervisors { get; set; }

    public int Nimbus_uptime_secs
    {
      get
      {
        return _nimbus_uptime_secs;
      }
      set
      {
        __isset.nimbus_uptime_secs = true;
        this._nimbus_uptime_secs = value;
      }
    }

    public List<global::StormThrift.TopologySummary> Topologies { get; set; }

    public List<global::StormThrift.NimbusSummary> Nimbuses { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool nimbus_uptime_secs;
    }

    public ClusterSummary()
    {
      this._nimbus_uptime_secs = 0;
      this.__isset.nimbus_uptime_secs = true;
    }

    public ClusterSummary(List<global::StormThrift.SupervisorSummary> supervisors, List<global::StormThrift.TopologySummary> topologies, List<global::StormThrift.NimbusSummary> nimbuses) : this()
    {
      this.Supervisors = supervisors;
      this.Topologies = topologies;
      this.Nimbuses = nimbuses;
    }

    public ClusterSummary DeepCopy()
    {
      var tmp155 = new ClusterSummary();
      if((Supervisors != null))
      {
        tmp155.Supervisors = this.Supervisors.DeepCopy();
      }
      if(__isset.nimbus_uptime_secs)
      {
        tmp155.Nimbus_uptime_secs = this.Nimbus_uptime_secs;
      }
      tmp155.__isset.nimbus_uptime_secs = this.__isset.nimbus_uptime_secs;
      if((Topologies != null))
      {
        tmp155.Topologies = this.Topologies.DeepCopy();
      }
      if((Nimbuses != null))
      {
        tmp155.Nimbuses = this.Nimbuses.DeepCopy();
      }
      return tmp155;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_supervisors = false;
        bool isset_topologies = false;
        bool isset_nimbuses = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list156 = await iprot.ReadListBeginAsync(cancellationToken);
                  Supervisors = new List<global::StormThrift.SupervisorSummary>(_list156.Count);
                  for(int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    global::StormThrift.SupervisorSummary _elem158;
                    _elem158 = new global::StormThrift.SupervisorSummary();
                    await _elem158.ReadAsync(iprot, cancellationToken);
                    Supervisors.Add(_elem158);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_supervisors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Nimbus_uptime_secs = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list159 = await iprot.ReadListBeginAsync(cancellationToken);
                  Topologies = new List<global::StormThrift.TopologySummary>(_list159.Count);
                  for(int _i160 = 0; _i160 < _list159.Count; ++_i160)
                  {
                    global::StormThrift.TopologySummary _elem161;
                    _elem161 = new global::StormThrift.TopologySummary();
                    await _elem161.ReadAsync(iprot, cancellationToken);
                    Topologies.Add(_elem161);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_topologies = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list162 = await iprot.ReadListBeginAsync(cancellationToken);
                  Nimbuses = new List<global::StormThrift.NimbusSummary>(_list162.Count);
                  for(int _i163 = 0; _i163 < _list162.Count; ++_i163)
                  {
                    global::StormThrift.NimbusSummary _elem164;
                    _elem164 = new global::StormThrift.NimbusSummary();
                    await _elem164.ReadAsync(iprot, cancellationToken);
                    Nimbuses.Add(_elem164);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_nimbuses = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_supervisors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_topologies)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_nimbuses)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp165 = new TStruct("ClusterSummary");
        await oprot.WriteStructBeginAsync(tmp165, cancellationToken);
        var tmp166 = new TField();
        if((Supervisors != null))
        {
          tmp166.Name = "supervisors";
          tmp166.Type = TType.List;
          tmp166.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp166, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Supervisors.Count), cancellationToken);
            foreach (global::StormThrift.SupervisorSummary _iter167 in Supervisors)
            {
              await _iter167.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.nimbus_uptime_secs)
        {
          tmp166.Name = "nimbus_uptime_secs";
          tmp166.Type = TType.I32;
          tmp166.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp166, cancellationToken);
          await oprot.WriteI32Async(Nimbus_uptime_secs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Topologies != null))
        {
          tmp166.Name = "topologies";
          tmp166.Type = TType.List;
          tmp166.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp166, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Topologies.Count), cancellationToken);
            foreach (global::StormThrift.TopologySummary _iter168 in Topologies)
            {
              await _iter168.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Nimbuses != null))
        {
          tmp166.Name = "nimbuses";
          tmp166.Type = TType.List;
          tmp166.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp166, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Nimbuses.Count), cancellationToken);
            foreach (global::StormThrift.NimbusSummary _iter169 in Nimbuses)
            {
              await _iter169.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ClusterSummary other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Supervisors, other.Supervisors)
        && ((__isset.nimbus_uptime_secs == other.__isset.nimbus_uptime_secs) && ((!__isset.nimbus_uptime_secs) || (global::System.Object.Equals(Nimbus_uptime_secs, other.Nimbus_uptime_secs))))
        && TCollections.Equals(Topologies, other.Topologies)
        && TCollections.Equals(Nimbuses, other.Nimbuses);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Supervisors != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Supervisors);
        }
        if(__isset.nimbus_uptime_secs)
        {
          hashcode = (hashcode * 397) + Nimbus_uptime_secs.GetHashCode();
        }
        if((Topologies != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Topologies);
        }
        if((Nimbuses != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Nimbuses);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp170 = new StringBuilder("ClusterSummary(");
      if((Supervisors != null))
      {
        tmp170.Append(", Supervisors: ");
        Supervisors.ToString(tmp170);
      }
      if(__isset.nimbus_uptime_secs)
      {
        tmp170.Append(", Nimbus_uptime_secs: ");
        Nimbus_uptime_secs.ToString(tmp170);
      }
      if((Topologies != null))
      {
        tmp170.Append(", Topologies: ");
        Topologies.ToString(tmp170);
      }
      if((Nimbuses != null))
      {
        tmp170.Append(", Nimbuses: ");
        Nimbuses.ToString(tmp170);
      }
      tmp170.Append(')');
      return tmp170.ToString();
    }
  }

}
