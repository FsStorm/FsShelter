/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ComponentCommon : TBase
  {
    private int _parallelism_hint;
    private string _json_conf;

    public Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.Grouping> Inputs { get; set; }

    public Dictionary<string, global::StormThrift.StreamInfo> Streams { get; set; }

    public int Parallelism_hint
    {
      get
      {
        return _parallelism_hint;
      }
      set
      {
        __isset.parallelism_hint = true;
        this._parallelism_hint = value;
      }
    }

    public string Json_conf
    {
      get
      {
        return _json_conf;
      }
      set
      {
        __isset.json_conf = true;
        this._json_conf = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool parallelism_hint;
      public bool json_conf;
    }

    public ComponentCommon()
    {
    }

    public ComponentCommon(Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.Grouping> inputs, Dictionary<string, global::StormThrift.StreamInfo> streams) : this()
    {
      this.Inputs = inputs;
      this.Streams = streams;
    }

    public ComponentCommon DeepCopy()
    {
      var tmp51 = new ComponentCommon();
      if((Inputs != null))
      {
        tmp51.Inputs = this.Inputs.DeepCopy();
      }
      if((Streams != null))
      {
        tmp51.Streams = this.Streams.DeepCopy();
      }
      if(__isset.parallelism_hint)
      {
        tmp51.Parallelism_hint = this.Parallelism_hint;
      }
      tmp51.__isset.parallelism_hint = this.__isset.parallelism_hint;
      if((Json_conf != null) && __isset.json_conf)
      {
        tmp51.Json_conf = this.Json_conf;
      }
      tmp51.__isset.json_conf = this.__isset.json_conf;
      return tmp51;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_inputs = false;
        bool isset_streams = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map52 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Inputs = new Dictionary<global::StormThrift.GlobalStreamId, global::StormThrift.Grouping>(_map52.Count);
                  for(int _i53 = 0; _i53 < _map52.Count; ++_i53)
                  {
                    global::StormThrift.GlobalStreamId _key54;
                    global::StormThrift.Grouping _val55;
                    _key54 = new global::StormThrift.GlobalStreamId();
                    await _key54.ReadAsync(iprot, cancellationToken);
                    _val55 = new global::StormThrift.Grouping();
                    await _val55.ReadAsync(iprot, cancellationToken);
                    Inputs[_key54] = _val55;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_inputs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map56 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Streams = new Dictionary<string, global::StormThrift.StreamInfo>(_map56.Count);
                  for(int _i57 = 0; _i57 < _map56.Count; ++_i57)
                  {
                    string _key58;
                    global::StormThrift.StreamInfo _val59;
                    _key58 = await iprot.ReadStringAsync(cancellationToken);
                    _val59 = new global::StormThrift.StreamInfo();
                    await _val59.ReadAsync(iprot, cancellationToken);
                    Streams[_key58] = _val59;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_streams = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Parallelism_hint = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Json_conf = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_inputs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_streams)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp60 = new TStruct("ComponentCommon");
        await oprot.WriteStructBeginAsync(tmp60, cancellationToken);
        var tmp61 = new TField();
        if((Inputs != null))
        {
          tmp61.Name = "inputs";
          tmp61.Type = TType.Map;
          tmp61.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.Struct, TType.Struct, Inputs.Count), cancellationToken);
            foreach (global::StormThrift.GlobalStreamId _iter62 in Inputs.Keys)
            {
              await _iter62.WriteAsync(oprot, cancellationToken);
              await Inputs[_iter62].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Streams != null))
        {
          tmp61.Name = "streams";
          tmp61.Type = TType.Map;
          tmp61.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Streams.Count), cancellationToken);
            foreach (string _iter63 in Streams.Keys)
            {
              await oprot.WriteStringAsync(_iter63, cancellationToken);
              await Streams[_iter63].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.parallelism_hint)
        {
          tmp61.Name = "parallelism_hint";
          tmp61.Type = TType.I32;
          tmp61.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
          await oprot.WriteI32Async(Parallelism_hint, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Json_conf != null) && __isset.json_conf)
        {
          tmp61.Name = "json_conf";
          tmp61.Type = TType.String;
          tmp61.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
          await oprot.WriteStringAsync(Json_conf, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ComponentCommon other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Inputs, other.Inputs)
        && TCollections.Equals(Streams, other.Streams)
        && ((__isset.parallelism_hint == other.__isset.parallelism_hint) && ((!__isset.parallelism_hint) || (global::System.Object.Equals(Parallelism_hint, other.Parallelism_hint))))
        && ((__isset.json_conf == other.__isset.json_conf) && ((!__isset.json_conf) || (global::System.Object.Equals(Json_conf, other.Json_conf))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Inputs != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Inputs);
        }
        if((Streams != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Streams);
        }
        if(__isset.parallelism_hint)
        {
          hashcode = (hashcode * 397) + Parallelism_hint.GetHashCode();
        }
        if((Json_conf != null) && __isset.json_conf)
        {
          hashcode = (hashcode * 397) + Json_conf.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp64 = new StringBuilder("ComponentCommon(");
      if((Inputs != null))
      {
        tmp64.Append(", Inputs: ");
        Inputs.ToString(tmp64);
      }
      if((Streams != null))
      {
        tmp64.Append(", Streams: ");
        Streams.ToString(tmp64);
      }
      if(__isset.parallelism_hint)
      {
        tmp64.Append(", Parallelism_hint: ");
        Parallelism_hint.ToString(tmp64);
      }
      if((Json_conf != null) && __isset.json_conf)
      {
        tmp64.Append(", Json_conf: ");
        Json_conf.ToString(tmp64);
      }
      tmp64.Append(')');
      return tmp64.ToString();
    }
  }

}
