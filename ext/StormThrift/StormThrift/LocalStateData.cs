/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LocalStateData : TBase
  {

    public Dictionary<string, global::StormThrift.ThriftSerializedObject> Serialized_parts { get; set; }

    public LocalStateData()
    {
    }

    public LocalStateData(Dictionary<string, global::StormThrift.ThriftSerializedObject> serialized_parts) : this()
    {
      this.Serialized_parts = serialized_parts;
    }

    public LocalStateData DeepCopy()
    {
      var tmp606 = new LocalStateData();
      if((Serialized_parts != null))
      {
        tmp606.Serialized_parts = this.Serialized_parts.DeepCopy();
      }
      return tmp606;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serialized_parts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map607 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Serialized_parts = new Dictionary<string, global::StormThrift.ThriftSerializedObject>(_map607.Count);
                  for(int _i608 = 0; _i608 < _map607.Count; ++_i608)
                  {
                    string _key609;
                    global::StormThrift.ThriftSerializedObject _val610;
                    _key609 = await iprot.ReadStringAsync(cancellationToken);
                    _val610 = new global::StormThrift.ThriftSerializedObject();
                    await _val610.ReadAsync(iprot, cancellationToken);
                    Serialized_parts[_key609] = _val610;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_serialized_parts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_serialized_parts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp611 = new TStruct("LocalStateData");
        await oprot.WriteStructBeginAsync(tmp611, cancellationToken);
        var tmp612 = new TField();
        if((Serialized_parts != null))
        {
          tmp612.Name = "serialized_parts";
          tmp612.Type = TType.Map;
          tmp612.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp612, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Serialized_parts.Count), cancellationToken);
            foreach (string _iter613 in Serialized_parts.Keys)
            {
              await oprot.WriteStringAsync(_iter613, cancellationToken);
              await Serialized_parts[_iter613].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LocalStateData other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Serialized_parts, other.Serialized_parts);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Serialized_parts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Serialized_parts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp614 = new StringBuilder("LocalStateData(");
      if((Serialized_parts != null))
      {
        tmp614.Append(", Serialized_parts: ");
        Serialized_parts.ToString(tmp614);
      }
      tmp614.Append(')');
      return tmp614.ToString();
    }
  }

}
