/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class StreamInfo : TBase
  {

    public List<string> Output_fields { get; set; }

    public bool Direct { get; set; }

    public StreamInfo()
    {
    }

    public StreamInfo(List<string> output_fields, bool direct) : this()
    {
      this.Output_fields = output_fields;
      this.Direct = direct;
    }

    public StreamInfo DeepCopy()
    {
      var tmp32 = new StreamInfo();
      if((Output_fields != null))
      {
        tmp32.Output_fields = this.Output_fields.DeepCopy();
      }
      tmp32.Direct = this.Direct;
      return tmp32;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_output_fields = false;
        bool isset_direct = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list33 = await iprot.ReadListBeginAsync(cancellationToken);
                  Output_fields = new List<string>(_list33.Count);
                  for(int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    string _elem35;
                    _elem35 = await iprot.ReadStringAsync(cancellationToken);
                    Output_fields.Add(_elem35);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_output_fields = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Direct = await iprot.ReadBoolAsync(cancellationToken);
                isset_direct = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_output_fields)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_direct)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp36 = new TStruct("StreamInfo");
        await oprot.WriteStructBeginAsync(tmp36, cancellationToken);
        var tmp37 = new TField();
        if((Output_fields != null))
        {
          tmp37.Name = "output_fields";
          tmp37.Type = TType.List;
          tmp37.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Output_fields.Count), cancellationToken);
            foreach (string _iter38 in Output_fields)
            {
              await oprot.WriteStringAsync(_iter38, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp37.Name = "direct";
        tmp37.Type = TType.Bool;
        tmp37.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
        await oprot.WriteBoolAsync(Direct, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StreamInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Output_fields, other.Output_fields)
        && global::System.Object.Equals(Direct, other.Direct);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Output_fields != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Output_fields);
        }
        hashcode = (hashcode * 397) + Direct.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp39 = new StringBuilder("StreamInfo(");
      if((Output_fields != null))
      {
        tmp39.Append(", Output_fields: ");
        Output_fields.ToString(tmp39);
      }
      tmp39.Append(", Direct: ");
      Direct.ToString(tmp39);
      tmp39.Append(')');
      return tmp39.ToString();
    }
  }

}
