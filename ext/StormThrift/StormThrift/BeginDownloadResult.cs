/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class BeginDownloadResult : TBase
  {
    private long _data_size;

    public long Version { get; set; }

    public string Session { get; set; }

    public long Data_size
    {
      get
      {
        return _data_size;
      }
      set
      {
        __isset.data_size = true;
        this._data_size = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool data_size;
    }

    public BeginDownloadResult()
    {
    }

    public BeginDownloadResult(long version, string session) : this()
    {
      this.Version = version;
      this.Session = session;
    }

    public BeginDownloadResult DeepCopy()
    {
      var tmp496 = new BeginDownloadResult();
      tmp496.Version = this.Version;
      if((Session != null))
      {
        tmp496.Session = this.Session;
      }
      if(__isset.data_size)
      {
        tmp496.Data_size = this.Data_size;
      }
      tmp496.__isset.data_size = this.__isset.data_size;
      return tmp496;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_version = false;
        bool isset_session = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Version = await iprot.ReadI64Async(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Session = await iprot.ReadStringAsync(cancellationToken);
                isset_session = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Data_size = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_session)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp497 = new TStruct("BeginDownloadResult");
        await oprot.WriteStructBeginAsync(tmp497, cancellationToken);
        var tmp498 = new TField();
        tmp498.Name = "version";
        tmp498.Type = TType.I64;
        tmp498.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp498, cancellationToken);
        await oprot.WriteI64Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Session != null))
        {
          tmp498.Name = "session";
          tmp498.Type = TType.String;
          tmp498.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp498, cancellationToken);
          await oprot.WriteStringAsync(Session, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.data_size)
        {
          tmp498.Name = "data_size";
          tmp498.Type = TType.I64;
          tmp498.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp498, cancellationToken);
          await oprot.WriteI64Async(Data_size, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BeginDownloadResult other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Version, other.Version)
        && global::System.Object.Equals(Session, other.Session)
        && ((__isset.data_size == other.__isset.data_size) && ((!__isset.data_size) || (global::System.Object.Equals(Data_size, other.Data_size))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Version.GetHashCode();
        if((Session != null))
        {
          hashcode = (hashcode * 397) + Session.GetHashCode();
        }
        if(__isset.data_size)
        {
          hashcode = (hashcode * 397) + Data_size.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp499 = new StringBuilder("BeginDownloadResult(");
      tmp499.Append(", Version: ");
      Version.ToString(tmp499);
      if((Session != null))
      {
        tmp499.Append(", Session: ");
        Session.ToString(tmp499);
      }
      if(__isset.data_size)
      {
        tmp499.Append(", Data_size: ");
        Data_size.ToString(tmp499);
      }
      tmp499.Append(')');
      return tmp499.ToString();
    }
  }

}
