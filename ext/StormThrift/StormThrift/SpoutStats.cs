/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class SpoutStats : TBase
  {

    public Dictionary<string, Dictionary<string, long>> Acked { get; set; }

    public Dictionary<string, Dictionary<string, long>> Failed { get; set; }

    public Dictionary<string, Dictionary<string, double>> Complete_ms_avg { get; set; }

    public SpoutStats()
    {
    }

    public SpoutStats(Dictionary<string, Dictionary<string, long>> acked, Dictionary<string, Dictionary<string, long>> failed, Dictionary<string, Dictionary<string, double>> complete_ms_avg) : this()
    {
      this.Acked = acked;
      this.Failed = failed;
      this.Complete_ms_avg = complete_ms_avg;
    }

    public SpoutStats DeepCopy()
    {
      var tmp232 = new SpoutStats();
      if((Acked != null))
      {
        tmp232.Acked = this.Acked.DeepCopy();
      }
      if((Failed != null))
      {
        tmp232.Failed = this.Failed.DeepCopy();
      }
      if((Complete_ms_avg != null))
      {
        tmp232.Complete_ms_avg = this.Complete_ms_avg.DeepCopy();
      }
      return tmp232;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_acked = false;
        bool isset_failed = false;
        bool isset_complete_ms_avg = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map233 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Acked = new Dictionary<string, Dictionary<string, long>>(_map233.Count);
                  for(int _i234 = 0; _i234 < _map233.Count; ++_i234)
                  {
                    string _key235;
                    Dictionary<string, long> _val236;
                    _key235 = await iprot.ReadStringAsync(cancellationToken);
                    {
                      TMap _map237 = await iprot.ReadMapBeginAsync(cancellationToken);
                      _val236 = new Dictionary<string, long>(_map237.Count);
                      for(int _i238 = 0; _i238 < _map237.Count; ++_i238)
                      {
                        string _key239;
                        long _val240;
                        _key239 = await iprot.ReadStringAsync(cancellationToken);
                        _val240 = await iprot.ReadI64Async(cancellationToken);
                        _val236[_key239] = _val240;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                    Acked[_key235] = _val236;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_acked = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map241 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Failed = new Dictionary<string, Dictionary<string, long>>(_map241.Count);
                  for(int _i242 = 0; _i242 < _map241.Count; ++_i242)
                  {
                    string _key243;
                    Dictionary<string, long> _val244;
                    _key243 = await iprot.ReadStringAsync(cancellationToken);
                    {
                      TMap _map245 = await iprot.ReadMapBeginAsync(cancellationToken);
                      _val244 = new Dictionary<string, long>(_map245.Count);
                      for(int _i246 = 0; _i246 < _map245.Count; ++_i246)
                      {
                        string _key247;
                        long _val248;
                        _key247 = await iprot.ReadStringAsync(cancellationToken);
                        _val248 = await iprot.ReadI64Async(cancellationToken);
                        _val244[_key247] = _val248;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                    Failed[_key243] = _val244;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_failed = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map249 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Complete_ms_avg = new Dictionary<string, Dictionary<string, double>>(_map249.Count);
                  for(int _i250 = 0; _i250 < _map249.Count; ++_i250)
                  {
                    string _key251;
                    Dictionary<string, double> _val252;
                    _key251 = await iprot.ReadStringAsync(cancellationToken);
                    {
                      TMap _map253 = await iprot.ReadMapBeginAsync(cancellationToken);
                      _val252 = new Dictionary<string, double>(_map253.Count);
                      for(int _i254 = 0; _i254 < _map253.Count; ++_i254)
                      {
                        string _key255;
                        double _val256;
                        _key255 = await iprot.ReadStringAsync(cancellationToken);
                        _val256 = await iprot.ReadDoubleAsync(cancellationToken);
                        _val252[_key255] = _val256;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                    Complete_ms_avg[_key251] = _val252;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_complete_ms_avg = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_acked)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_failed)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_complete_ms_avg)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp257 = new TStruct("SpoutStats");
        await oprot.WriteStructBeginAsync(tmp257, cancellationToken);
        var tmp258 = new TField();
        if((Acked != null))
        {
          tmp258.Name = "acked";
          tmp258.Type = TType.Map;
          tmp258.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp258, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Map, Acked.Count), cancellationToken);
            foreach (string _iter259 in Acked.Keys)
            {
              await oprot.WriteStringAsync(_iter259, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Acked[_iter259].Count), cancellationToken);
                foreach (string _iter260 in Acked[_iter259].Keys)
                {
                  await oprot.WriteStringAsync(_iter260, cancellationToken);
                  await oprot.WriteI64Async(Acked[_iter259][_iter260], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Failed != null))
        {
          tmp258.Name = "failed";
          tmp258.Type = TType.Map;
          tmp258.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp258, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Map, Failed.Count), cancellationToken);
            foreach (string _iter261 in Failed.Keys)
            {
              await oprot.WriteStringAsync(_iter261, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I64, Failed[_iter261].Count), cancellationToken);
                foreach (string _iter262 in Failed[_iter261].Keys)
                {
                  await oprot.WriteStringAsync(_iter262, cancellationToken);
                  await oprot.WriteI64Async(Failed[_iter261][_iter262], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Complete_ms_avg != null))
        {
          tmp258.Name = "complete_ms_avg";
          tmp258.Type = TType.Map;
          tmp258.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp258, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Map, Complete_ms_avg.Count), cancellationToken);
            foreach (string _iter263 in Complete_ms_avg.Keys)
            {
              await oprot.WriteStringAsync(_iter263, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Double, Complete_ms_avg[_iter263].Count), cancellationToken);
                foreach (string _iter264 in Complete_ms_avg[_iter263].Keys)
                {
                  await oprot.WriteStringAsync(_iter264, cancellationToken);
                  await oprot.WriteDoubleAsync(Complete_ms_avg[_iter263][_iter264], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SpoutStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Acked, other.Acked)
        && TCollections.Equals(Failed, other.Failed)
        && TCollections.Equals(Complete_ms_avg, other.Complete_ms_avg);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Acked != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Acked);
        }
        if((Failed != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Failed);
        }
        if((Complete_ms_avg != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Complete_ms_avg);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp265 = new StringBuilder("SpoutStats(");
      if((Acked != null))
      {
        tmp265.Append(", Acked: ");
        Acked.ToString(tmp265);
      }
      if((Failed != null))
      {
        tmp265.Append(", Failed: ");
        Failed.ToString(tmp265);
      }
      if((Complete_ms_avg != null))
      {
        tmp265.Append(", Complete_ms_avg: ");
        Complete_ms_avg.ToString(tmp265);
      }
      tmp265.Append(')');
      return tmp265.ToString();
    }
  }

}
