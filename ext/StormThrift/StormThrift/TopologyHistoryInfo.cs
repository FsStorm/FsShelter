/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class TopologyHistoryInfo : TBase
  {
    private List<string> _topo_ids;

    public List<string> Topo_ids
    {
      get
      {
        return _topo_ids;
      }
      set
      {
        __isset.topo_ids = true;
        this._topo_ids = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool topo_ids;
    }

    public TopologyHistoryInfo()
    {
    }

    public TopologyHistoryInfo DeepCopy()
    {
      var tmp706 = new TopologyHistoryInfo();
      if((Topo_ids != null) && __isset.topo_ids)
      {
        tmp706.Topo_ids = this.Topo_ids.DeepCopy();
      }
      tmp706.__isset.topo_ids = this.__isset.topo_ids;
      return tmp706;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list707 = await iprot.ReadListBeginAsync(cancellationToken);
                  Topo_ids = new List<string>(_list707.Count);
                  for(int _i708 = 0; _i708 < _list707.Count; ++_i708)
                  {
                    string _elem709;
                    _elem709 = await iprot.ReadStringAsync(cancellationToken);
                    Topo_ids.Add(_elem709);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp710 = new TStruct("TopologyHistoryInfo");
        await oprot.WriteStructBeginAsync(tmp710, cancellationToken);
        var tmp711 = new TField();
        if((Topo_ids != null) && __isset.topo_ids)
        {
          tmp711.Name = "topo_ids";
          tmp711.Type = TType.List;
          tmp711.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp711, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Topo_ids.Count), cancellationToken);
            foreach (string _iter712 in Topo_ids)
            {
              await oprot.WriteStringAsync(_iter712, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TopologyHistoryInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.topo_ids == other.__isset.topo_ids) && ((!__isset.topo_ids) || (TCollections.Equals(Topo_ids, other.Topo_ids))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Topo_ids != null) && __isset.topo_ids)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Topo_ids);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp713 = new StringBuilder("TopologyHistoryInfo(");
      int tmp714 = 0;
      if((Topo_ids != null) && __isset.topo_ids)
      {
        if(0 < tmp714++) { tmp713.Append(", "); }
        tmp713.Append("Topo_ids: ");
        Topo_ids.ToString(tmp713);
      }
      tmp713.Append(')');
      return tmp713.ToString();
    }
  }

}
