/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LogLevel : TBase
  {
    private string _target_log_level;
    private int _reset_log_level_timeout_secs;
    private long _reset_log_level_timeout_epoch;
    private string _reset_log_level;

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.LogLevelAction"/>
    /// </summary>
    public global::StormThrift.LogLevelAction Action { get; set; }

    public string Target_log_level
    {
      get
      {
        return _target_log_level;
      }
      set
      {
        __isset.target_log_level = true;
        this._target_log_level = value;
      }
    }

    public int Reset_log_level_timeout_secs
    {
      get
      {
        return _reset_log_level_timeout_secs;
      }
      set
      {
        __isset.reset_log_level_timeout_secs = true;
        this._reset_log_level_timeout_secs = value;
      }
    }

    public long Reset_log_level_timeout_epoch
    {
      get
      {
        return _reset_log_level_timeout_epoch;
      }
      set
      {
        __isset.reset_log_level_timeout_epoch = true;
        this._reset_log_level_timeout_epoch = value;
      }
    }

    public string Reset_log_level
    {
      get
      {
        return _reset_log_level;
      }
      set
      {
        __isset.reset_log_level = true;
        this._reset_log_level = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool target_log_level;
      public bool reset_log_level_timeout_secs;
      public bool reset_log_level_timeout_epoch;
      public bool reset_log_level;
    }

    public LogLevel()
    {
    }

    public LogLevel(global::StormThrift.LogLevelAction action) : this()
    {
      this.Action = action;
    }

    public LogLevel DeepCopy()
    {
      var tmp691 = new LogLevel();
      tmp691.Action = this.Action;
      if((Target_log_level != null) && __isset.target_log_level)
      {
        tmp691.Target_log_level = this.Target_log_level;
      }
      tmp691.__isset.target_log_level = this.__isset.target_log_level;
      if(__isset.reset_log_level_timeout_secs)
      {
        tmp691.Reset_log_level_timeout_secs = this.Reset_log_level_timeout_secs;
      }
      tmp691.__isset.reset_log_level_timeout_secs = this.__isset.reset_log_level_timeout_secs;
      if(__isset.reset_log_level_timeout_epoch)
      {
        tmp691.Reset_log_level_timeout_epoch = this.Reset_log_level_timeout_epoch;
      }
      tmp691.__isset.reset_log_level_timeout_epoch = this.__isset.reset_log_level_timeout_epoch;
      if((Reset_log_level != null) && __isset.reset_log_level)
      {
        tmp691.Reset_log_level = this.Reset_log_level;
      }
      tmp691.__isset.reset_log_level = this.__isset.reset_log_level;
      return tmp691;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_action = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Action = (global::StormThrift.LogLevelAction)await iprot.ReadI32Async(cancellationToken);
                isset_action = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Target_log_level = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Reset_log_level_timeout_secs = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Reset_log_level_timeout_epoch = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Reset_log_level = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_action)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp692 = new TStruct("LogLevel");
        await oprot.WriteStructBeginAsync(tmp692, cancellationToken);
        var tmp693 = new TField();
        tmp693.Name = "action";
        tmp693.Type = TType.I32;
        tmp693.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp693, cancellationToken);
        await oprot.WriteI32Async((int)Action, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Target_log_level != null) && __isset.target_log_level)
        {
          tmp693.Name = "target_log_level";
          tmp693.Type = TType.String;
          tmp693.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp693, cancellationToken);
          await oprot.WriteStringAsync(Target_log_level, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reset_log_level_timeout_secs)
        {
          tmp693.Name = "reset_log_level_timeout_secs";
          tmp693.Type = TType.I32;
          tmp693.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp693, cancellationToken);
          await oprot.WriteI32Async(Reset_log_level_timeout_secs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.reset_log_level_timeout_epoch)
        {
          tmp693.Name = "reset_log_level_timeout_epoch";
          tmp693.Type = TType.I64;
          tmp693.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp693, cancellationToken);
          await oprot.WriteI64Async(Reset_log_level_timeout_epoch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Reset_log_level != null) && __isset.reset_log_level)
        {
          tmp693.Name = "reset_log_level";
          tmp693.Type = TType.String;
          tmp693.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp693, cancellationToken);
          await oprot.WriteStringAsync(Reset_log_level, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LogLevel other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Action, other.Action)
        && ((__isset.target_log_level == other.__isset.target_log_level) && ((!__isset.target_log_level) || (global::System.Object.Equals(Target_log_level, other.Target_log_level))))
        && ((__isset.reset_log_level_timeout_secs == other.__isset.reset_log_level_timeout_secs) && ((!__isset.reset_log_level_timeout_secs) || (global::System.Object.Equals(Reset_log_level_timeout_secs, other.Reset_log_level_timeout_secs))))
        && ((__isset.reset_log_level_timeout_epoch == other.__isset.reset_log_level_timeout_epoch) && ((!__isset.reset_log_level_timeout_epoch) || (global::System.Object.Equals(Reset_log_level_timeout_epoch, other.Reset_log_level_timeout_epoch))))
        && ((__isset.reset_log_level == other.__isset.reset_log_level) && ((!__isset.reset_log_level) || (global::System.Object.Equals(Reset_log_level, other.Reset_log_level))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Action.GetHashCode();
        if((Target_log_level != null) && __isset.target_log_level)
        {
          hashcode = (hashcode * 397) + Target_log_level.GetHashCode();
        }
        if(__isset.reset_log_level_timeout_secs)
        {
          hashcode = (hashcode * 397) + Reset_log_level_timeout_secs.GetHashCode();
        }
        if(__isset.reset_log_level_timeout_epoch)
        {
          hashcode = (hashcode * 397) + Reset_log_level_timeout_epoch.GetHashCode();
        }
        if((Reset_log_level != null) && __isset.reset_log_level)
        {
          hashcode = (hashcode * 397) + Reset_log_level.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp694 = new StringBuilder("LogLevel(");
      tmp694.Append(", Action: ");
      Action.ToString(tmp694);
      if((Target_log_level != null) && __isset.target_log_level)
      {
        tmp694.Append(", Target_log_level: ");
        Target_log_level.ToString(tmp694);
      }
      if(__isset.reset_log_level_timeout_secs)
      {
        tmp694.Append(", Reset_log_level_timeout_secs: ");
        Reset_log_level_timeout_secs.ToString(tmp694);
      }
      if(__isset.reset_log_level_timeout_epoch)
      {
        tmp694.Append(", Reset_log_level_timeout_epoch: ");
        Reset_log_level_timeout_epoch.ToString(tmp694);
      }
      if((Reset_log_level != null) && __isset.reset_log_level)
      {
        tmp694.Append(", Reset_log_level: ");
        Reset_log_level.ToString(tmp694);
      }
      tmp694.Append(')');
      return tmp694.ToString();
    }
  }

}
