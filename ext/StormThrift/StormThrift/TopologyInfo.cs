/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class TopologyInfo : TBase
  {
    private Dictionary<string, global::StormThrift.DebugOptions> _component_debug;
    private string _sched_status;
    private string _owner;
    private int _replication_count;
    private double _requested_memonheap;
    private double _requested_memoffheap;
    private double _requested_cpu;
    private double _assigned_memonheap;
    private double _assigned_memoffheap;
    private double _assigned_cpu;

    public string Id { get; set; }

    public string Name { get; set; }

    public int Uptime_secs { get; set; }

    public List<global::StormThrift.ExecutorSummary> Executors { get; set; }

    public string Status { get; set; }

    public Dictionary<string, List<global::StormThrift.ErrorInfo>> Errors { get; set; }

    public Dictionary<string, global::StormThrift.DebugOptions> Component_debug
    {
      get
      {
        return _component_debug;
      }
      set
      {
        __isset.component_debug = true;
        this._component_debug = value;
      }
    }

    public string Sched_status
    {
      get
      {
        return _sched_status;
      }
      set
      {
        __isset.sched_status = true;
        this._sched_status = value;
      }
    }

    public string Owner
    {
      get
      {
        return _owner;
      }
      set
      {
        __isset.owner = true;
        this._owner = value;
      }
    }

    public int Replication_count
    {
      get
      {
        return _replication_count;
      }
      set
      {
        __isset.replication_count = true;
        this._replication_count = value;
      }
    }

    public double Requested_memonheap
    {
      get
      {
        return _requested_memonheap;
      }
      set
      {
        __isset.requested_memonheap = true;
        this._requested_memonheap = value;
      }
    }

    public double Requested_memoffheap
    {
      get
      {
        return _requested_memoffheap;
      }
      set
      {
        __isset.requested_memoffheap = true;
        this._requested_memoffheap = value;
      }
    }

    public double Requested_cpu
    {
      get
      {
        return _requested_cpu;
      }
      set
      {
        __isset.requested_cpu = true;
        this._requested_cpu = value;
      }
    }

    public double Assigned_memonheap
    {
      get
      {
        return _assigned_memonheap;
      }
      set
      {
        __isset.assigned_memonheap = true;
        this._assigned_memonheap = value;
      }
    }

    public double Assigned_memoffheap
    {
      get
      {
        return _assigned_memoffheap;
      }
      set
      {
        __isset.assigned_memoffheap = true;
        this._assigned_memoffheap = value;
      }
    }

    public double Assigned_cpu
    {
      get
      {
        return _assigned_cpu;
      }
      set
      {
        __isset.assigned_cpu = true;
        this._assigned_cpu = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool component_debug;
      public bool sched_status;
      public bool owner;
      public bool replication_count;
      public bool requested_memonheap;
      public bool requested_memoffheap;
      public bool requested_cpu;
      public bool assigned_memonheap;
      public bool assigned_memoffheap;
      public bool assigned_cpu;
    }

    public TopologyInfo()
    {
    }

    public TopologyInfo(string id, string name, int uptime_secs, List<global::StormThrift.ExecutorSummary> executors, string status, Dictionary<string, List<global::StormThrift.ErrorInfo>> errors) : this()
    {
      this.Id = id;
      this.Name = name;
      this.Uptime_secs = uptime_secs;
      this.Executors = executors;
      this.Status = status;
      this.Errors = errors;
    }

    public TopologyInfo DeepCopy()
    {
      var tmp312 = new TopologyInfo();
      if((Id != null))
      {
        tmp312.Id = this.Id;
      }
      if((Name != null))
      {
        tmp312.Name = this.Name;
      }
      tmp312.Uptime_secs = this.Uptime_secs;
      if((Executors != null))
      {
        tmp312.Executors = this.Executors.DeepCopy();
      }
      if((Status != null))
      {
        tmp312.Status = this.Status;
      }
      if((Errors != null))
      {
        tmp312.Errors = this.Errors.DeepCopy();
      }
      if((Component_debug != null) && __isset.component_debug)
      {
        tmp312.Component_debug = this.Component_debug.DeepCopy();
      }
      tmp312.__isset.component_debug = this.__isset.component_debug;
      if((Sched_status != null) && __isset.sched_status)
      {
        tmp312.Sched_status = this.Sched_status;
      }
      tmp312.__isset.sched_status = this.__isset.sched_status;
      if((Owner != null) && __isset.owner)
      {
        tmp312.Owner = this.Owner;
      }
      tmp312.__isset.owner = this.__isset.owner;
      if(__isset.replication_count)
      {
        tmp312.Replication_count = this.Replication_count;
      }
      tmp312.__isset.replication_count = this.__isset.replication_count;
      if(__isset.requested_memonheap)
      {
        tmp312.Requested_memonheap = this.Requested_memonheap;
      }
      tmp312.__isset.requested_memonheap = this.__isset.requested_memonheap;
      if(__isset.requested_memoffheap)
      {
        tmp312.Requested_memoffheap = this.Requested_memoffheap;
      }
      tmp312.__isset.requested_memoffheap = this.__isset.requested_memoffheap;
      if(__isset.requested_cpu)
      {
        tmp312.Requested_cpu = this.Requested_cpu;
      }
      tmp312.__isset.requested_cpu = this.__isset.requested_cpu;
      if(__isset.assigned_memonheap)
      {
        tmp312.Assigned_memonheap = this.Assigned_memonheap;
      }
      tmp312.__isset.assigned_memonheap = this.__isset.assigned_memonheap;
      if(__isset.assigned_memoffheap)
      {
        tmp312.Assigned_memoffheap = this.Assigned_memoffheap;
      }
      tmp312.__isset.assigned_memoffheap = this.__isset.assigned_memoffheap;
      if(__isset.assigned_cpu)
      {
        tmp312.Assigned_cpu = this.Assigned_cpu;
      }
      tmp312.__isset.assigned_cpu = this.__isset.assigned_cpu;
      return tmp312;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        bool isset_name = false;
        bool isset_uptime_secs = false;
        bool isset_executors = false;
        bool isset_status = false;
        bool isset_errors = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Id = await iprot.ReadStringAsync(cancellationToken);
                isset_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Uptime_secs = await iprot.ReadI32Async(cancellationToken);
                isset_uptime_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list313 = await iprot.ReadListBeginAsync(cancellationToken);
                  Executors = new List<global::StormThrift.ExecutorSummary>(_list313.Count);
                  for(int _i314 = 0; _i314 < _list313.Count; ++_i314)
                  {
                    global::StormThrift.ExecutorSummary _elem315;
                    _elem315 = new global::StormThrift.ExecutorSummary();
                    await _elem315.ReadAsync(iprot, cancellationToken);
                    Executors.Add(_elem315);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_executors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Status = await iprot.ReadStringAsync(cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map316 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Errors = new Dictionary<string, List<global::StormThrift.ErrorInfo>>(_map316.Count);
                  for(int _i317 = 0; _i317 < _map316.Count; ++_i317)
                  {
                    string _key318;
                    List<global::StormThrift.ErrorInfo> _val319;
                    _key318 = await iprot.ReadStringAsync(cancellationToken);
                    {
                      TList _list320 = await iprot.ReadListBeginAsync(cancellationToken);
                      _val319 = new List<global::StormThrift.ErrorInfo>(_list320.Count);
                      for(int _i321 = 0; _i321 < _list320.Count; ++_i321)
                      {
                        global::StormThrift.ErrorInfo _elem322;
                        _elem322 = new global::StormThrift.ErrorInfo();
                        await _elem322.ReadAsync(iprot, cancellationToken);
                        _val319.Add(_elem322);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Errors[_key318] = _val319;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_errors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map323 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Component_debug = new Dictionary<string, global::StormThrift.DebugOptions>(_map323.Count);
                  for(int _i324 = 0; _i324 < _map323.Count; ++_i324)
                  {
                    string _key325;
                    global::StormThrift.DebugOptions _val326;
                    _key325 = await iprot.ReadStringAsync(cancellationToken);
                    _val326 = new global::StormThrift.DebugOptions();
                    await _val326.ReadAsync(iprot, cancellationToken);
                    Component_debug[_key325] = _val326;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 513:
              if (field.Type == TType.String)
              {
                Sched_status = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 514:
              if (field.Type == TType.String)
              {
                Owner = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 515:
              if (field.Type == TType.I32)
              {
                Replication_count = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 521:
              if (field.Type == TType.Double)
              {
                Requested_memonheap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 522:
              if (field.Type == TType.Double)
              {
                Requested_memoffheap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 523:
              if (field.Type == TType.Double)
              {
                Requested_cpu = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 524:
              if (field.Type == TType.Double)
              {
                Assigned_memonheap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 525:
              if (field.Type == TType.Double)
              {
                Assigned_memoffheap = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 526:
              if (field.Type == TType.Double)
              {
                Assigned_cpu = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_uptime_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_executors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_errors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp327 = new TStruct("TopologyInfo");
        await oprot.WriteStructBeginAsync(tmp327, cancellationToken);
        var tmp328 = new TField();
        if((Id != null))
        {
          tmp328.Name = "id";
          tmp328.Type = TType.String;
          tmp328.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteStringAsync(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null))
        {
          tmp328.Name = "name";
          tmp328.Type = TType.String;
          tmp328.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp328.Name = "uptime_secs";
        tmp328.Type = TType.I32;
        tmp328.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
        await oprot.WriteI32Async(Uptime_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Executors != null))
        {
          tmp328.Name = "executors";
          tmp328.Type = TType.List;
          tmp328.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Executors.Count), cancellationToken);
            foreach (global::StormThrift.ExecutorSummary _iter329 in Executors)
            {
              await _iter329.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Status != null))
        {
          tmp328.Name = "status";
          tmp328.Type = TType.String;
          tmp328.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteStringAsync(Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Errors != null))
        {
          tmp328.Name = "errors";
          tmp328.Type = TType.Map;
          tmp328.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.List, Errors.Count), cancellationToken);
            foreach (string _iter330 in Errors.Keys)
            {
              await oprot.WriteStringAsync(_iter330, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Errors[_iter330].Count), cancellationToken);
                foreach (global::StormThrift.ErrorInfo _iter331 in Errors[_iter330])
                {
                  await _iter331.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Component_debug != null) && __isset.component_debug)
        {
          tmp328.Name = "component_debug";
          tmp328.Type = TType.Map;
          tmp328.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Component_debug.Count), cancellationToken);
            foreach (string _iter332 in Component_debug.Keys)
            {
              await oprot.WriteStringAsync(_iter332, cancellationToken);
              await Component_debug[_iter332].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Sched_status != null) && __isset.sched_status)
        {
          tmp328.Name = "sched_status";
          tmp328.Type = TType.String;
          tmp328.ID = 513;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteStringAsync(Sched_status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Owner != null) && __isset.owner)
        {
          tmp328.Name = "owner";
          tmp328.Type = TType.String;
          tmp328.ID = 514;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteStringAsync(Owner, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.replication_count)
        {
          tmp328.Name = "replication_count";
          tmp328.Type = TType.I32;
          tmp328.ID = 515;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteI32Async(Replication_count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.requested_memonheap)
        {
          tmp328.Name = "requested_memonheap";
          tmp328.Type = TType.Double;
          tmp328.ID = 521;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Requested_memonheap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.requested_memoffheap)
        {
          tmp328.Name = "requested_memoffheap";
          tmp328.Type = TType.Double;
          tmp328.ID = 522;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Requested_memoffheap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.requested_cpu)
        {
          tmp328.Name = "requested_cpu";
          tmp328.Type = TType.Double;
          tmp328.ID = 523;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Requested_cpu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.assigned_memonheap)
        {
          tmp328.Name = "assigned_memonheap";
          tmp328.Type = TType.Double;
          tmp328.ID = 524;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Assigned_memonheap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.assigned_memoffheap)
        {
          tmp328.Name = "assigned_memoffheap";
          tmp328.Type = TType.Double;
          tmp328.ID = 525;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Assigned_memoffheap, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.assigned_cpu)
        {
          tmp328.Name = "assigned_cpu";
          tmp328.Type = TType.Double;
          tmp328.ID = 526;
          await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
          await oprot.WriteDoubleAsync(Assigned_cpu, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TopologyInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Id, other.Id)
        && global::System.Object.Equals(Name, other.Name)
        && global::System.Object.Equals(Uptime_secs, other.Uptime_secs)
        && TCollections.Equals(Executors, other.Executors)
        && global::System.Object.Equals(Status, other.Status)
        && TCollections.Equals(Errors, other.Errors)
        && ((__isset.component_debug == other.__isset.component_debug) && ((!__isset.component_debug) || (TCollections.Equals(Component_debug, other.Component_debug))))
        && ((__isset.sched_status == other.__isset.sched_status) && ((!__isset.sched_status) || (global::System.Object.Equals(Sched_status, other.Sched_status))))
        && ((__isset.owner == other.__isset.owner) && ((!__isset.owner) || (global::System.Object.Equals(Owner, other.Owner))))
        && ((__isset.replication_count == other.__isset.replication_count) && ((!__isset.replication_count) || (global::System.Object.Equals(Replication_count, other.Replication_count))))
        && ((__isset.requested_memonheap == other.__isset.requested_memonheap) && ((!__isset.requested_memonheap) || (global::System.Object.Equals(Requested_memonheap, other.Requested_memonheap))))
        && ((__isset.requested_memoffheap == other.__isset.requested_memoffheap) && ((!__isset.requested_memoffheap) || (global::System.Object.Equals(Requested_memoffheap, other.Requested_memoffheap))))
        && ((__isset.requested_cpu == other.__isset.requested_cpu) && ((!__isset.requested_cpu) || (global::System.Object.Equals(Requested_cpu, other.Requested_cpu))))
        && ((__isset.assigned_memonheap == other.__isset.assigned_memonheap) && ((!__isset.assigned_memonheap) || (global::System.Object.Equals(Assigned_memonheap, other.Assigned_memonheap))))
        && ((__isset.assigned_memoffheap == other.__isset.assigned_memoffheap) && ((!__isset.assigned_memoffheap) || (global::System.Object.Equals(Assigned_memoffheap, other.Assigned_memoffheap))))
        && ((__isset.assigned_cpu == other.__isset.assigned_cpu) && ((!__isset.assigned_cpu) || (global::System.Object.Equals(Assigned_cpu, other.Assigned_cpu))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Id != null))
        {
          hashcode = (hashcode * 397) + Id.GetHashCode();
        }
        if((Name != null))
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        hashcode = (hashcode * 397) + Uptime_secs.GetHashCode();
        if((Executors != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Executors);
        }
        if((Status != null))
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if((Errors != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Errors);
        }
        if((Component_debug != null) && __isset.component_debug)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Component_debug);
        }
        if((Sched_status != null) && __isset.sched_status)
        {
          hashcode = (hashcode * 397) + Sched_status.GetHashCode();
        }
        if((Owner != null) && __isset.owner)
        {
          hashcode = (hashcode * 397) + Owner.GetHashCode();
        }
        if(__isset.replication_count)
        {
          hashcode = (hashcode * 397) + Replication_count.GetHashCode();
        }
        if(__isset.requested_memonheap)
        {
          hashcode = (hashcode * 397) + Requested_memonheap.GetHashCode();
        }
        if(__isset.requested_memoffheap)
        {
          hashcode = (hashcode * 397) + Requested_memoffheap.GetHashCode();
        }
        if(__isset.requested_cpu)
        {
          hashcode = (hashcode * 397) + Requested_cpu.GetHashCode();
        }
        if(__isset.assigned_memonheap)
        {
          hashcode = (hashcode * 397) + Assigned_memonheap.GetHashCode();
        }
        if(__isset.assigned_memoffheap)
        {
          hashcode = (hashcode * 397) + Assigned_memoffheap.GetHashCode();
        }
        if(__isset.assigned_cpu)
        {
          hashcode = (hashcode * 397) + Assigned_cpu.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp333 = new StringBuilder("TopologyInfo(");
      if((Id != null))
      {
        tmp333.Append(", Id: ");
        Id.ToString(tmp333);
      }
      if((Name != null))
      {
        tmp333.Append(", Name: ");
        Name.ToString(tmp333);
      }
      tmp333.Append(", Uptime_secs: ");
      Uptime_secs.ToString(tmp333);
      if((Executors != null))
      {
        tmp333.Append(", Executors: ");
        Executors.ToString(tmp333);
      }
      if((Status != null))
      {
        tmp333.Append(", Status: ");
        Status.ToString(tmp333);
      }
      if((Errors != null))
      {
        tmp333.Append(", Errors: ");
        Errors.ToString(tmp333);
      }
      if((Component_debug != null) && __isset.component_debug)
      {
        tmp333.Append(", Component_debug: ");
        Component_debug.ToString(tmp333);
      }
      if((Sched_status != null) && __isset.sched_status)
      {
        tmp333.Append(", Sched_status: ");
        Sched_status.ToString(tmp333);
      }
      if((Owner != null) && __isset.owner)
      {
        tmp333.Append(", Owner: ");
        Owner.ToString(tmp333);
      }
      if(__isset.replication_count)
      {
        tmp333.Append(", Replication_count: ");
        Replication_count.ToString(tmp333);
      }
      if(__isset.requested_memonheap)
      {
        tmp333.Append(", Requested_memonheap: ");
        Requested_memonheap.ToString(tmp333);
      }
      if(__isset.requested_memoffheap)
      {
        tmp333.Append(", Requested_memoffheap: ");
        Requested_memoffheap.ToString(tmp333);
      }
      if(__isset.requested_cpu)
      {
        tmp333.Append(", Requested_cpu: ");
        Requested_cpu.ToString(tmp333);
      }
      if(__isset.assigned_memonheap)
      {
        tmp333.Append(", Assigned_memonheap: ");
        Assigned_memonheap.ToString(tmp333);
      }
      if(__isset.assigned_memoffheap)
      {
        tmp333.Append(", Assigned_memoffheap: ");
        Assigned_memoffheap.ToString(tmp333);
      }
      if(__isset.assigned_cpu)
      {
        tmp333.Append(", Assigned_cpu: ");
        Assigned_cpu.ToString(tmp333);
      }
      tmp333.Append(')');
      return tmp333.ToString();
    }
  }

}
