/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class Grouping : TBase
  {
    private List<string> _fields;
    private global::StormThrift.NullStruct _shuffle;
    private global::StormThrift.NullStruct _all;
    private global::StormThrift.NullStruct _none;
    private global::StormThrift.NullStruct _direct;
    private global::StormThrift.JavaObject _custom_object;
    private byte[] _custom_serialized;
    private global::StormThrift.NullStruct _local_or_shuffle;

    public List<string> Fields
    {
      get
      {
        return _fields;
      }
      set
      {
        __isset.fields = true;
        this._fields = value;
      }
    }

    public global::StormThrift.NullStruct Shuffle
    {
      get
      {
        return _shuffle;
      }
      set
      {
        __isset.shuffle = true;
        this._shuffle = value;
      }
    }

    public global::StormThrift.NullStruct All
    {
      get
      {
        return _all;
      }
      set
      {
        __isset.all = true;
        this._all = value;
      }
    }

    public global::StormThrift.NullStruct None
    {
      get
      {
        return _none;
      }
      set
      {
        __isset.none = true;
        this._none = value;
      }
    }

    public global::StormThrift.NullStruct Direct
    {
      get
      {
        return _direct;
      }
      set
      {
        __isset.direct = true;
        this._direct = value;
      }
    }

    public global::StormThrift.JavaObject Custom_object
    {
      get
      {
        return _custom_object;
      }
      set
      {
        __isset.custom_object = true;
        this._custom_object = value;
      }
    }

    public byte[] Custom_serialized
    {
      get
      {
        return _custom_serialized;
      }
      set
      {
        __isset.custom_serialized = true;
        this._custom_serialized = value;
      }
    }

    public global::StormThrift.NullStruct Local_or_shuffle
    {
      get
      {
        return _local_or_shuffle;
      }
      set
      {
        __isset.local_or_shuffle = true;
        this._local_or_shuffle = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fields;
      public bool shuffle;
      public bool all;
      public bool none;
      public bool direct;
      public bool custom_object;
      public bool custom_serialized;
      public bool local_or_shuffle;
    }

    public Grouping()
    {
    }

    public Grouping DeepCopy()
    {
      var tmp23 = new Grouping();
      if((Fields != null) && __isset.fields)
      {
        tmp23.Fields = this.Fields.DeepCopy();
      }
      tmp23.__isset.fields = this.__isset.fields;
      if((Shuffle != null) && __isset.shuffle)
      {
        tmp23.Shuffle = (global::StormThrift.NullStruct)this.Shuffle.DeepCopy();
      }
      tmp23.__isset.shuffle = this.__isset.shuffle;
      if((All != null) && __isset.all)
      {
        tmp23.All = (global::StormThrift.NullStruct)this.All.DeepCopy();
      }
      tmp23.__isset.all = this.__isset.all;
      if((None != null) && __isset.none)
      {
        tmp23.None = (global::StormThrift.NullStruct)this.None.DeepCopy();
      }
      tmp23.__isset.none = this.__isset.none;
      if((Direct != null) && __isset.direct)
      {
        tmp23.Direct = (global::StormThrift.NullStruct)this.Direct.DeepCopy();
      }
      tmp23.__isset.direct = this.__isset.direct;
      if((Custom_object != null) && __isset.custom_object)
      {
        tmp23.Custom_object = (global::StormThrift.JavaObject)this.Custom_object.DeepCopy();
      }
      tmp23.__isset.custom_object = this.__isset.custom_object;
      if((Custom_serialized != null) && __isset.custom_serialized)
      {
        tmp23.Custom_serialized = this.Custom_serialized.ToArray();
      }
      tmp23.__isset.custom_serialized = this.__isset.custom_serialized;
      if((Local_or_shuffle != null) && __isset.local_or_shuffle)
      {
        tmp23.Local_or_shuffle = (global::StormThrift.NullStruct)this.Local_or_shuffle.DeepCopy();
      }
      tmp23.__isset.local_or_shuffle = this.__isset.local_or_shuffle;
      return tmp23;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list24 = await iprot.ReadListBeginAsync(cancellationToken);
                  Fields = new List<string>(_list24.Count);
                  for(int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26;
                    _elem26 = await iprot.ReadStringAsync(cancellationToken);
                    Fields.Add(_elem26);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Shuffle = new global::StormThrift.NullStruct();
                await Shuffle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                All = new global::StormThrift.NullStruct();
                await All.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                None = new global::StormThrift.NullStruct();
                await None.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Direct = new global::StormThrift.NullStruct();
                await Direct.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Custom_object = new global::StormThrift.JavaObject();
                await Custom_object.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                Custom_serialized = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                Local_or_shuffle = new global::StormThrift.NullStruct();
                await Local_or_shuffle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp27 = new TStruct("Grouping");
        await oprot.WriteStructBeginAsync(tmp27, cancellationToken);
        var tmp28 = new TField();
        if((Fields != null) && __isset.fields)
        {
          tmp28.Name = "fields";
          tmp28.Type = TType.List;
          tmp28.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Fields.Count), cancellationToken);
            foreach (string _iter29 in Fields)
            {
              await oprot.WriteStringAsync(_iter29, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Shuffle != null) && __isset.shuffle)
        {
          tmp28.Name = "shuffle";
          tmp28.Type = TType.Struct;
          tmp28.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await Shuffle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((All != null) && __isset.all)
        {
          tmp28.Name = "all";
          tmp28.Type = TType.Struct;
          tmp28.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await All.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((None != null) && __isset.none)
        {
          tmp28.Name = "none";
          tmp28.Type = TType.Struct;
          tmp28.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await None.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Direct != null) && __isset.direct)
        {
          tmp28.Name = "direct";
          tmp28.Type = TType.Struct;
          tmp28.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await Direct.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Custom_object != null) && __isset.custom_object)
        {
          tmp28.Name = "custom_object";
          tmp28.Type = TType.Struct;
          tmp28.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await Custom_object.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Custom_serialized != null) && __isset.custom_serialized)
        {
          tmp28.Name = "custom_serialized";
          tmp28.Type = TType.String;
          tmp28.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await oprot.WriteBinaryAsync(Custom_serialized, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Local_or_shuffle != null) && __isset.local_or_shuffle)
        {
          tmp28.Name = "local_or_shuffle";
          tmp28.Type = TType.Struct;
          tmp28.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp28, cancellationToken);
          await Local_or_shuffle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Grouping other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.fields == other.__isset.fields) && ((!__isset.fields) || (TCollections.Equals(Fields, other.Fields))))
        && ((__isset.shuffle == other.__isset.shuffle) && ((!__isset.shuffle) || (global::System.Object.Equals(Shuffle, other.Shuffle))))
        && ((__isset.all == other.__isset.all) && ((!__isset.all) || (global::System.Object.Equals(All, other.All))))
        && ((__isset.none == other.__isset.none) && ((!__isset.none) || (global::System.Object.Equals(None, other.None))))
        && ((__isset.direct == other.__isset.direct) && ((!__isset.direct) || (global::System.Object.Equals(Direct, other.Direct))))
        && ((__isset.custom_object == other.__isset.custom_object) && ((!__isset.custom_object) || (global::System.Object.Equals(Custom_object, other.Custom_object))))
        && ((__isset.custom_serialized == other.__isset.custom_serialized) && ((!__isset.custom_serialized) || (TCollections.Equals(Custom_serialized, other.Custom_serialized))))
        && ((__isset.local_or_shuffle == other.__isset.local_or_shuffle) && ((!__isset.local_or_shuffle) || (global::System.Object.Equals(Local_or_shuffle, other.Local_or_shuffle))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Fields != null) && __isset.fields)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Fields);
        }
        if((Shuffle != null) && __isset.shuffle)
        {
          hashcode = (hashcode * 397) + Shuffle.GetHashCode();
        }
        if((All != null) && __isset.all)
        {
          hashcode = (hashcode * 397) + All.GetHashCode();
        }
        if((None != null) && __isset.none)
        {
          hashcode = (hashcode * 397) + None.GetHashCode();
        }
        if((Direct != null) && __isset.direct)
        {
          hashcode = (hashcode * 397) + Direct.GetHashCode();
        }
        if((Custom_object != null) && __isset.custom_object)
        {
          hashcode = (hashcode * 397) + Custom_object.GetHashCode();
        }
        if((Custom_serialized != null) && __isset.custom_serialized)
        {
          hashcode = (hashcode * 397) + Custom_serialized.GetHashCode();
        }
        if((Local_or_shuffle != null) && __isset.local_or_shuffle)
        {
          hashcode = (hashcode * 397) + Local_or_shuffle.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp30 = new StringBuilder("Grouping(");
      int tmp31 = 0;
      if((Fields != null) && __isset.fields)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Fields: ");
        Fields.ToString(tmp30);
      }
      if((Shuffle != null) && __isset.shuffle)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Shuffle: ");
        Shuffle.ToString(tmp30);
      }
      if((All != null) && __isset.all)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("All: ");
        All.ToString(tmp30);
      }
      if((None != null) && __isset.none)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("None: ");
        None.ToString(tmp30);
      }
      if((Direct != null) && __isset.direct)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Direct: ");
        Direct.ToString(tmp30);
      }
      if((Custom_object != null) && __isset.custom_object)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Custom_object: ");
        Custom_object.ToString(tmp30);
      }
      if((Custom_serialized != null) && __isset.custom_serialized)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Custom_serialized: ");
        Custom_serialized.ToString(tmp30);
      }
      if((Local_or_shuffle != null) && __isset.local_or_shuffle)
      {
        if(0 < tmp31++) { tmp30.Append(", "); }
        tmp30.Append("Local_or_shuffle: ");
        Local_or_shuffle.ToString(tmp30);
      }
      tmp30.Append(')');
      return tmp30.ToString();
    }
  }

}
