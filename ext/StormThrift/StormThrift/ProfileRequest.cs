/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ProfileRequest : TBase
  {
    private long _time_stamp;

    public global::StormThrift.NodeInfo NodeInfo { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.ProfileAction"/>
    /// </summary>
    public global::StormThrift.ProfileAction Action { get; set; }

    public long Time_stamp
    {
      get
      {
        return _time_stamp;
      }
      set
      {
        __isset.time_stamp = true;
        this._time_stamp = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool time_stamp;
    }

    public ProfileRequest()
    {
    }

    public ProfileRequest(global::StormThrift.NodeInfo nodeInfo, global::StormThrift.ProfileAction action) : this()
    {
      this.NodeInfo = nodeInfo;
      this.Action = action;
    }

    public ProfileRequest DeepCopy()
    {
      var tmp681 = new ProfileRequest();
      if((NodeInfo != null))
      {
        tmp681.NodeInfo = (global::StormThrift.NodeInfo)this.NodeInfo.DeepCopy();
      }
      tmp681.Action = this.Action;
      if(__isset.time_stamp)
      {
        tmp681.Time_stamp = this.Time_stamp;
      }
      tmp681.__isset.time_stamp = this.__isset.time_stamp;
      return tmp681;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_nodeInfo = false;
        bool isset_action = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                NodeInfo = new global::StormThrift.NodeInfo();
                await NodeInfo.ReadAsync(iprot, cancellationToken);
                isset_nodeInfo = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Action = (global::StormThrift.ProfileAction)await iprot.ReadI32Async(cancellationToken);
                isset_action = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Time_stamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_nodeInfo)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_action)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp682 = new TStruct("ProfileRequest");
        await oprot.WriteStructBeginAsync(tmp682, cancellationToken);
        var tmp683 = new TField();
        if((NodeInfo != null))
        {
          tmp683.Name = "nodeInfo";
          tmp683.Type = TType.Struct;
          tmp683.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
          await NodeInfo.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp683.Name = "action";
        tmp683.Type = TType.I32;
        tmp683.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
        await oprot.WriteI32Async((int)Action, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if(__isset.time_stamp)
        {
          tmp683.Name = "time_stamp";
          tmp683.Type = TType.I64;
          tmp683.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
          await oprot.WriteI64Async(Time_stamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ProfileRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(NodeInfo, other.NodeInfo)
        && global::System.Object.Equals(Action, other.Action)
        && ((__isset.time_stamp == other.__isset.time_stamp) && ((!__isset.time_stamp) || (global::System.Object.Equals(Time_stamp, other.Time_stamp))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((NodeInfo != null))
        {
          hashcode = (hashcode * 397) + NodeInfo.GetHashCode();
        }
        hashcode = (hashcode * 397) + Action.GetHashCode();
        if(__isset.time_stamp)
        {
          hashcode = (hashcode * 397) + Time_stamp.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp684 = new StringBuilder("ProfileRequest(");
      if((NodeInfo != null))
      {
        tmp684.Append(", NodeInfo: ");
        NodeInfo.ToString(tmp684);
      }
      tmp684.Append(", Action: ");
      Action.ToString(tmp684);
      if(__isset.time_stamp)
      {
        tmp684.Append(", Time_stamp: ");
        Time_stamp.ToString(tmp684);
      }
      tmp684.Append(')');
      return tmp684.ToString();
    }
  }

}
