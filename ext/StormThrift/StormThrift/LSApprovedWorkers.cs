/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LSApprovedWorkers : TBase
  {

    public Dictionary<string, int> Approved_workers { get; set; }

    public LSApprovedWorkers()
    {
    }

    public LSApprovedWorkers(Dictionary<string, int> approved_workers) : this()
    {
      this.Approved_workers = approved_workers;
    }

    public LSApprovedWorkers DeepCopy()
    {
      var tmp630 = new LSApprovedWorkers();
      if((Approved_workers != null))
      {
        tmp630.Approved_workers = this.Approved_workers.DeepCopy();
      }
      return tmp630;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_approved_workers = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map631 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Approved_workers = new Dictionary<string, int>(_map631.Count);
                  for(int _i632 = 0; _i632 < _map631.Count; ++_i632)
                  {
                    string _key633;
                    int _val634;
                    _key633 = await iprot.ReadStringAsync(cancellationToken);
                    _val634 = await iprot.ReadI32Async(cancellationToken);
                    Approved_workers[_key633] = _val634;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_approved_workers = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_approved_workers)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp635 = new TStruct("LSApprovedWorkers");
        await oprot.WriteStructBeginAsync(tmp635, cancellationToken);
        var tmp636 = new TField();
        if((Approved_workers != null))
        {
          tmp636.Name = "approved_workers";
          tmp636.Type = TType.Map;
          tmp636.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp636, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Approved_workers.Count), cancellationToken);
            foreach (string _iter637 in Approved_workers.Keys)
            {
              await oprot.WriteStringAsync(_iter637, cancellationToken);
              await oprot.WriteI32Async(Approved_workers[_iter637], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LSApprovedWorkers other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Approved_workers, other.Approved_workers);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Approved_workers != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Approved_workers);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp638 = new StringBuilder("LSApprovedWorkers(");
      if((Approved_workers != null))
      {
        tmp638.Append(", Approved_workers: ");
        Approved_workers.ToString(tmp638);
      }
      tmp638.Append(')');
      return tmp638.ToString();
    }
  }

}
