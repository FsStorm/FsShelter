/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ComponentAggregateStats : TBase
  {
    private global::StormThrift.ComponentType _type;
    private global::StormThrift.CommonAggregateStats _common_stats;
    private global::StormThrift.SpecificAggregateStats _specific_stats;
    private global::StormThrift.ErrorInfo _last_error;

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.ComponentType"/>
    /// </summary>
    public global::StormThrift.ComponentType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public global::StormThrift.CommonAggregateStats Common_stats
    {
      get
      {
        return _common_stats;
      }
      set
      {
        __isset.common_stats = true;
        this._common_stats = value;
      }
    }

    public global::StormThrift.SpecificAggregateStats Specific_stats
    {
      get
      {
        return _specific_stats;
      }
      set
      {
        __isset.specific_stats = true;
        this._specific_stats = value;
      }
    }

    public global::StormThrift.ErrorInfo Last_error
    {
      get
      {
        return _last_error;
      }
      set
      {
        __isset.last_error = true;
        this._last_error = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool common_stats;
      public bool specific_stats;
      public bool last_error;
    }

    public ComponentAggregateStats()
    {
    }

    public ComponentAggregateStats DeepCopy()
    {
      var tmp355 = new ComponentAggregateStats();
      if(__isset.type)
      {
        tmp355.Type = this.Type;
      }
      tmp355.__isset.type = this.__isset.type;
      if((Common_stats != null) && __isset.common_stats)
      {
        tmp355.Common_stats = (global::StormThrift.CommonAggregateStats)this.Common_stats.DeepCopy();
      }
      tmp355.__isset.common_stats = this.__isset.common_stats;
      if((Specific_stats != null) && __isset.specific_stats)
      {
        tmp355.Specific_stats = (global::StormThrift.SpecificAggregateStats)this.Specific_stats.DeepCopy();
      }
      tmp355.__isset.specific_stats = this.__isset.specific_stats;
      if((Last_error != null) && __isset.last_error)
      {
        tmp355.Last_error = (global::StormThrift.ErrorInfo)this.Last_error.DeepCopy();
      }
      tmp355.__isset.last_error = this.__isset.last_error;
      return tmp355;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::StormThrift.ComponentType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Common_stats = new global::StormThrift.CommonAggregateStats();
                await Common_stats.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Specific_stats = new global::StormThrift.SpecificAggregateStats();
                await Specific_stats.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Last_error = new global::StormThrift.ErrorInfo();
                await Last_error.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp356 = new TStruct("ComponentAggregateStats");
        await oprot.WriteStructBeginAsync(tmp356, cancellationToken);
        var tmp357 = new TField();
        if(__isset.type)
        {
          tmp357.Name = "type";
          tmp357.Type = TType.I32;
          tmp357.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Common_stats != null) && __isset.common_stats)
        {
          tmp357.Name = "common_stats";
          tmp357.Type = TType.Struct;
          tmp357.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
          await Common_stats.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Specific_stats != null) && __isset.specific_stats)
        {
          tmp357.Name = "specific_stats";
          tmp357.Type = TType.Struct;
          tmp357.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
          await Specific_stats.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Last_error != null) && __isset.last_error)
        {
          tmp357.Name = "last_error";
          tmp357.Type = TType.Struct;
          tmp357.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
          await Last_error.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ComponentAggregateStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.common_stats == other.__isset.common_stats) && ((!__isset.common_stats) || (global::System.Object.Equals(Common_stats, other.Common_stats))))
        && ((__isset.specific_stats == other.__isset.specific_stats) && ((!__isset.specific_stats) || (global::System.Object.Equals(Specific_stats, other.Specific_stats))))
        && ((__isset.last_error == other.__isset.last_error) && ((!__isset.last_error) || (global::System.Object.Equals(Last_error, other.Last_error))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Common_stats != null) && __isset.common_stats)
        {
          hashcode = (hashcode * 397) + Common_stats.GetHashCode();
        }
        if((Specific_stats != null) && __isset.specific_stats)
        {
          hashcode = (hashcode * 397) + Specific_stats.GetHashCode();
        }
        if((Last_error != null) && __isset.last_error)
        {
          hashcode = (hashcode * 397) + Last_error.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp358 = new StringBuilder("ComponentAggregateStats(");
      int tmp359 = 0;
      if(__isset.type)
      {
        if(0 < tmp359++) { tmp358.Append(", "); }
        tmp358.Append("Type: ");
        Type.ToString(tmp358);
      }
      if((Common_stats != null) && __isset.common_stats)
      {
        if(0 < tmp359++) { tmp358.Append(", "); }
        tmp358.Append("Common_stats: ");
        Common_stats.ToString(tmp358);
      }
      if((Specific_stats != null) && __isset.specific_stats)
      {
        if(0 < tmp359++) { tmp358.Append(", "); }
        tmp358.Append("Specific_stats: ");
        Specific_stats.ToString(tmp358);
      }
      if((Last_error != null) && __isset.last_error)
      {
        if(0 < tmp359++) { tmp358.Append(", "); }
        tmp358.Append("Last_error: ");
        Last_error.ToString(tmp358);
      }
      tmp358.Append(')');
      return tmp358.ToString();
    }
  }

}
