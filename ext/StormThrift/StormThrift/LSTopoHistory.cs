/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class LSTopoHistory : TBase
  {

    public string Topology_id { get; set; }

    public long Time_stamp { get; set; }

    public List<string> Users { get; set; }

    public List<string> Groups { get; set; }

    public LSTopoHistory()
    {
    }

    public LSTopoHistory(string topology_id, long time_stamp, List<string> users, List<string> groups) : this()
    {
      this.Topology_id = topology_id;
      this.Time_stamp = time_stamp;
      this.Users = users;
      this.Groups = groups;
    }

    public LSTopoHistory DeepCopy()
    {
      var tmp659 = new LSTopoHistory();
      if((Topology_id != null))
      {
        tmp659.Topology_id = this.Topology_id;
      }
      tmp659.Time_stamp = this.Time_stamp;
      if((Users != null))
      {
        tmp659.Users = this.Users.DeepCopy();
      }
      if((Groups != null))
      {
        tmp659.Groups = this.Groups.DeepCopy();
      }
      return tmp659;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_topology_id = false;
        bool isset_time_stamp = false;
        bool isset_users = false;
        bool isset_groups = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Topology_id = await iprot.ReadStringAsync(cancellationToken);
                isset_topology_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Time_stamp = await iprot.ReadI64Async(cancellationToken);
                isset_time_stamp = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list660 = await iprot.ReadListBeginAsync(cancellationToken);
                  Users = new List<string>(_list660.Count);
                  for(int _i661 = 0; _i661 < _list660.Count; ++_i661)
                  {
                    string _elem662;
                    _elem662 = await iprot.ReadStringAsync(cancellationToken);
                    Users.Add(_elem662);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_users = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list663 = await iprot.ReadListBeginAsync(cancellationToken);
                  Groups = new List<string>(_list663.Count);
                  for(int _i664 = 0; _i664 < _list663.Count; ++_i664)
                  {
                    string _elem665;
                    _elem665 = await iprot.ReadStringAsync(cancellationToken);
                    Groups.Add(_elem665);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_groups = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_topology_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_time_stamp)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_users)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_groups)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp666 = new TStruct("LSTopoHistory");
        await oprot.WriteStructBeginAsync(tmp666, cancellationToken);
        var tmp667 = new TField();
        if((Topology_id != null))
        {
          tmp667.Name = "topology_id";
          tmp667.Type = TType.String;
          tmp667.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp667, cancellationToken);
          await oprot.WriteStringAsync(Topology_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp667.Name = "time_stamp";
        tmp667.Type = TType.I64;
        tmp667.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp667, cancellationToken);
        await oprot.WriteI64Async(Time_stamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Users != null))
        {
          tmp667.Name = "users";
          tmp667.Type = TType.List;
          tmp667.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp667, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Users.Count), cancellationToken);
            foreach (string _iter668 in Users)
            {
              await oprot.WriteStringAsync(_iter668, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Groups != null))
        {
          tmp667.Name = "groups";
          tmp667.Type = TType.List;
          tmp667.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp667, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Groups.Count), cancellationToken);
            foreach (string _iter669 in Groups)
            {
              await oprot.WriteStringAsync(_iter669, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is LSTopoHistory other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Topology_id, other.Topology_id)
        && global::System.Object.Equals(Time_stamp, other.Time_stamp)
        && TCollections.Equals(Users, other.Users)
        && TCollections.Equals(Groups, other.Groups);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Topology_id != null))
        {
          hashcode = (hashcode * 397) + Topology_id.GetHashCode();
        }
        hashcode = (hashcode * 397) + Time_stamp.GetHashCode();
        if((Users != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Users);
        }
        if((Groups != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Groups);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp670 = new StringBuilder("LSTopoHistory(");
      if((Topology_id != null))
      {
        tmp670.Append(", Topology_id: ");
        Topology_id.ToString(tmp670);
      }
      tmp670.Append(", Time_stamp: ");
      Time_stamp.ToString(tmp670);
      if((Users != null))
      {
        tmp670.Append(", Users: ");
        Users.ToString(tmp670);
      }
      if((Groups != null))
      {
        tmp670.Append(", Groups: ");
        Groups.ToString(tmp670);
      }
      tmp670.Append(')');
      return tmp670.ToString();
    }
  }

}
