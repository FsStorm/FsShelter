/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class DebugOptions : TBase
  {
    private bool _enable;
    private double _samplingpct;

    public bool Enable
    {
      get
      {
        return _enable;
      }
      set
      {
        __isset.enable = true;
        this._enable = value;
      }
    }

    public double Samplingpct
    {
      get
      {
        return _samplingpct;
      }
      set
      {
        __isset.samplingpct = true;
        this._samplingpct = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool enable;
      public bool samplingpct;
    }

    public DebugOptions()
    {
    }

    public DebugOptions DeepCopy()
    {
      var tmp307 = new DebugOptions();
      if(__isset.enable)
      {
        tmp307.Enable = this.Enable;
      }
      tmp307.__isset.enable = this.__isset.enable;
      if(__isset.samplingpct)
      {
        tmp307.Samplingpct = this.Samplingpct;
      }
      tmp307.__isset.samplingpct = this.__isset.samplingpct;
      return tmp307;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                Enable = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                Samplingpct = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp308 = new TStruct("DebugOptions");
        await oprot.WriteStructBeginAsync(tmp308, cancellationToken);
        var tmp309 = new TField();
        if(__isset.enable)
        {
          tmp309.Name = "enable";
          tmp309.Type = TType.Bool;
          tmp309.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
          await oprot.WriteBoolAsync(Enable, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.samplingpct)
        {
          tmp309.Name = "samplingpct";
          tmp309.Type = TType.Double;
          tmp309.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp309, cancellationToken);
          await oprot.WriteDoubleAsync(Samplingpct, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is DebugOptions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.enable == other.__isset.enable) && ((!__isset.enable) || (global::System.Object.Equals(Enable, other.Enable))))
        && ((__isset.samplingpct == other.__isset.samplingpct) && ((!__isset.samplingpct) || (global::System.Object.Equals(Samplingpct, other.Samplingpct))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.enable)
        {
          hashcode = (hashcode * 397) + Enable.GetHashCode();
        }
        if(__isset.samplingpct)
        {
          hashcode = (hashcode * 397) + Samplingpct.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp310 = new StringBuilder("DebugOptions(");
      int tmp311 = 0;
      if(__isset.enable)
      {
        if(0 < tmp311++) { tmp310.Append(", "); }
        tmp310.Append("Enable: ");
        Enable.ToString(tmp310);
      }
      if(__isset.samplingpct)
      {
        if(0 < tmp311++) { tmp310.Append(", "); }
        tmp310.Append("Samplingpct: ");
        Samplingpct.ToString(tmp310);
      }
      tmp310.Append(')');
      return tmp310.ToString();
    }
  }

}
