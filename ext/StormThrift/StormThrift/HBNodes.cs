/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class HBNodes : TBase
  {
    private List<string> _pulseIds;

    public List<string> PulseIds
    {
      get
      {
        return _pulseIds;
      }
      set
      {
        __isset.pulseIds = true;
        this._pulseIds = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool pulseIds;
    }

    public HBNodes()
    {
    }

    public HBNodes DeepCopy()
    {
      var tmp739 = new HBNodes();
      if((PulseIds != null) && __isset.pulseIds)
      {
        tmp739.PulseIds = this.PulseIds.DeepCopy();
      }
      tmp739.__isset.pulseIds = this.__isset.pulseIds;
      return tmp739;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list740 = await iprot.ReadListBeginAsync(cancellationToken);
                  PulseIds = new List<string>(_list740.Count);
                  for(int _i741 = 0; _i741 < _list740.Count; ++_i741)
                  {
                    string _elem742;
                    _elem742 = await iprot.ReadStringAsync(cancellationToken);
                    PulseIds.Add(_elem742);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp743 = new TStruct("HBNodes");
        await oprot.WriteStructBeginAsync(tmp743, cancellationToken);
        var tmp744 = new TField();
        if((PulseIds != null) && __isset.pulseIds)
        {
          tmp744.Name = "pulseIds";
          tmp744.Type = TType.List;
          tmp744.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp744, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, PulseIds.Count), cancellationToken);
            foreach (string _iter745 in PulseIds)
            {
              await oprot.WriteStringAsync(_iter745, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HBNodes other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.pulseIds == other.__isset.pulseIds) && ((!__isset.pulseIds) || (TCollections.Equals(PulseIds, other.PulseIds))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((PulseIds != null) && __isset.pulseIds)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(PulseIds);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp746 = new StringBuilder("HBNodes(");
      int tmp747 = 0;
      if((PulseIds != null) && __isset.pulseIds)
      {
        if(0 < tmp747++) { tmp746.Append(", "); }
        tmp746.Append("PulseIds: ");
        PulseIds.ToString(tmp746);
      }
      tmp746.Append(')');
      return tmp746.ToString();
    }
  }

}
