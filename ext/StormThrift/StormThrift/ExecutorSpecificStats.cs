/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ExecutorSpecificStats : TBase
  {
    private global::StormThrift.BoltStats _bolt;
    private global::StormThrift.SpoutStats _spout;

    public global::StormThrift.BoltStats Bolt
    {
      get
      {
        return _bolt;
      }
      set
      {
        __isset.bolt = true;
        this._bolt = value;
      }
    }

    public global::StormThrift.SpoutStats Spout
    {
      get
      {
        return _spout;
      }
      set
      {
        __isset.spout = true;
        this._spout = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool bolt;
      public bool spout;
    }

    public ExecutorSpecificStats()
    {
    }

    public ExecutorSpecificStats DeepCopy()
    {
      var tmp267 = new ExecutorSpecificStats();
      if((Bolt != null) && __isset.bolt)
      {
        tmp267.Bolt = (global::StormThrift.BoltStats)this.Bolt.DeepCopy();
      }
      tmp267.__isset.bolt = this.__isset.bolt;
      if((Spout != null) && __isset.spout)
      {
        tmp267.Spout = (global::StormThrift.SpoutStats)this.Spout.DeepCopy();
      }
      tmp267.__isset.spout = this.__isset.spout;
      return tmp267;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Bolt = new global::StormThrift.BoltStats();
                await Bolt.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Spout = new global::StormThrift.SpoutStats();
                await Spout.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp268 = new TStruct("ExecutorSpecificStats");
        await oprot.WriteStructBeginAsync(tmp268, cancellationToken);
        var tmp269 = new TField();
        if((Bolt != null) && __isset.bolt)
        {
          tmp269.Name = "bolt";
          tmp269.Type = TType.Struct;
          tmp269.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await Bolt.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Spout != null) && __isset.spout)
        {
          tmp269.Name = "spout";
          tmp269.Type = TType.Struct;
          tmp269.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp269, cancellationToken);
          await Spout.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ExecutorSpecificStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.bolt == other.__isset.bolt) && ((!__isset.bolt) || (global::System.Object.Equals(Bolt, other.Bolt))))
        && ((__isset.spout == other.__isset.spout) && ((!__isset.spout) || (global::System.Object.Equals(Spout, other.Spout))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Bolt != null) && __isset.bolt)
        {
          hashcode = (hashcode * 397) + Bolt.GetHashCode();
        }
        if((Spout != null) && __isset.spout)
        {
          hashcode = (hashcode * 397) + Spout.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp270 = new StringBuilder("ExecutorSpecificStats(");
      int tmp271 = 0;
      if((Bolt != null) && __isset.bolt)
      {
        if(0 < tmp271++) { tmp270.Append(", "); }
        tmp270.Append("Bolt: ");
        Bolt.ToString(tmp270);
      }
      if((Spout != null) && __isset.spout)
      {
        if(0 < tmp271++) { tmp270.Append(", "); }
        tmp270.Append("Spout: ");
        Spout.ToString(tmp270);
      }
      tmp270.Append(')');
      return tmp270.ToString();
    }
  }

}
