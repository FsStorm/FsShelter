/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class TopologyActionOptions : TBase
  {
    private global::StormThrift.KillOptions _kill_options;
    private global::StormThrift.RebalanceOptions _rebalance_options;

    public global::StormThrift.KillOptions Kill_options
    {
      get
      {
        return _kill_options;
      }
      set
      {
        __isset.kill_options = true;
        this._kill_options = value;
      }
    }

    public global::StormThrift.RebalanceOptions Rebalance_options
    {
      get
      {
        return _rebalance_options;
      }
      set
      {
        __isset.rebalance_options = true;
        this._rebalance_options = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool kill_options;
      public bool rebalance_options;
    }

    public TopologyActionOptions()
    {
    }

    public TopologyActionOptions DeepCopy()
    {
      var tmp571 = new TopologyActionOptions();
      if((Kill_options != null) && __isset.kill_options)
      {
        tmp571.Kill_options = (global::StormThrift.KillOptions)this.Kill_options.DeepCopy();
      }
      tmp571.__isset.kill_options = this.__isset.kill_options;
      if((Rebalance_options != null) && __isset.rebalance_options)
      {
        tmp571.Rebalance_options = (global::StormThrift.RebalanceOptions)this.Rebalance_options.DeepCopy();
      }
      tmp571.__isset.rebalance_options = this.__isset.rebalance_options;
      return tmp571;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Kill_options = new global::StormThrift.KillOptions();
                await Kill_options.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Rebalance_options = new global::StormThrift.RebalanceOptions();
                await Rebalance_options.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp572 = new TStruct("TopologyActionOptions");
        await oprot.WriteStructBeginAsync(tmp572, cancellationToken);
        var tmp573 = new TField();
        if((Kill_options != null) && __isset.kill_options)
        {
          tmp573.Name = "kill_options";
          tmp573.Type = TType.Struct;
          tmp573.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp573, cancellationToken);
          await Kill_options.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Rebalance_options != null) && __isset.rebalance_options)
        {
          tmp573.Name = "rebalance_options";
          tmp573.Type = TType.Struct;
          tmp573.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp573, cancellationToken);
          await Rebalance_options.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TopologyActionOptions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.kill_options == other.__isset.kill_options) && ((!__isset.kill_options) || (global::System.Object.Equals(Kill_options, other.Kill_options))))
        && ((__isset.rebalance_options == other.__isset.rebalance_options) && ((!__isset.rebalance_options) || (global::System.Object.Equals(Rebalance_options, other.Rebalance_options))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Kill_options != null) && __isset.kill_options)
        {
          hashcode = (hashcode * 397) + Kill_options.GetHashCode();
        }
        if((Rebalance_options != null) && __isset.rebalance_options)
        {
          hashcode = (hashcode * 397) + Rebalance_options.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp574 = new StringBuilder("TopologyActionOptions(");
      int tmp575 = 0;
      if((Kill_options != null) && __isset.kill_options)
      {
        if(0 < tmp575++) { tmp574.Append(", "); }
        tmp574.Append("Kill_options: ");
        Kill_options.ToString(tmp574);
      }
      if((Rebalance_options != null) && __isset.rebalance_options)
      {
        if(0 < tmp575++) { tmp574.Append(", "); }
        tmp574.Append("Rebalance_options: ");
        Rebalance_options.ToString(tmp574);
      }
      tmp574.Append(')');
      return tmp574.ToString();
    }
  }

}
