/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class BoltAggregateStats : TBase
  {
    private double _execute_latency_ms;
    private double _process_latency_ms;
    private long _executed;
    private double _capacity;

    public double Execute_latency_ms
    {
      get
      {
        return _execute_latency_ms;
      }
      set
      {
        __isset.execute_latency_ms = true;
        this._execute_latency_ms = value;
      }
    }

    public double Process_latency_ms
    {
      get
      {
        return _process_latency_ms;
      }
      set
      {
        __isset.process_latency_ms = true;
        this._process_latency_ms = value;
      }
    }

    public long Executed
    {
      get
      {
        return _executed;
      }
      set
      {
        __isset.executed = true;
        this._executed = value;
      }
    }

    public double Capacity
    {
      get
      {
        return _capacity;
      }
      set
      {
        __isset.capacity = true;
        this._capacity = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool execute_latency_ms;
      public bool process_latency_ms;
      public bool executed;
      public bool capacity;
    }

    public BoltAggregateStats()
    {
    }

    public BoltAggregateStats DeepCopy()
    {
      var tmp345 = new BoltAggregateStats();
      if(__isset.execute_latency_ms)
      {
        tmp345.Execute_latency_ms = this.Execute_latency_ms;
      }
      tmp345.__isset.execute_latency_ms = this.__isset.execute_latency_ms;
      if(__isset.process_latency_ms)
      {
        tmp345.Process_latency_ms = this.Process_latency_ms;
      }
      tmp345.__isset.process_latency_ms = this.__isset.process_latency_ms;
      if(__isset.executed)
      {
        tmp345.Executed = this.Executed;
      }
      tmp345.__isset.executed = this.__isset.executed;
      if(__isset.capacity)
      {
        tmp345.Capacity = this.Capacity;
      }
      tmp345.__isset.capacity = this.__isset.capacity;
      return tmp345;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double)
              {
                Execute_latency_ms = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                Process_latency_ms = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Executed = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                Capacity = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp346 = new TStruct("BoltAggregateStats");
        await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
        var tmp347 = new TField();
        if(__isset.execute_latency_ms)
        {
          tmp347.Name = "execute_latency_ms";
          tmp347.Type = TType.Double;
          tmp347.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
          await oprot.WriteDoubleAsync(Execute_latency_ms, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.process_latency_ms)
        {
          tmp347.Name = "process_latency_ms";
          tmp347.Type = TType.Double;
          tmp347.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
          await oprot.WriteDoubleAsync(Process_latency_ms, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.executed)
        {
          tmp347.Name = "executed";
          tmp347.Type = TType.I64;
          tmp347.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
          await oprot.WriteI64Async(Executed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.capacity)
        {
          tmp347.Name = "capacity";
          tmp347.Type = TType.Double;
          tmp347.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
          await oprot.WriteDoubleAsync(Capacity, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BoltAggregateStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.execute_latency_ms == other.__isset.execute_latency_ms) && ((!__isset.execute_latency_ms) || (global::System.Object.Equals(Execute_latency_ms, other.Execute_latency_ms))))
        && ((__isset.process_latency_ms == other.__isset.process_latency_ms) && ((!__isset.process_latency_ms) || (global::System.Object.Equals(Process_latency_ms, other.Process_latency_ms))))
        && ((__isset.executed == other.__isset.executed) && ((!__isset.executed) || (global::System.Object.Equals(Executed, other.Executed))))
        && ((__isset.capacity == other.__isset.capacity) && ((!__isset.capacity) || (global::System.Object.Equals(Capacity, other.Capacity))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.execute_latency_ms)
        {
          hashcode = (hashcode * 397) + Execute_latency_ms.GetHashCode();
        }
        if(__isset.process_latency_ms)
        {
          hashcode = (hashcode * 397) + Process_latency_ms.GetHashCode();
        }
        if(__isset.executed)
        {
          hashcode = (hashcode * 397) + Executed.GetHashCode();
        }
        if(__isset.capacity)
        {
          hashcode = (hashcode * 397) + Capacity.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp348 = new StringBuilder("BoltAggregateStats(");
      int tmp349 = 0;
      if(__isset.execute_latency_ms)
      {
        if(0 < tmp349++) { tmp348.Append(", "); }
        tmp348.Append("Execute_latency_ms: ");
        Execute_latency_ms.ToString(tmp348);
      }
      if(__isset.process_latency_ms)
      {
        if(0 < tmp349++) { tmp348.Append(", "); }
        tmp348.Append("Process_latency_ms: ");
        Process_latency_ms.ToString(tmp348);
      }
      if(__isset.executed)
      {
        if(0 < tmp349++) { tmp348.Append(", "); }
        tmp348.Append("Executed: ");
        Executed.ToString(tmp348);
      }
      if(__isset.capacity)
      {
        if(0 < tmp349++) { tmp348.Append(", "); }
        tmp348.Append("Capacity: ");
        Capacity.ToString(tmp348);
      }
      tmp348.Append(')');
      return tmp348.ToString();
    }
  }

}
