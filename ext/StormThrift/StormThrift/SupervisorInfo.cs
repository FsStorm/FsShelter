/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class SupervisorInfo : TBase
  {
    private string _assignment_id;
    private List<long> _used_ports;
    private List<long> _meta;
    private Dictionary<string, string> _scheduler_meta;
    private long _uptime_secs;
    private string _version;
    private Dictionary<string, double> _resources_map;

    public long Time_secs { get; set; }

    public string Hostname { get; set; }

    public string Assignment_id
    {
      get
      {
        return _assignment_id;
      }
      set
      {
        __isset.assignment_id = true;
        this._assignment_id = value;
      }
    }

    public List<long> Used_ports
    {
      get
      {
        return _used_ports;
      }
      set
      {
        __isset.used_ports = true;
        this._used_ports = value;
      }
    }

    public List<long> Meta
    {
      get
      {
        return _meta;
      }
      set
      {
        __isset.meta = true;
        this._meta = value;
      }
    }

    public Dictionary<string, string> Scheduler_meta
    {
      get
      {
        return _scheduler_meta;
      }
      set
      {
        __isset.scheduler_meta = true;
        this._scheduler_meta = value;
      }
    }

    public long Uptime_secs
    {
      get
      {
        return _uptime_secs;
      }
      set
      {
        __isset.uptime_secs = true;
        this._uptime_secs = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public Dictionary<string, double> Resources_map
    {
      get
      {
        return _resources_map;
      }
      set
      {
        __isset.resources_map = true;
        this._resources_map = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool assignment_id;
      public bool used_ports;
      public bool meta;
      public bool scheduler_meta;
      public bool uptime_secs;
      public bool version;
      public bool resources_map;
    }

    public SupervisorInfo()
    {
    }

    public SupervisorInfo(long time_secs, string hostname) : this()
    {
      this.Time_secs = time_secs;
      this.Hostname = hostname;
    }

    public SupervisorInfo DeepCopy()
    {
      var tmp501 = new SupervisorInfo();
      tmp501.Time_secs = this.Time_secs;
      if((Hostname != null))
      {
        tmp501.Hostname = this.Hostname;
      }
      if((Assignment_id != null) && __isset.assignment_id)
      {
        tmp501.Assignment_id = this.Assignment_id;
      }
      tmp501.__isset.assignment_id = this.__isset.assignment_id;
      if((Used_ports != null) && __isset.used_ports)
      {
        tmp501.Used_ports = this.Used_ports.DeepCopy();
      }
      tmp501.__isset.used_ports = this.__isset.used_ports;
      if((Meta != null) && __isset.meta)
      {
        tmp501.Meta = this.Meta.DeepCopy();
      }
      tmp501.__isset.meta = this.__isset.meta;
      if((Scheduler_meta != null) && __isset.scheduler_meta)
      {
        tmp501.Scheduler_meta = this.Scheduler_meta.DeepCopy();
      }
      tmp501.__isset.scheduler_meta = this.__isset.scheduler_meta;
      if(__isset.uptime_secs)
      {
        tmp501.Uptime_secs = this.Uptime_secs;
      }
      tmp501.__isset.uptime_secs = this.__isset.uptime_secs;
      if((Version != null) && __isset.version)
      {
        tmp501.Version = this.Version;
      }
      tmp501.__isset.version = this.__isset.version;
      if((Resources_map != null) && __isset.resources_map)
      {
        tmp501.Resources_map = this.Resources_map.DeepCopy();
      }
      tmp501.__isset.resources_map = this.__isset.resources_map;
      return tmp501;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_time_secs = false;
        bool isset_hostname = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Time_secs = await iprot.ReadI64Async(cancellationToken);
                isset_time_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Hostname = await iprot.ReadStringAsync(cancellationToken);
                isset_hostname = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Assignment_id = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list502 = await iprot.ReadListBeginAsync(cancellationToken);
                  Used_ports = new List<long>(_list502.Count);
                  for(int _i503 = 0; _i503 < _list502.Count; ++_i503)
                  {
                    long _elem504;
                    _elem504 = await iprot.ReadI64Async(cancellationToken);
                    Used_ports.Add(_elem504);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list505 = await iprot.ReadListBeginAsync(cancellationToken);
                  Meta = new List<long>(_list505.Count);
                  for(int _i506 = 0; _i506 < _list505.Count; ++_i506)
                  {
                    long _elem507;
                    _elem507 = await iprot.ReadI64Async(cancellationToken);
                    Meta.Add(_elem507);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map508 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Scheduler_meta = new Dictionary<string, string>(_map508.Count);
                  for(int _i509 = 0; _i509 < _map508.Count; ++_i509)
                  {
                    string _key510;
                    string _val511;
                    _key510 = await iprot.ReadStringAsync(cancellationToken);
                    _val511 = await iprot.ReadStringAsync(cancellationToken);
                    Scheduler_meta[_key510] = _val511;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                Uptime_secs = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map512 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Resources_map = new Dictionary<string, double>(_map512.Count);
                  for(int _i513 = 0; _i513 < _map512.Count; ++_i513)
                  {
                    string _key514;
                    double _val515;
                    _key514 = await iprot.ReadStringAsync(cancellationToken);
                    _val515 = await iprot.ReadDoubleAsync(cancellationToken);
                    Resources_map[_key514] = _val515;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_time_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hostname)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp516 = new TStruct("SupervisorInfo");
        await oprot.WriteStructBeginAsync(tmp516, cancellationToken);
        var tmp517 = new TField();
        tmp517.Name = "time_secs";
        tmp517.Type = TType.I64;
        tmp517.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
        await oprot.WriteI64Async(Time_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Hostname != null))
        {
          tmp517.Name = "hostname";
          tmp517.Type = TType.String;
          tmp517.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          await oprot.WriteStringAsync(Hostname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Assignment_id != null) && __isset.assignment_id)
        {
          tmp517.Name = "assignment_id";
          tmp517.Type = TType.String;
          tmp517.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          await oprot.WriteStringAsync(Assignment_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Used_ports != null) && __isset.used_ports)
        {
          tmp517.Name = "used_ports";
          tmp517.Type = TType.List;
          tmp517.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, Used_ports.Count), cancellationToken);
            foreach (long _iter518 in Used_ports)
            {
              await oprot.WriteI64Async(_iter518, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Meta != null) && __isset.meta)
        {
          tmp517.Name = "meta";
          tmp517.Type = TType.List;
          tmp517.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, Meta.Count), cancellationToken);
            foreach (long _iter519 in Meta)
            {
              await oprot.WriteI64Async(_iter519, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Scheduler_meta != null) && __isset.scheduler_meta)
        {
          tmp517.Name = "scheduler_meta";
          tmp517.Type = TType.Map;
          tmp517.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Scheduler_meta.Count), cancellationToken);
            foreach (string _iter520 in Scheduler_meta.Keys)
            {
              await oprot.WriteStringAsync(_iter520, cancellationToken);
              await oprot.WriteStringAsync(Scheduler_meta[_iter520], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uptime_secs)
        {
          tmp517.Name = "uptime_secs";
          tmp517.Type = TType.I64;
          tmp517.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          await oprot.WriteI64Async(Uptime_secs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Version != null) && __isset.version)
        {
          tmp517.Name = "version";
          tmp517.Type = TType.String;
          tmp517.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Resources_map != null) && __isset.resources_map)
        {
          tmp517.Name = "resources_map";
          tmp517.Type = TType.Map;
          tmp517.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp517, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Double, Resources_map.Count), cancellationToken);
            foreach (string _iter521 in Resources_map.Keys)
            {
              await oprot.WriteStringAsync(_iter521, cancellationToken);
              await oprot.WriteDoubleAsync(Resources_map[_iter521], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SupervisorInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Time_secs, other.Time_secs)
        && global::System.Object.Equals(Hostname, other.Hostname)
        && ((__isset.assignment_id == other.__isset.assignment_id) && ((!__isset.assignment_id) || (global::System.Object.Equals(Assignment_id, other.Assignment_id))))
        && ((__isset.used_ports == other.__isset.used_ports) && ((!__isset.used_ports) || (TCollections.Equals(Used_ports, other.Used_ports))))
        && ((__isset.meta == other.__isset.meta) && ((!__isset.meta) || (TCollections.Equals(Meta, other.Meta))))
        && ((__isset.scheduler_meta == other.__isset.scheduler_meta) && ((!__isset.scheduler_meta) || (TCollections.Equals(Scheduler_meta, other.Scheduler_meta))))
        && ((__isset.uptime_secs == other.__isset.uptime_secs) && ((!__isset.uptime_secs) || (global::System.Object.Equals(Uptime_secs, other.Uptime_secs))))
        && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
        && ((__isset.resources_map == other.__isset.resources_map) && ((!__isset.resources_map) || (TCollections.Equals(Resources_map, other.Resources_map))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Time_secs.GetHashCode();
        if((Hostname != null))
        {
          hashcode = (hashcode * 397) + Hostname.GetHashCode();
        }
        if((Assignment_id != null) && __isset.assignment_id)
        {
          hashcode = (hashcode * 397) + Assignment_id.GetHashCode();
        }
        if((Used_ports != null) && __isset.used_ports)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Used_ports);
        }
        if((Meta != null) && __isset.meta)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Meta);
        }
        if((Scheduler_meta != null) && __isset.scheduler_meta)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Scheduler_meta);
        }
        if(__isset.uptime_secs)
        {
          hashcode = (hashcode * 397) + Uptime_secs.GetHashCode();
        }
        if((Version != null) && __isset.version)
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
        if((Resources_map != null) && __isset.resources_map)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Resources_map);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp522 = new StringBuilder("SupervisorInfo(");
      tmp522.Append(", Time_secs: ");
      Time_secs.ToString(tmp522);
      if((Hostname != null))
      {
        tmp522.Append(", Hostname: ");
        Hostname.ToString(tmp522);
      }
      if((Assignment_id != null) && __isset.assignment_id)
      {
        tmp522.Append(", Assignment_id: ");
        Assignment_id.ToString(tmp522);
      }
      if((Used_ports != null) && __isset.used_ports)
      {
        tmp522.Append(", Used_ports: ");
        Used_ports.ToString(tmp522);
      }
      if((Meta != null) && __isset.meta)
      {
        tmp522.Append(", Meta: ");
        Meta.ToString(tmp522);
      }
      if((Scheduler_meta != null) && __isset.scheduler_meta)
      {
        tmp522.Append(", Scheduler_meta: ");
        Scheduler_meta.ToString(tmp522);
      }
      if(__isset.uptime_secs)
      {
        tmp522.Append(", Uptime_secs: ");
        Uptime_secs.ToString(tmp522);
      }
      if((Version != null) && __isset.version)
      {
        tmp522.Append(", Version: ");
        Version.ToString(tmp522);
      }
      if((Resources_map != null) && __isset.resources_map)
      {
        tmp522.Append(", Resources_map: ");
        Resources_map.ToString(tmp522);
      }
      tmp522.Append(')');
      return tmp522.ToString();
    }
  }

}
