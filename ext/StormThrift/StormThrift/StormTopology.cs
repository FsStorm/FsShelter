/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class StormTopology : TBase
  {
    private List<byte[]> _worker_hooks;

    public Dictionary<string, global::StormThrift.SpoutSpec> Spouts { get; set; }

    public Dictionary<string, global::StormThrift.Bolt> Bolts { get; set; }

    public Dictionary<string, global::StormThrift.StateSpoutSpec> State_spouts { get; set; }

    public List<byte[]> Worker_hooks
    {
      get
      {
        return _worker_hooks;
      }
      set
      {
        __isset.worker_hooks = true;
        this._worker_hooks = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool worker_hooks;
    }

    public StormTopology()
    {
    }

    public StormTopology(Dictionary<string, global::StormThrift.SpoutSpec> spouts, Dictionary<string, global::StormThrift.Bolt> bolts, Dictionary<string, global::StormThrift.StateSpoutSpec> state_spouts) : this()
    {
      this.Spouts = spouts;
      this.Bolts = bolts;
      this.State_spouts = state_spouts;
    }

    public StormTopology DeepCopy()
    {
      var tmp81 = new StormTopology();
      if((Spouts != null))
      {
        tmp81.Spouts = this.Spouts.DeepCopy();
      }
      if((Bolts != null))
      {
        tmp81.Bolts = this.Bolts.DeepCopy();
      }
      if((State_spouts != null))
      {
        tmp81.State_spouts = this.State_spouts.DeepCopy();
      }
      if((Worker_hooks != null) && __isset.worker_hooks)
      {
        tmp81.Worker_hooks = this.Worker_hooks.DeepCopy();
      }
      tmp81.__isset.worker_hooks = this.__isset.worker_hooks;
      return tmp81;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_spouts = false;
        bool isset_bolts = false;
        bool isset_state_spouts = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map82 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Spouts = new Dictionary<string, global::StormThrift.SpoutSpec>(_map82.Count);
                  for(int _i83 = 0; _i83 < _map82.Count; ++_i83)
                  {
                    string _key84;
                    global::StormThrift.SpoutSpec _val85;
                    _key84 = await iprot.ReadStringAsync(cancellationToken);
                    _val85 = new global::StormThrift.SpoutSpec();
                    await _val85.ReadAsync(iprot, cancellationToken);
                    Spouts[_key84] = _val85;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_spouts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map86 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Bolts = new Dictionary<string, global::StormThrift.Bolt>(_map86.Count);
                  for(int _i87 = 0; _i87 < _map86.Count; ++_i87)
                  {
                    string _key88;
                    global::StormThrift.Bolt _val89;
                    _key88 = await iprot.ReadStringAsync(cancellationToken);
                    _val89 = new global::StormThrift.Bolt();
                    await _val89.ReadAsync(iprot, cancellationToken);
                    Bolts[_key88] = _val89;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_bolts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map90 = await iprot.ReadMapBeginAsync(cancellationToken);
                  State_spouts = new Dictionary<string, global::StormThrift.StateSpoutSpec>(_map90.Count);
                  for(int _i91 = 0; _i91 < _map90.Count; ++_i91)
                  {
                    string _key92;
                    global::StormThrift.StateSpoutSpec _val93;
                    _key92 = await iprot.ReadStringAsync(cancellationToken);
                    _val93 = new global::StormThrift.StateSpoutSpec();
                    await _val93.ReadAsync(iprot, cancellationToken);
                    State_spouts[_key92] = _val93;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_state_spouts = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TList _list94 = await iprot.ReadListBeginAsync(cancellationToken);
                  Worker_hooks = new List<byte[]>(_list94.Count);
                  for(int _i95 = 0; _i95 < _list94.Count; ++_i95)
                  {
                    byte[] _elem96;
                    _elem96 = await iprot.ReadBinaryAsync(cancellationToken);
                    Worker_hooks.Add(_elem96);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_spouts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_bolts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_state_spouts)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp97 = new TStruct("StormTopology");
        await oprot.WriteStructBeginAsync(tmp97, cancellationToken);
        var tmp98 = new TField();
        if((Spouts != null))
        {
          tmp98.Name = "spouts";
          tmp98.Type = TType.Map;
          tmp98.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Spouts.Count), cancellationToken);
            foreach (string _iter99 in Spouts.Keys)
            {
              await oprot.WriteStringAsync(_iter99, cancellationToken);
              await Spouts[_iter99].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Bolts != null))
        {
          tmp98.Name = "bolts";
          tmp98.Type = TType.Map;
          tmp98.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Bolts.Count), cancellationToken);
            foreach (string _iter100 in Bolts.Keys)
            {
              await oprot.WriteStringAsync(_iter100, cancellationToken);
              await Bolts[_iter100].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((State_spouts != null))
        {
          tmp98.Name = "state_spouts";
          tmp98.Type = TType.Map;
          tmp98.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, State_spouts.Count), cancellationToken);
            foreach (string _iter101 in State_spouts.Keys)
            {
              await oprot.WriteStringAsync(_iter101, cancellationToken);
              await State_spouts[_iter101].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Worker_hooks != null) && __isset.worker_hooks)
        {
          tmp98.Name = "worker_hooks";
          tmp98.Type = TType.List;
          tmp98.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp98, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Worker_hooks.Count), cancellationToken);
            foreach (byte[] _iter102 in Worker_hooks)
            {
              await oprot.WriteBinaryAsync(_iter102, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StormTopology other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Spouts, other.Spouts)
        && TCollections.Equals(Bolts, other.Bolts)
        && TCollections.Equals(State_spouts, other.State_spouts)
        && ((__isset.worker_hooks == other.__isset.worker_hooks) && ((!__isset.worker_hooks) || (TCollections.Equals(Worker_hooks, other.Worker_hooks))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Spouts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Spouts);
        }
        if((Bolts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Bolts);
        }
        if((State_spouts != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(State_spouts);
        }
        if((Worker_hooks != null) && __isset.worker_hooks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Worker_hooks);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp103 = new StringBuilder("StormTopology(");
      if((Spouts != null))
      {
        tmp103.Append(", Spouts: ");
        Spouts.ToString(tmp103);
      }
      if((Bolts != null))
      {
        tmp103.Append(", Bolts: ");
        Bolts.ToString(tmp103);
      }
      if((State_spouts != null))
      {
        tmp103.Append(", State_spouts: ");
        State_spouts.ToString(tmp103);
      }
      if((Worker_hooks != null) && __isset.worker_hooks)
      {
        tmp103.Append(", Worker_hooks: ");
        Worker_hooks.ToString(tmp103);
      }
      tmp103.Append(')');
      return tmp103.ToString();
    }
  }

}
