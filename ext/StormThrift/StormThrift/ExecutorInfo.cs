/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class ExecutorInfo : TBase
  {

    public int Task_start { get; set; }

    public int Task_end { get; set; }

    public ExecutorInfo()
    {
    }

    public ExecutorInfo(int task_start, int task_end) : this()
    {
      this.Task_start = task_start;
      this.Task_end = task_end;
    }

    public ExecutorInfo DeepCopy()
    {
      var tmp297 = new ExecutorInfo();
      tmp297.Task_start = this.Task_start;
      tmp297.Task_end = this.Task_end;
      return tmp297;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_task_start = false;
        bool isset_task_end = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Task_start = await iprot.ReadI32Async(cancellationToken);
                isset_task_start = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Task_end = await iprot.ReadI32Async(cancellationToken);
                isset_task_end = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_task_start)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_task_end)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp298 = new TStruct("ExecutorInfo");
        await oprot.WriteStructBeginAsync(tmp298, cancellationToken);
        var tmp299 = new TField();
        tmp299.Name = "task_start";
        tmp299.Type = TType.I32;
        tmp299.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
        await oprot.WriteI32Async(Task_start, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp299.Name = "task_end";
        tmp299.Type = TType.I32;
        tmp299.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp299, cancellationToken);
        await oprot.WriteI32Async(Task_end, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ExecutorInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Task_start, other.Task_start)
        && global::System.Object.Equals(Task_end, other.Task_end);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Task_start.GetHashCode();
        hashcode = (hashcode * 397) + Task_end.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp300 = new StringBuilder("ExecutorInfo(");
      tmp300.Append(", Task_start: ");
      Task_start.ToString(tmp300);
      tmp300.Append(", Task_end: ");
      Task_end.ToString(tmp300);
      tmp300.Append(')');
      return tmp300.ToString();
    }
  }

}
