/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class SubmitOptions : TBase
  {
    private global::StormThrift.Credentials _creds;

    /// <summary>
    /// 
    /// <seealso cref="global::StormThrift.TopologyInitialStatus"/>
    /// </summary>
    public global::StormThrift.TopologyInitialStatus Initial_status { get; set; }

    public global::StormThrift.Credentials Creds
    {
      get
      {
        return _creds;
      }
      set
      {
        __isset.creds = true;
        this._creds = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool creds;
    }

    public SubmitOptions()
    {
    }

    public SubmitOptions(global::StormThrift.TopologyInitialStatus initial_status) : this()
    {
      this.Initial_status = initial_status;
    }

    public SubmitOptions DeepCopy()
    {
      var tmp463 = new SubmitOptions();
      tmp463.Initial_status = this.Initial_status;
      if((Creds != null) && __isset.creds)
      {
        tmp463.Creds = (global::StormThrift.Credentials)this.Creds.DeepCopy();
      }
      tmp463.__isset.creds = this.__isset.creds;
      return tmp463;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_initial_status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Initial_status = (global::StormThrift.TopologyInitialStatus)await iprot.ReadI32Async(cancellationToken);
                isset_initial_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Creds = new global::StormThrift.Credentials();
                await Creds.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_initial_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp464 = new TStruct("SubmitOptions");
        await oprot.WriteStructBeginAsync(tmp464, cancellationToken);
        var tmp465 = new TField();
        tmp465.Name = "initial_status";
        tmp465.Type = TType.I32;
        tmp465.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp465, cancellationToken);
        await oprot.WriteI32Async((int)Initial_status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Creds != null) && __isset.creds)
        {
          tmp465.Name = "creds";
          tmp465.Type = TType.Struct;
          tmp465.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp465, cancellationToken);
          await Creds.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SubmitOptions other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Initial_status, other.Initial_status)
        && ((__isset.creds == other.__isset.creds) && ((!__isset.creds) || (global::System.Object.Equals(Creds, other.Creds))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Initial_status.GetHashCode();
        if((Creds != null) && __isset.creds)
        {
          hashcode = (hashcode * 397) + Creds.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp466 = new StringBuilder("SubmitOptions(");
      tmp466.Append(", Initial_status: ");
      Initial_status.ToString(tmp466);
      if((Creds != null) && __isset.creds)
      {
        tmp466.Append(", Creds: ");
        Creds.ToString(tmp466);
      }
      tmp466.Append(')');
      return tmp466.ToString();
    }
  }

}
