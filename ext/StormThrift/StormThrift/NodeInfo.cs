/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class NodeInfo : TBase
  {

    public string Node { get; set; }

    public THashSet<long> Port { get; set; }

    public NodeInfo()
    {
    }

    public NodeInfo(string node, THashSet<long> port) : this()
    {
      this.Node = node;
      this.Port = port;
    }

    public NodeInfo DeepCopy()
    {
      var tmp524 = new NodeInfo();
      if((Node != null))
      {
        tmp524.Node = this.Node;
      }
      if((Port != null))
      {
        tmp524.Port = this.Port.DeepCopy();
      }
      return tmp524;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_node = false;
        bool isset_port = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Node = await iprot.ReadStringAsync(cancellationToken);
                isset_node = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Set)
              {
                {
                  TSet _set525 = await iprot.ReadSetBeginAsync(cancellationToken);
                  Port = new THashSet<long>(_set525.Count);
                  for(int _i526 = 0; _i526 < _set525.Count; ++_i526)
                  {
                    long _elem527;
                    _elem527 = await iprot.ReadI64Async(cancellationToken);
                    Port.Add(_elem527);
                  }
                  await iprot.ReadSetEndAsync(cancellationToken);
                }
                isset_port = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_node)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_port)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp528 = new TStruct("NodeInfo");
        await oprot.WriteStructBeginAsync(tmp528, cancellationToken);
        var tmp529 = new TField();
        if((Node != null))
        {
          tmp529.Name = "node";
          tmp529.Type = TType.String;
          tmp529.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp529, cancellationToken);
          await oprot.WriteStringAsync(Node, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Port != null))
        {
          tmp529.Name = "port";
          tmp529.Type = TType.Set;
          tmp529.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp529, cancellationToken);
          {
            await oprot.WriteSetBeginAsync(new TSet(TType.I64, Port.Count), cancellationToken);
            foreach (long _iter530 in Port)
            {
              await oprot.WriteI64Async(_iter530, cancellationToken);
            }
            await oprot.WriteSetEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NodeInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Node, other.Node)
        && TCollections.Equals(Port, other.Port);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Node != null))
        {
          hashcode = (hashcode * 397) + Node.GetHashCode();
        }
        if((Port != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Port);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp531 = new StringBuilder("NodeInfo(");
      if((Node != null))
      {
        tmp531.Append(", Node: ");
        Node.ToString(tmp531);
      }
      if((Port != null))
      {
        tmp531.Append(", Port: ");
        Port.ToString(tmp531);
      }
      tmp531.Append(')');
      return tmp531.ToString();
    }
  }

}
