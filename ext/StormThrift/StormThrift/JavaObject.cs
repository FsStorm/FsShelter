/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class JavaObject : TBase
  {

    public string Full_class_name { get; set; }

    public List<global::StormThrift.JavaObjectArg> Args_list { get; set; }

    public JavaObject()
    {
    }

    public JavaObject(string full_class_name, List<global::StormThrift.JavaObjectArg> args_list) : this()
    {
      this.Full_class_name = full_class_name;
      this.Args_list = args_list;
    }

    public JavaObject DeepCopy()
    {
      var tmp5 = new JavaObject();
      if((Full_class_name != null))
      {
        tmp5.Full_class_name = this.Full_class_name;
      }
      if((Args_list != null))
      {
        tmp5.Args_list = this.Args_list.DeepCopy();
      }
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_full_class_name = false;
        bool isset_args_list = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Full_class_name = await iprot.ReadStringAsync(cancellationToken);
                isset_full_class_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list6 = await iprot.ReadListBeginAsync(cancellationToken);
                  Args_list = new List<global::StormThrift.JavaObjectArg>(_list6.Count);
                  for(int _i7 = 0; _i7 < _list6.Count; ++_i7)
                  {
                    global::StormThrift.JavaObjectArg _elem8;
                    _elem8 = new global::StormThrift.JavaObjectArg();
                    await _elem8.ReadAsync(iprot, cancellationToken);
                    Args_list.Add(_elem8);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_args_list = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_full_class_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_args_list)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp9 = new TStruct("JavaObject");
        await oprot.WriteStructBeginAsync(tmp9, cancellationToken);
        var tmp10 = new TField();
        if((Full_class_name != null))
        {
          tmp10.Name = "full_class_name";
          tmp10.Type = TType.String;
          tmp10.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          await oprot.WriteStringAsync(Full_class_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Args_list != null))
        {
          tmp10.Name = "args_list";
          tmp10.Type = TType.List;
          tmp10.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp10, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Args_list.Count), cancellationToken);
            foreach (global::StormThrift.JavaObjectArg _iter11 in Args_list)
            {
              await _iter11.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is JavaObject other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Full_class_name, other.Full_class_name)
        && TCollections.Equals(Args_list, other.Args_list);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Full_class_name != null))
        {
          hashcode = (hashcode * 397) + Full_class_name.GetHashCode();
        }
        if((Args_list != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Args_list);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp12 = new StringBuilder("JavaObject(");
      if((Full_class_name != null))
      {
        tmp12.Append(", Full_class_name: ");
        Full_class_name.ToString(tmp12);
      }
      if((Args_list != null))
      {
        tmp12.Append(", Args_list: ");
        Args_list.ToString(tmp12);
      }
      tmp12.Append(')');
      return tmp12.ToString();
    }
  }

}
