/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class NimbusSummary : TBase
  {

    public string Host { get; set; }

    public int Port { get; set; }

    public int Uptime_secs { get; set; }

    public bool IsLeader { get; set; }

    public string Version { get; set; }

    public NimbusSummary()
    {
    }

    public NimbusSummary(string host, int port, int uptime_secs, bool isLeader, string version) : this()
    {
      this.Host = host;
      this.Port = port;
      this.Uptime_secs = uptime_secs;
      this.IsLeader = isLeader;
      this.Version = version;
    }

    public NimbusSummary DeepCopy()
    {
      var tmp150 = new NimbusSummary();
      if((Host != null))
      {
        tmp150.Host = this.Host;
      }
      tmp150.Port = this.Port;
      tmp150.Uptime_secs = this.Uptime_secs;
      tmp150.IsLeader = this.IsLeader;
      if((Version != null))
      {
        tmp150.Version = this.Version;
      }
      return tmp150;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_host = false;
        bool isset_port = false;
        bool isset_uptime_secs = false;
        bool isset_isLeader = false;
        bool isset_version = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
                isset_host = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Port = await iprot.ReadI32Async(cancellationToken);
                isset_port = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Uptime_secs = await iprot.ReadI32Async(cancellationToken);
                isset_uptime_secs = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                IsLeader = await iprot.ReadBoolAsync(cancellationToken);
                isset_isLeader = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_host)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_port)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_uptime_secs)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_isLeader)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp151 = new TStruct("NimbusSummary");
        await oprot.WriteStructBeginAsync(tmp151, cancellationToken);
        var tmp152 = new TField();
        if((Host != null))
        {
          tmp152.Name = "host";
          tmp152.Type = TType.String;
          tmp152.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp152.Name = "port";
        tmp152.Type = TType.I32;
        tmp152.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
        await oprot.WriteI32Async(Port, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp152.Name = "uptime_secs";
        tmp152.Type = TType.I32;
        tmp152.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
        await oprot.WriteI32Async(Uptime_secs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp152.Name = "isLeader";
        tmp152.Type = TType.Bool;
        tmp152.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
        await oprot.WriteBoolAsync(IsLeader, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Version != null))
        {
          tmp152.Name = "version";
          tmp152.Type = TType.String;
          tmp152.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp152, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is NimbusSummary other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Host, other.Host)
        && global::System.Object.Equals(Port, other.Port)
        && global::System.Object.Equals(Uptime_secs, other.Uptime_secs)
        && global::System.Object.Equals(IsLeader, other.IsLeader)
        && global::System.Object.Equals(Version, other.Version);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null))
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        hashcode = (hashcode * 397) + Port.GetHashCode();
        hashcode = (hashcode * 397) + Uptime_secs.GetHashCode();
        hashcode = (hashcode * 397) + IsLeader.GetHashCode();
        if((Version != null))
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp153 = new StringBuilder("NimbusSummary(");
      if((Host != null))
      {
        tmp153.Append(", Host: ");
        Host.ToString(tmp153);
      }
      tmp153.Append(", Port: ");
      Port.ToString(tmp153);
      tmp153.Append(", Uptime_secs: ");
      Uptime_secs.ToString(tmp153);
      tmp153.Append(", IsLeader: ");
      IsLeader.ToString(tmp153);
      if((Version != null))
      {
        tmp153.Append(", Version: ");
        Version.ToString(tmp153);
      }
      tmp153.Append(')');
      return tmp153.ToString();
    }
  }

}
