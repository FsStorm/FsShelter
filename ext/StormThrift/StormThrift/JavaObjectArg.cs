/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace StormThrift
{

  public partial class JavaObjectArg : TBase
  {
    private int _int_arg;
    private long _long_arg;
    private string _string_arg;
    private bool _bool_arg;
    private byte[] _binary_arg;
    private double _double_arg;

    public int Int_arg
    {
      get
      {
        return _int_arg;
      }
      set
      {
        __isset.int_arg = true;
        this._int_arg = value;
      }
    }

    public long Long_arg
    {
      get
      {
        return _long_arg;
      }
      set
      {
        __isset.long_arg = true;
        this._long_arg = value;
      }
    }

    public string String_arg
    {
      get
      {
        return _string_arg;
      }
      set
      {
        __isset.string_arg = true;
        this._string_arg = value;
      }
    }

    public bool Bool_arg
    {
      get
      {
        return _bool_arg;
      }
      set
      {
        __isset.bool_arg = true;
        this._bool_arg = value;
      }
    }

    public byte[] Binary_arg
    {
      get
      {
        return _binary_arg;
      }
      set
      {
        __isset.binary_arg = true;
        this._binary_arg = value;
      }
    }

    public double Double_arg
    {
      get
      {
        return _double_arg;
      }
      set
      {
        __isset.double_arg = true;
        this._double_arg = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool int_arg;
      public bool long_arg;
      public bool string_arg;
      public bool bool_arg;
      public bool binary_arg;
      public bool double_arg;
    }

    public JavaObjectArg()
    {
    }

    public JavaObjectArg DeepCopy()
    {
      var tmp0 = new JavaObjectArg();
      if(__isset.int_arg)
      {
        tmp0.Int_arg = this.Int_arg;
      }
      tmp0.__isset.int_arg = this.__isset.int_arg;
      if(__isset.long_arg)
      {
        tmp0.Long_arg = this.Long_arg;
      }
      tmp0.__isset.long_arg = this.__isset.long_arg;
      if((String_arg != null) && __isset.string_arg)
      {
        tmp0.String_arg = this.String_arg;
      }
      tmp0.__isset.string_arg = this.__isset.string_arg;
      if(__isset.bool_arg)
      {
        tmp0.Bool_arg = this.Bool_arg;
      }
      tmp0.__isset.bool_arg = this.__isset.bool_arg;
      if((Binary_arg != null) && __isset.binary_arg)
      {
        tmp0.Binary_arg = this.Binary_arg.ToArray();
      }
      tmp0.__isset.binary_arg = this.__isset.binary_arg;
      if(__isset.double_arg)
      {
        tmp0.Double_arg = this.Double_arg;
      }
      tmp0.__isset.double_arg = this.__isset.double_arg;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Int_arg = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Long_arg = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                String_arg = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Bool_arg = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Binary_arg = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Double)
              {
                Double_arg = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("JavaObjectArg");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if(__isset.int_arg)
        {
          tmp2.Name = "int_arg";
          tmp2.Type = TType.I32;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Int_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.long_arg)
        {
          tmp2.Name = "long_arg";
          tmp2.Type = TType.I64;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI64Async(Long_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((String_arg != null) && __isset.string_arg)
        {
          tmp2.Name = "string_arg";
          tmp2.Type = TType.String;
          tmp2.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteStringAsync(String_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.bool_arg)
        {
          tmp2.Name = "bool_arg";
          tmp2.Type = TType.Bool;
          tmp2.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteBoolAsync(Bool_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Binary_arg != null) && __isset.binary_arg)
        {
          tmp2.Name = "binary_arg";
          tmp2.Type = TType.String;
          tmp2.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteBinaryAsync(Binary_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.double_arg)
        {
          tmp2.Name = "double_arg";
          tmp2.Type = TType.Double;
          tmp2.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteDoubleAsync(Double_arg, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is JavaObjectArg other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.int_arg == other.__isset.int_arg) && ((!__isset.int_arg) || (global::System.Object.Equals(Int_arg, other.Int_arg))))
        && ((__isset.long_arg == other.__isset.long_arg) && ((!__isset.long_arg) || (global::System.Object.Equals(Long_arg, other.Long_arg))))
        && ((__isset.string_arg == other.__isset.string_arg) && ((!__isset.string_arg) || (global::System.Object.Equals(String_arg, other.String_arg))))
        && ((__isset.bool_arg == other.__isset.bool_arg) && ((!__isset.bool_arg) || (global::System.Object.Equals(Bool_arg, other.Bool_arg))))
        && ((__isset.binary_arg == other.__isset.binary_arg) && ((!__isset.binary_arg) || (TCollections.Equals(Binary_arg, other.Binary_arg))))
        && ((__isset.double_arg == other.__isset.double_arg) && ((!__isset.double_arg) || (global::System.Object.Equals(Double_arg, other.Double_arg))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.int_arg)
        {
          hashcode = (hashcode * 397) + Int_arg.GetHashCode();
        }
        if(__isset.long_arg)
        {
          hashcode = (hashcode * 397) + Long_arg.GetHashCode();
        }
        if((String_arg != null) && __isset.string_arg)
        {
          hashcode = (hashcode * 397) + String_arg.GetHashCode();
        }
        if(__isset.bool_arg)
        {
          hashcode = (hashcode * 397) + Bool_arg.GetHashCode();
        }
        if((Binary_arg != null) && __isset.binary_arg)
        {
          hashcode = (hashcode * 397) + Binary_arg.GetHashCode();
        }
        if(__isset.double_arg)
        {
          hashcode = (hashcode * 397) + Double_arg.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("JavaObjectArg(");
      int tmp4 = 0;
      if(__isset.int_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Int_arg: ");
        Int_arg.ToString(tmp3);
      }
      if(__isset.long_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Long_arg: ");
        Long_arg.ToString(tmp3);
      }
      if((String_arg != null) && __isset.string_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("String_arg: ");
        String_arg.ToString(tmp3);
      }
      if(__isset.bool_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Bool_arg: ");
        Bool_arg.ToString(tmp3);
      }
      if((Binary_arg != null) && __isset.binary_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Binary_arg: ");
        Binary_arg.ToString(tmp3);
      }
      if(__isset.double_arg)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Double_arg: ");
        Double_arg.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
