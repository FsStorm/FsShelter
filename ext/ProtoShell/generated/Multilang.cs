// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multilang.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Prolucid.ProtoShell.Messages {

  /// <summary>Holder for reflection information generated from multilang.proto</summary>
  public static partial class MultilangReflection {

    #region Descriptor
    /// <summary>File descriptor for multilang.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MultilangReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9tdWx0aWxhbmcucHJvdG8aHGdvb2dsZS9wcm90b2J1Zi9zdHJ1Y3QucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8imwEKB0NvbnRl",
            "eHQSDgoGdGFza0lkGAEgASgFEjQKDnRhc2tDb21wb25lbnRzGAIgAygLMhwu",
            "Q29udGV4dC5UYXNrQ29tcG9uZW50c0VudHJ5EhMKC2NvbXBvbmVudElkGAMg",
            "ASgJGjUKE1Rhc2tDb21wb25lbnRzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgJOgI4ASKlAQoJSGFuZHNoYWtlEg4KBnBpZERpchgBIAEoCRIZ",
            "Cgdjb250ZXh0GAIgASgLMgguQ29udGV4dBImCgZjb25maWcYAyADKAsyFi5I",
            "YW5kc2hha2UuQ29uZmlnRW50cnkaRQoLQ29uZmlnRW50cnkSCwoDa2V5GAEg",
            "ASgJEiUKBXZhbHVlGAIgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlOgI4",
            "ASL+AQoHVmFyaWFudBIQCgZzdHJWYWwYASABKAlIABISCghpbnQzMlZhbBgC",
            "IAEoBUgAEhIKCGludDY0VmFsGAMgASgDSAASEgoIZmxvYXRWYWwYBCABKAJI",
            "ABITCglkb3VibGVWYWwYBSABKAFIABIRCgdib29sVmFsGAYgASgISAASEgoI",
            "Ynl0ZXNWYWwYByABKAxIABIyCgx0aW1lc3RhbXBWYWwYCCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wSAASLQoHbm9uZVZhbBgJIAEoDjIaLmdv",
            "b2dsZS5wcm90b2J1Zi5OdWxsVmFsdWVIAEIGCgRraW5kIlsKCFN0cmVhbUlu",
            "EgoKAmlkGAEgASgJEgwKBGNvbXAYAiABKAkSDgoGc3RyZWFtGAMgASgJEgwK",
            "BHRhc2sYBCABKAUSFwoFdHVwbGUYBSADKAsyCC5WYXJpYW50Ih8KDFRhc2tJ",
            "ZHNSZXBseRIPCgd0YXNrSWRzGAEgAygFIgsKCUhlYXJ0YmVhdCINCgtOZXh0",
            "Q29tbWFuZCIYCgpBY2tDb21tYW5kEgoKAmlkGAEgASgJIhkKC05hY2tDb21t",
            "YW5kEgoKAmlkGAEgASgJIhEKD0FjdGl2YXRlQ29tbWFuZCITChFEZWFjdGl2",
            "YXRlQ29tbWFuZCLLAgoIU3Rvcm1Nc2cSHwoJaGFuZHNoYWtlGAEgASgLMgou",
            "SGFuZHNoYWtlSAASHwoHbmV4dENtZBgCIAEoCzIMLk5leHRDb21tYW5kSAAS",
            "HQoGYWNrQ21kGAMgASgLMgsuQWNrQ29tbWFuZEgAEh8KB25hY2tDbWQYBCAB",
            "KAsyDC5OYWNrQ29tbWFuZEgAEh0KCHN0cmVhbUluGAUgASgLMgkuU3RyZWFt",
            "SW5IABIgCgd0YXNrSWRzGAYgASgLMg0uVGFza0lkc1JlcGx5SAASHwoJaGVh",
            "cnRiZWF0GAcgASgLMgouSGVhcnRiZWF0SAASJwoLYWN0aXZhdGVDbWQYCCAB",
            "KAsyEC5BY3RpdmF0ZUNvbW1hbmRIABIrCg1kZWFjdGl2YXRlQ21kGAkgASgL",
            "MhIuRGVhY3RpdmF0ZUNvbW1hbmRIAEIFCgNtc2ciFQoHT2tSZXBseRIKCgJp",
            "ZBgBIAEoCSIXCglGYWlsUmVwbHkSCgoCaWQYASABKAkidgoLRW1pdENvbW1h",
            "bmQSCgoCaWQYASABKAkSDgoGc3RyZWFtGAIgASgJEhcKBXR1cGxlGAMgAygL",
            "MgguVmFyaWFudBIPCgdhbmNob3JzGAQgAygJEgwKBHRhc2sYBSABKAUSEwoL",
            "bmVlZFRhc2tJZHMYBiABKAgigAEKCkxvZ0NvbW1hbmQSDAoEdGV4dBgBIAEo",
            "CRIjCgVsZXZlbBgCIAEoDjIULkxvZ0NvbW1hbmQuTG9nTGV2ZWwiPwoITG9n",
            "TGV2ZWwSCQoFVHJhY2UQABIJCgVEZWJ1ZxABEggKBEluZm8QAhIICgRXYXJu",
            "EAMSCQoFRXJyb3IQBCIXCghQaWRSZXBseRILCgNwaWQYASABKAUiCwoJU3lu",
            "Y1JlcGx5IkIKBk1ldHJpYxIMCgRuYW1lGAEgASgJEioKCnBhcmFtZXRlcnMY",
            "AiADKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUizgEKCFNoZWxsTXNnEhYK",
            "Am9rGAEgASgLMgguT2tSZXBseUgAEhoKBGZhaWwYAiABKAsyCi5GYWlsUmVw",
            "bHlIABIcCgRlbWl0GAMgASgLMgwuRW1pdENvbW1hbmRIABIYCgNwaWQYBCAB",
            "KAsyCS5QaWRSZXBseUgAEhoKA2xvZxgFIAEoCzILLkxvZ0NvbW1hbmRIABIa",
            "CgRzeW5jGAYgASgLMgouU3luY1JlcGx5SAASFwoGbWV0cmljGAcgASgLMgcu",
            "TWV0cmljQgUKA21zZ0JBCiBjb20ucHJvbHVjaWQucHJvdG9zaGVsbC5tZXNz",
            "YWdlc6oCHFByb2x1Y2lkLlByb3RvU2hlbGwuTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.Context), global::Prolucid.ProtoShell.Messages.Context.Parser, new[]{ "TaskId", "TaskComponents", "ComponentId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.Handshake), global::Prolucid.ProtoShell.Messages.Handshake.Parser, new[]{ "PidDir", "Context", "Config" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.Variant), global::Prolucid.ProtoShell.Messages.Variant.Parser, new[]{ "StrVal", "Int32Val", "Int64Val", "FloatVal", "DoubleVal", "BoolVal", "BytesVal", "TimestampVal", "NoneVal" }, new[]{ "Kind" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.StreamIn), global::Prolucid.ProtoShell.Messages.StreamIn.Parser, new[]{ "Id", "Comp", "Stream", "Task", "Tuple" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.TaskIdsReply), global::Prolucid.ProtoShell.Messages.TaskIdsReply.Parser, new[]{ "TaskIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.Heartbeat), global::Prolucid.ProtoShell.Messages.Heartbeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.NextCommand), global::Prolucid.ProtoShell.Messages.NextCommand.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.AckCommand), global::Prolucid.ProtoShell.Messages.AckCommand.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.NackCommand), global::Prolucid.ProtoShell.Messages.NackCommand.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.ActivateCommand), global::Prolucid.ProtoShell.Messages.ActivateCommand.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.DeactivateCommand), global::Prolucid.ProtoShell.Messages.DeactivateCommand.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.StormMsg), global::Prolucid.ProtoShell.Messages.StormMsg.Parser, new[]{ "Handshake", "NextCmd", "AckCmd", "NackCmd", "StreamIn", "TaskIds", "Heartbeat", "ActivateCmd", "DeactivateCmd" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.OkReply), global::Prolucid.ProtoShell.Messages.OkReply.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.FailReply), global::Prolucid.ProtoShell.Messages.FailReply.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.EmitCommand), global::Prolucid.ProtoShell.Messages.EmitCommand.Parser, new[]{ "Id", "Stream", "Tuple", "Anchors", "Task", "NeedTaskIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.LogCommand), global::Prolucid.ProtoShell.Messages.LogCommand.Parser, new[]{ "Text", "Level" }, null, new[]{ typeof(global::Prolucid.ProtoShell.Messages.LogCommand.Types.LogLevel) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.PidReply), global::Prolucid.ProtoShell.Messages.PidReply.Parser, new[]{ "Pid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.SyncReply), global::Prolucid.ProtoShell.Messages.SyncReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.Metric), global::Prolucid.ProtoShell.Messages.Metric.Parser, new[]{ "Name", "Parameters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Prolucid.ProtoShell.Messages.ShellMsg), global::Prolucid.ProtoShell.Messages.ShellMsg.Parser, new[]{ "Ok", "Fail", "Emit", "Pid", "Log", "Sync", "Metric" }, new[]{ "Msg" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Context : pb::IMessage<Context> {
    private static readonly pb::MessageParser<Context> _parser = new pb::MessageParser<Context>(() => new Context());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Context> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context(Context other) : this() {
      taskId_ = other.taskId_;
      taskComponents_ = other.taskComponents_.Clone();
      componentId_ = other.componentId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Context Clone() {
      return new Context(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskComponents" field.</summary>
    public const int TaskComponentsFieldNumber = 2;
    private static readonly pbc::MapField<int, string>.Codec _map_taskComponents_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<int, string> taskComponents_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> TaskComponents {
      get { return taskComponents_; }
    }

    /// <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 3;
    private string componentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComponentId {
      get { return componentId_; }
      set {
        componentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Context);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Context other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (!TaskComponents.Equals(other.TaskComponents)) return false;
      if (ComponentId != other.ComponentId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      hash ^= TaskComponents.GetHashCode();
      if (ComponentId.Length != 0) hash ^= ComponentId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      taskComponents_.WriteTo(output, _map_taskComponents_codec);
      if (ComponentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ComponentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      size += taskComponents_.CalculateSize(_map_taskComponents_codec);
      if (ComponentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComponentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Context other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      taskComponents_.Add(other.taskComponents_);
      if (other.ComponentId.Length != 0) {
        ComponentId = other.ComponentId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 18: {
            taskComponents_.AddEntriesFrom(input, _map_taskComponents_codec);
            break;
          }
          case 26: {
            ComponentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Handshake : pb::IMessage<Handshake> {
    private static readonly pb::MessageParser<Handshake> _parser = new pb::MessageParser<Handshake>(() => new Handshake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Handshake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake(Handshake other) : this() {
      pidDir_ = other.pidDir_;
      Context = other.context_ != null ? other.Context.Clone() : null;
      config_ = other.config_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake Clone() {
      return new Handshake(this);
    }

    /// <summary>Field number for the "pidDir" field.</summary>
    public const int PidDirFieldNumber = 1;
    private string pidDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PidDir {
      get { return pidDir_; }
      set {
        pidDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private global::Prolucid.ProtoShell.Messages.Context context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.Context Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_config_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> config_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Config {
      get { return config_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Handshake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Handshake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PidDir != other.PidDir) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (!Config.Equals(other.Config)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PidDir.Length != 0) hash ^= PidDir.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      hash ^= Config.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PidDir.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PidDir);
      }
      if (context_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Context);
      }
      config_.WriteTo(output, _map_config_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PidDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PidDir);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      size += config_.CalculateSize(_map_config_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Handshake other) {
      if (other == null) {
        return;
      }
      if (other.PidDir.Length != 0) {
        PidDir = other.PidDir;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Prolucid.ProtoShell.Messages.Context();
        }
        Context.MergeFrom(other.Context);
      }
      config_.Add(other.config_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PidDir = input.ReadString();
            break;
          }
          case 18: {
            if (context_ == null) {
              context_ = new global::Prolucid.ProtoShell.Messages.Context();
            }
            input.ReadMessage(context_);
            break;
          }
          case 26: {
            config_.AddEntriesFrom(input, _map_config_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Variant : pb::IMessage<Variant> {
    private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant(Variant other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case KindOneofCase.Int32Val:
          Int32Val = other.Int32Val;
          break;
        case KindOneofCase.Int64Val:
          Int64Val = other.Int64Val;
          break;
        case KindOneofCase.FloatVal:
          FloatVal = other.FloatVal;
          break;
        case KindOneofCase.DoubleVal:
          DoubleVal = other.DoubleVal;
          break;
        case KindOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case KindOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case KindOneofCase.TimestampVal:
          TimestampVal = other.TimestampVal.Clone();
          break;
        case KindOneofCase.NoneVal:
          NoneVal = other.NoneVal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant Clone() {
      return new Variant(this);
    }

    /// <summary>Field number for the "strVal" field.</summary>
    public const int StrValFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrVal {
      get { return kindCase_ == KindOneofCase.StrVal ? (string) kind_ : ""; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.StrVal;
      }
    }

    /// <summary>Field number for the "int32Val" field.</summary>
    public const int Int32ValFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Val {
      get { return kindCase_ == KindOneofCase.Int32Val ? (int) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Int32Val;
      }
    }

    /// <summary>Field number for the "int64Val" field.</summary>
    public const int Int64ValFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Val {
      get { return kindCase_ == KindOneofCase.Int64Val ? (long) kind_ : 0L; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Int64Val;
      }
    }

    /// <summary>Field number for the "floatVal" field.</summary>
    public const int FloatValFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatVal {
      get { return kindCase_ == KindOneofCase.FloatVal ? (float) kind_ : 0F; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.FloatVal;
      }
    }

    /// <summary>Field number for the "doubleVal" field.</summary>
    public const int DoubleValFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleVal {
      get { return kindCase_ == KindOneofCase.DoubleVal ? (double) kind_ : 0D; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.DoubleVal;
      }
    }

    /// <summary>Field number for the "boolVal" field.</summary>
    public const int BoolValFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolVal {
      get { return kindCase_ == KindOneofCase.BoolVal ? (bool) kind_ : false; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.BoolVal;
      }
    }

    /// <summary>Field number for the "bytesVal" field.</summary>
    public const int BytesValFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesVal {
      get { return kindCase_ == KindOneofCase.BytesVal ? (pb::ByteString) kind_ : pb::ByteString.Empty; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.BytesVal;
      }
    }

    /// <summary>Field number for the "timestampVal" field.</summary>
    public const int TimestampValFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimestampVal {
      get { return kindCase_ == KindOneofCase.TimestampVal ? (global::Google.Protobuf.WellKnownTypes.Timestamp) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.TimestampVal;
      }
    }

    /// <summary>Field number for the "noneVal" field.</summary>
    public const int NoneValFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.NullValue NoneVal {
      get { return kindCase_ == KindOneofCase.NoneVal ? (global::Google.Protobuf.WellKnownTypes.NullValue) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.NoneVal;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      StrVal = 1,
      Int32Val = 2,
      Int64Val = 3,
      FloatVal = 4,
      DoubleVal = 5,
      BoolVal = 6,
      BytesVal = 7,
      TimestampVal = 8,
      NoneVal = 9,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrVal != other.StrVal) return false;
      if (Int32Val != other.Int32Val) return false;
      if (Int64Val != other.Int64Val) return false;
      if (FloatVal != other.FloatVal) return false;
      if (DoubleVal != other.DoubleVal) return false;
      if (BoolVal != other.BoolVal) return false;
      if (BytesVal != other.BytesVal) return false;
      if (!object.Equals(TimestampVal, other.TimestampVal)) return false;
      if (NoneVal != other.NoneVal) return false;
      if (KindCase != other.KindCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.StrVal) hash ^= StrVal.GetHashCode();
      if (kindCase_ == KindOneofCase.Int32Val) hash ^= Int32Val.GetHashCode();
      if (kindCase_ == KindOneofCase.Int64Val) hash ^= Int64Val.GetHashCode();
      if (kindCase_ == KindOneofCase.FloatVal) hash ^= FloatVal.GetHashCode();
      if (kindCase_ == KindOneofCase.DoubleVal) hash ^= DoubleVal.GetHashCode();
      if (kindCase_ == KindOneofCase.BoolVal) hash ^= BoolVal.GetHashCode();
      if (kindCase_ == KindOneofCase.BytesVal) hash ^= BytesVal.GetHashCode();
      if (kindCase_ == KindOneofCase.TimestampVal) hash ^= TimestampVal.GetHashCode();
      if (kindCase_ == KindOneofCase.NoneVal) hash ^= NoneVal.GetHashCode();
      hash ^= (int) kindCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kindCase_ == KindOneofCase.StrVal) {
        output.WriteRawTag(10);
        output.WriteString(StrVal);
      }
      if (kindCase_ == KindOneofCase.Int32Val) {
        output.WriteRawTag(16);
        output.WriteInt32(Int32Val);
      }
      if (kindCase_ == KindOneofCase.Int64Val) {
        output.WriteRawTag(24);
        output.WriteInt64(Int64Val);
      }
      if (kindCase_ == KindOneofCase.FloatVal) {
        output.WriteRawTag(37);
        output.WriteFloat(FloatVal);
      }
      if (kindCase_ == KindOneofCase.DoubleVal) {
        output.WriteRawTag(41);
        output.WriteDouble(DoubleVal);
      }
      if (kindCase_ == KindOneofCase.BoolVal) {
        output.WriteRawTag(48);
        output.WriteBool(BoolVal);
      }
      if (kindCase_ == KindOneofCase.BytesVal) {
        output.WriteRawTag(58);
        output.WriteBytes(BytesVal);
      }
      if (kindCase_ == KindOneofCase.TimestampVal) {
        output.WriteRawTag(66);
        output.WriteMessage(TimestampVal);
      }
      if (kindCase_ == KindOneofCase.NoneVal) {
        output.WriteRawTag(72);
        output.WriteEnum((int) NoneVal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.StrVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrVal);
      }
      if (kindCase_ == KindOneofCase.Int32Val) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Val);
      }
      if (kindCase_ == KindOneofCase.Int64Val) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Val);
      }
      if (kindCase_ == KindOneofCase.FloatVal) {
        size += 1 + 4;
      }
      if (kindCase_ == KindOneofCase.DoubleVal) {
        size += 1 + 8;
      }
      if (kindCase_ == KindOneofCase.BoolVal) {
        size += 1 + 1;
      }
      if (kindCase_ == KindOneofCase.BytesVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesVal);
      }
      if (kindCase_ == KindOneofCase.TimestampVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampVal);
      }
      if (kindCase_ == KindOneofCase.NoneVal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoneVal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variant other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case KindOneofCase.Int32Val:
          Int32Val = other.Int32Val;
          break;
        case KindOneofCase.Int64Val:
          Int64Val = other.Int64Val;
          break;
        case KindOneofCase.FloatVal:
          FloatVal = other.FloatVal;
          break;
        case KindOneofCase.DoubleVal:
          DoubleVal = other.DoubleVal;
          break;
        case KindOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case KindOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case KindOneofCase.TimestampVal:
          TimestampVal = other.TimestampVal;
          break;
        case KindOneofCase.NoneVal:
          NoneVal = other.NoneVal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StrVal = input.ReadString();
            break;
          }
          case 16: {
            Int32Val = input.ReadInt32();
            break;
          }
          case 24: {
            Int64Val = input.ReadInt64();
            break;
          }
          case 37: {
            FloatVal = input.ReadFloat();
            break;
          }
          case 41: {
            DoubleVal = input.ReadDouble();
            break;
          }
          case 48: {
            BoolVal = input.ReadBool();
            break;
          }
          case 58: {
            BytesVal = input.ReadBytes();
            break;
          }
          case 66: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (kindCase_ == KindOneofCase.TimestampVal) {
              subBuilder.MergeFrom(TimestampVal);
            }
            input.ReadMessage(subBuilder);
            TimestampVal = subBuilder;
            break;
          }
          case 72: {
            kind_ = input.ReadEnum();
            kindCase_ = KindOneofCase.NoneVal;
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamIn : pb::IMessage<StreamIn> {
    private static readonly pb::MessageParser<StreamIn> _parser = new pb::MessageParser<StreamIn>(() => new StreamIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamIn(StreamIn other) : this() {
      id_ = other.id_;
      comp_ = other.comp_;
      stream_ = other.stream_;
      task_ = other.task_;
      tuple_ = other.tuple_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamIn Clone() {
      return new StreamIn(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comp" field.</summary>
    public const int CompFieldNumber = 2;
    private string comp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comp {
      get { return comp_; }
      set {
        comp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 3;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 4;
    private int task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Prolucid.ProtoShell.Messages.Variant> _repeated_tuple_codec
        = pb::FieldCodec.ForMessage(42, global::Prolucid.ProtoShell.Messages.Variant.Parser);
    private readonly pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant> tuple_ = new pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant> Tuple {
      get { return tuple_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Comp != other.Comp) return false;
      if (Stream != other.Stream) return false;
      if (Task != other.Task) return false;
      if(!tuple_.Equals(other.tuple_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Comp.Length != 0) hash ^= Comp.GetHashCode();
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      if (Task != 0) hash ^= Task.GetHashCode();
      hash ^= tuple_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Comp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comp);
      }
      if (Stream.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Stream);
      }
      if (Task != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Task);
      }
      tuple_.WriteTo(output, _repeated_tuple_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Comp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comp);
      }
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      if (Task != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Task);
      }
      size += tuple_.CalculateSize(_repeated_tuple_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamIn other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Comp.Length != 0) {
        Comp = other.Comp;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      if (other.Task != 0) {
        Task = other.Task;
      }
      tuple_.Add(other.tuple_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Comp = input.ReadString();
            break;
          }
          case 26: {
            Stream = input.ReadString();
            break;
          }
          case 32: {
            Task = input.ReadInt32();
            break;
          }
          case 42: {
            tuple_.AddEntriesFrom(input, _repeated_tuple_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskIdsReply : pb::IMessage<TaskIdsReply> {
    private static readonly pb::MessageParser<TaskIdsReply> _parser = new pb::MessageParser<TaskIdsReply>(() => new TaskIdsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskIdsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskIdsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskIdsReply(TaskIdsReply other) : this() {
      taskIds_ = other.taskIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskIdsReply Clone() {
      return new TaskIdsReply(this);
    }

    /// <summary>Field number for the "taskIds" field.</summary>
    public const int TaskIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_taskIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> taskIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaskIds {
      get { return taskIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskIdsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskIdsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskIds_.Equals(other.taskIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskIds_.WriteTo(output, _repeated_taskIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskIds_.CalculateSize(_repeated_taskIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskIdsReply other) {
      if (other == null) {
        return;
      }
      taskIds_.Add(other.taskIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            taskIds_.AddEntriesFrom(input, _repeated_taskIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NextCommand : pb::IMessage<NextCommand> {
    private static readonly pb::MessageParser<NextCommand> _parser = new pb::MessageParser<NextCommand>(() => new NextCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextCommand(NextCommand other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextCommand Clone() {
      return new NextCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextCommand other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class AckCommand : pb::IMessage<AckCommand> {
    private static readonly pb::MessageParser<AckCommand> _parser = new pb::MessageParser<AckCommand>(() => new AckCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCommand(AckCommand other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCommand Clone() {
      return new AckCommand(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckCommand other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NackCommand : pb::IMessage<NackCommand> {
    private static readonly pb::MessageParser<NackCommand> _parser = new pb::MessageParser<NackCommand>(() => new NackCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NackCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NackCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NackCommand(NackCommand other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NackCommand Clone() {
      return new NackCommand(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NackCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NackCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NackCommand other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivateCommand : pb::IMessage<ActivateCommand> {
    private static readonly pb::MessageParser<ActivateCommand> _parser = new pb::MessageParser<ActivateCommand>(() => new ActivateCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateCommand(ActivateCommand other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateCommand Clone() {
      return new ActivateCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateCommand other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DeactivateCommand : pb::IMessage<DeactivateCommand> {
    private static readonly pb::MessageParser<DeactivateCommand> _parser = new pb::MessageParser<DeactivateCommand>(() => new DeactivateCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeactivateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeactivateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeactivateCommand(DeactivateCommand other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeactivateCommand Clone() {
      return new DeactivateCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeactivateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeactivateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeactivateCommand other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StormMsg : pb::IMessage<StormMsg> {
    private static readonly pb::MessageParser<StormMsg> _parser = new pb::MessageParser<StormMsg>(() => new StormMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StormMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StormMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StormMsg(StormMsg other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Handshake:
          Handshake = other.Handshake.Clone();
          break;
        case MsgOneofCase.NextCmd:
          NextCmd = other.NextCmd.Clone();
          break;
        case MsgOneofCase.AckCmd:
          AckCmd = other.AckCmd.Clone();
          break;
        case MsgOneofCase.NackCmd:
          NackCmd = other.NackCmd.Clone();
          break;
        case MsgOneofCase.StreamIn:
          StreamIn = other.StreamIn.Clone();
          break;
        case MsgOneofCase.TaskIds:
          TaskIds = other.TaskIds.Clone();
          break;
        case MsgOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case MsgOneofCase.ActivateCmd:
          ActivateCmd = other.ActivateCmd.Clone();
          break;
        case MsgOneofCase.DeactivateCmd:
          DeactivateCmd = other.DeactivateCmd.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StormMsg Clone() {
      return new StormMsg(this);
    }

    /// <summary>Field number for the "handshake" field.</summary>
    public const int HandshakeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.Handshake Handshake {
      get { return msgCase_ == MsgOneofCase.Handshake ? (global::Prolucid.ProtoShell.Messages.Handshake) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Handshake;
      }
    }

    /// <summary>Field number for the "nextCmd" field.</summary>
    public const int NextCmdFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.NextCommand NextCmd {
      get { return msgCase_ == MsgOneofCase.NextCmd ? (global::Prolucid.ProtoShell.Messages.NextCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NextCmd;
      }
    }

    /// <summary>Field number for the "ackCmd" field.</summary>
    public const int AckCmdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.AckCommand AckCmd {
      get { return msgCase_ == MsgOneofCase.AckCmd ? (global::Prolucid.ProtoShell.Messages.AckCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AckCmd;
      }
    }

    /// <summary>Field number for the "nackCmd" field.</summary>
    public const int NackCmdFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.NackCommand NackCmd {
      get { return msgCase_ == MsgOneofCase.NackCmd ? (global::Prolucid.ProtoShell.Messages.NackCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NackCmd;
      }
    }

    /// <summary>Field number for the "streamIn" field.</summary>
    public const int StreamInFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.StreamIn StreamIn {
      get { return msgCase_ == MsgOneofCase.StreamIn ? (global::Prolucid.ProtoShell.Messages.StreamIn) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StreamIn;
      }
    }

    /// <summary>Field number for the "taskIds" field.</summary>
    public const int TaskIdsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.TaskIdsReply TaskIds {
      get { return msgCase_ == MsgOneofCase.TaskIds ? (global::Prolucid.ProtoShell.Messages.TaskIdsReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TaskIds;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.Heartbeat Heartbeat {
      get { return msgCase_ == MsgOneofCase.Heartbeat ? (global::Prolucid.ProtoShell.Messages.Heartbeat) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "activateCmd" field.</summary>
    public const int ActivateCmdFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.ActivateCommand ActivateCmd {
      get { return msgCase_ == MsgOneofCase.ActivateCmd ? (global::Prolucid.ProtoShell.Messages.ActivateCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ActivateCmd;
      }
    }

    /// <summary>Field number for the "deactivateCmd" field.</summary>
    public const int DeactivateCmdFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.DeactivateCommand DeactivateCmd {
      get { return msgCase_ == MsgOneofCase.DeactivateCmd ? (global::Prolucid.ProtoShell.Messages.DeactivateCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.DeactivateCmd;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Handshake = 1,
      NextCmd = 2,
      AckCmd = 3,
      NackCmd = 4,
      StreamIn = 5,
      TaskIds = 6,
      Heartbeat = 7,
      ActivateCmd = 8,
      DeactivateCmd = 9,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StormMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StormMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Handshake, other.Handshake)) return false;
      if (!object.Equals(NextCmd, other.NextCmd)) return false;
      if (!object.Equals(AckCmd, other.AckCmd)) return false;
      if (!object.Equals(NackCmd, other.NackCmd)) return false;
      if (!object.Equals(StreamIn, other.StreamIn)) return false;
      if (!object.Equals(TaskIds, other.TaskIds)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(ActivateCmd, other.ActivateCmd)) return false;
      if (!object.Equals(DeactivateCmd, other.DeactivateCmd)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Handshake) hash ^= Handshake.GetHashCode();
      if (msgCase_ == MsgOneofCase.NextCmd) hash ^= NextCmd.GetHashCode();
      if (msgCase_ == MsgOneofCase.AckCmd) hash ^= AckCmd.GetHashCode();
      if (msgCase_ == MsgOneofCase.NackCmd) hash ^= NackCmd.GetHashCode();
      if (msgCase_ == MsgOneofCase.StreamIn) hash ^= StreamIn.GetHashCode();
      if (msgCase_ == MsgOneofCase.TaskIds) hash ^= TaskIds.GetHashCode();
      if (msgCase_ == MsgOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (msgCase_ == MsgOneofCase.ActivateCmd) hash ^= ActivateCmd.GetHashCode();
      if (msgCase_ == MsgOneofCase.DeactivateCmd) hash ^= DeactivateCmd.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Handshake) {
        output.WriteRawTag(10);
        output.WriteMessage(Handshake);
      }
      if (msgCase_ == MsgOneofCase.NextCmd) {
        output.WriteRawTag(18);
        output.WriteMessage(NextCmd);
      }
      if (msgCase_ == MsgOneofCase.AckCmd) {
        output.WriteRawTag(26);
        output.WriteMessage(AckCmd);
      }
      if (msgCase_ == MsgOneofCase.NackCmd) {
        output.WriteRawTag(34);
        output.WriteMessage(NackCmd);
      }
      if (msgCase_ == MsgOneofCase.StreamIn) {
        output.WriteRawTag(42);
        output.WriteMessage(StreamIn);
      }
      if (msgCase_ == MsgOneofCase.TaskIds) {
        output.WriteRawTag(50);
        output.WriteMessage(TaskIds);
      }
      if (msgCase_ == MsgOneofCase.Heartbeat) {
        output.WriteRawTag(58);
        output.WriteMessage(Heartbeat);
      }
      if (msgCase_ == MsgOneofCase.ActivateCmd) {
        output.WriteRawTag(66);
        output.WriteMessage(ActivateCmd);
      }
      if (msgCase_ == MsgOneofCase.DeactivateCmd) {
        output.WriteRawTag(74);
        output.WriteMessage(DeactivateCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Handshake) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handshake);
      }
      if (msgCase_ == MsgOneofCase.NextCmd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextCmd);
      }
      if (msgCase_ == MsgOneofCase.AckCmd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AckCmd);
      }
      if (msgCase_ == MsgOneofCase.NackCmd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NackCmd);
      }
      if (msgCase_ == MsgOneofCase.StreamIn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamIn);
      }
      if (msgCase_ == MsgOneofCase.TaskIds) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskIds);
      }
      if (msgCase_ == MsgOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (msgCase_ == MsgOneofCase.ActivateCmd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivateCmd);
      }
      if (msgCase_ == MsgOneofCase.DeactivateCmd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeactivateCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StormMsg other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Handshake:
          Handshake = other.Handshake;
          break;
        case MsgOneofCase.NextCmd:
          NextCmd = other.NextCmd;
          break;
        case MsgOneofCase.AckCmd:
          AckCmd = other.AckCmd;
          break;
        case MsgOneofCase.NackCmd:
          NackCmd = other.NackCmd;
          break;
        case MsgOneofCase.StreamIn:
          StreamIn = other.StreamIn;
          break;
        case MsgOneofCase.TaskIds:
          TaskIds = other.TaskIds;
          break;
        case MsgOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat;
          break;
        case MsgOneofCase.ActivateCmd:
          ActivateCmd = other.ActivateCmd;
          break;
        case MsgOneofCase.DeactivateCmd:
          DeactivateCmd = other.DeactivateCmd;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Prolucid.ProtoShell.Messages.Handshake subBuilder = new global::Prolucid.ProtoShell.Messages.Handshake();
            if (msgCase_ == MsgOneofCase.Handshake) {
              subBuilder.MergeFrom(Handshake);
            }
            input.ReadMessage(subBuilder);
            Handshake = subBuilder;
            break;
          }
          case 18: {
            global::Prolucid.ProtoShell.Messages.NextCommand subBuilder = new global::Prolucid.ProtoShell.Messages.NextCommand();
            if (msgCase_ == MsgOneofCase.NextCmd) {
              subBuilder.MergeFrom(NextCmd);
            }
            input.ReadMessage(subBuilder);
            NextCmd = subBuilder;
            break;
          }
          case 26: {
            global::Prolucid.ProtoShell.Messages.AckCommand subBuilder = new global::Prolucid.ProtoShell.Messages.AckCommand();
            if (msgCase_ == MsgOneofCase.AckCmd) {
              subBuilder.MergeFrom(AckCmd);
            }
            input.ReadMessage(subBuilder);
            AckCmd = subBuilder;
            break;
          }
          case 34: {
            global::Prolucid.ProtoShell.Messages.NackCommand subBuilder = new global::Prolucid.ProtoShell.Messages.NackCommand();
            if (msgCase_ == MsgOneofCase.NackCmd) {
              subBuilder.MergeFrom(NackCmd);
            }
            input.ReadMessage(subBuilder);
            NackCmd = subBuilder;
            break;
          }
          case 42: {
            global::Prolucid.ProtoShell.Messages.StreamIn subBuilder = new global::Prolucid.ProtoShell.Messages.StreamIn();
            if (msgCase_ == MsgOneofCase.StreamIn) {
              subBuilder.MergeFrom(StreamIn);
            }
            input.ReadMessage(subBuilder);
            StreamIn = subBuilder;
            break;
          }
          case 50: {
            global::Prolucid.ProtoShell.Messages.TaskIdsReply subBuilder = new global::Prolucid.ProtoShell.Messages.TaskIdsReply();
            if (msgCase_ == MsgOneofCase.TaskIds) {
              subBuilder.MergeFrom(TaskIds);
            }
            input.ReadMessage(subBuilder);
            TaskIds = subBuilder;
            break;
          }
          case 58: {
            global::Prolucid.ProtoShell.Messages.Heartbeat subBuilder = new global::Prolucid.ProtoShell.Messages.Heartbeat();
            if (msgCase_ == MsgOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 66: {
            global::Prolucid.ProtoShell.Messages.ActivateCommand subBuilder = new global::Prolucid.ProtoShell.Messages.ActivateCommand();
            if (msgCase_ == MsgOneofCase.ActivateCmd) {
              subBuilder.MergeFrom(ActivateCmd);
            }
            input.ReadMessage(subBuilder);
            ActivateCmd = subBuilder;
            break;
          }
          case 74: {
            global::Prolucid.ProtoShell.Messages.DeactivateCommand subBuilder = new global::Prolucid.ProtoShell.Messages.DeactivateCommand();
            if (msgCase_ == MsgOneofCase.DeactivateCmd) {
              subBuilder.MergeFrom(DeactivateCmd);
            }
            input.ReadMessage(subBuilder);
            DeactivateCmd = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class OkReply : pb::IMessage<OkReply> {
    private static readonly pb::MessageParser<OkReply> _parser = new pb::MessageParser<OkReply>(() => new OkReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OkReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkReply(OkReply other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkReply Clone() {
      return new OkReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OkReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OkReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OkReply other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FailReply : pb::IMessage<FailReply> {
    private static readonly pb::MessageParser<FailReply> _parser = new pb::MessageParser<FailReply>(() => new FailReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FailReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailReply(FailReply other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailReply Clone() {
      return new FailReply(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FailReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FailReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FailReply other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmitCommand : pb::IMessage<EmitCommand> {
    private static readonly pb::MessageParser<EmitCommand> _parser = new pb::MessageParser<EmitCommand>(() => new EmitCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmitCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitCommand(EmitCommand other) : this() {
      id_ = other.id_;
      stream_ = other.stream_;
      tuple_ = other.tuple_.Clone();
      anchors_ = other.anchors_.Clone();
      task_ = other.task_;
      needTaskIds_ = other.needTaskIds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmitCommand Clone() {
      return new EmitCommand(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 2;
    private string stream_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stream {
      get { return stream_; }
      set {
        stream_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Prolucid.ProtoShell.Messages.Variant> _repeated_tuple_codec
        = pb::FieldCodec.ForMessage(26, global::Prolucid.ProtoShell.Messages.Variant.Parser);
    private readonly pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant> tuple_ = new pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Prolucid.ProtoShell.Messages.Variant> Tuple {
      get { return tuple_; }
    }

    /// <summary>Field number for the "anchors" field.</summary>
    public const int AnchorsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_anchors_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> anchors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Anchors {
      get { return anchors_; }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 5;
    private int task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "needTaskIds" field.</summary>
    public const int NeedTaskIdsFieldNumber = 6;
    private bool needTaskIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedTaskIds {
      get { return needTaskIds_; }
      set {
        needTaskIds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmitCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmitCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Stream != other.Stream) return false;
      if(!tuple_.Equals(other.tuple_)) return false;
      if(!anchors_.Equals(other.anchors_)) return false;
      if (Task != other.Task) return false;
      if (NeedTaskIds != other.NeedTaskIds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Stream.Length != 0) hash ^= Stream.GetHashCode();
      hash ^= tuple_.GetHashCode();
      hash ^= anchors_.GetHashCode();
      if (Task != 0) hash ^= Task.GetHashCode();
      if (NeedTaskIds != false) hash ^= NeedTaskIds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Stream.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Stream);
      }
      tuple_.WriteTo(output, _repeated_tuple_codec);
      anchors_.WriteTo(output, _repeated_anchors_codec);
      if (Task != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Task);
      }
      if (NeedTaskIds != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedTaskIds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Stream.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stream);
      }
      size += tuple_.CalculateSize(_repeated_tuple_codec);
      size += anchors_.CalculateSize(_repeated_anchors_codec);
      if (Task != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Task);
      }
      if (NeedTaskIds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmitCommand other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Stream.Length != 0) {
        Stream = other.Stream;
      }
      tuple_.Add(other.tuple_);
      anchors_.Add(other.anchors_);
      if (other.Task != 0) {
        Task = other.Task;
      }
      if (other.NeedTaskIds != false) {
        NeedTaskIds = other.NeedTaskIds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Stream = input.ReadString();
            break;
          }
          case 26: {
            tuple_.AddEntriesFrom(input, _repeated_tuple_codec);
            break;
          }
          case 34: {
            anchors_.AddEntriesFrom(input, _repeated_anchors_codec);
            break;
          }
          case 40: {
            Task = input.ReadInt32();
            break;
          }
          case 48: {
            NeedTaskIds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogCommand : pb::IMessage<LogCommand> {
    private static readonly pb::MessageParser<LogCommand> _parser = new pb::MessageParser<LogCommand>(() => new LogCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCommand(LogCommand other) : this() {
      text_ = other.text_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogCommand Clone() {
      return new LogCommand(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private global::Prolucid.ProtoShell.Messages.LogCommand.Types.LogLevel level_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.LogCommand.Types.LogLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogCommand other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            level_ = (global::Prolucid.ProtoShell.Messages.LogCommand.Types.LogLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LogLevel {
        [pbr::OriginalName("Trace")] Trace = 0,
        [pbr::OriginalName("Debug")] Debug = 1,
        [pbr::OriginalName("Info")] Info = 2,
        [pbr::OriginalName("Warn")] Warn = 3,
        [pbr::OriginalName("Error")] Error = 4,
      }

    }
    #endregion

  }

  public sealed partial class PidReply : pb::IMessage<PidReply> {
    private static readonly pb::MessageParser<PidReply> _parser = new pb::MessageParser<PidReply>(() => new PidReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PidReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PidReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PidReply(PidReply other) : this() {
      pid_ = other.pid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PidReply Clone() {
      return new PidReply(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PidReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PidReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PidReply other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncReply : pb::IMessage<SyncReply> {
    private static readonly pb::MessageParser<SyncReply> _parser = new pb::MessageParser<SyncReply>(() => new SyncReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncReply(SyncReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncReply Clone() {
      return new SyncReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Metric : pb::IMessage<Metric> {
    private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric(Metric other) : this() {
      name_ = other.name_;
      parameters_ = other.parameters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric Clone() {
      return new Metric(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Value> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> parameters_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Value> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= parameters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metric other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      parameters_.Add(other.parameters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShellMsg : pb::IMessage<ShellMsg> {
    private static readonly pb::MessageParser<ShellMsg> _parser = new pb::MessageParser<ShellMsg>(() => new ShellMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShellMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Prolucid.ProtoShell.Messages.MultilangReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellMsg(ShellMsg other) : this() {
      Metric = other.metric_ != null ? other.Metric.Clone() : null;
      switch (other.MsgCase) {
        case MsgOneofCase.Ok:
          Ok = other.Ok.Clone();
          break;
        case MsgOneofCase.Fail:
          Fail = other.Fail.Clone();
          break;
        case MsgOneofCase.Emit:
          Emit = other.Emit.Clone();
          break;
        case MsgOneofCase.Pid:
          Pid = other.Pid.Clone();
          break;
        case MsgOneofCase.Log:
          Log = other.Log.Clone();
          break;
        case MsgOneofCase.Sync:
          Sync = other.Sync.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellMsg Clone() {
      return new ShellMsg(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.OkReply Ok {
      get { return msgCase_ == MsgOneofCase.Ok ? (global::Prolucid.ProtoShell.Messages.OkReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Ok;
      }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.FailReply Fail {
      get { return msgCase_ == MsgOneofCase.Fail ? (global::Prolucid.ProtoShell.Messages.FailReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Fail;
      }
    }

    /// <summary>Field number for the "emit" field.</summary>
    public const int EmitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.EmitCommand Emit {
      get { return msgCase_ == MsgOneofCase.Emit ? (global::Prolucid.ProtoShell.Messages.EmitCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Emit;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.PidReply Pid {
      get { return msgCase_ == MsgOneofCase.Pid ? (global::Prolucid.ProtoShell.Messages.PidReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Pid;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.LogCommand Log {
      get { return msgCase_ == MsgOneofCase.Log ? (global::Prolucid.ProtoShell.Messages.LogCommand) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Log;
      }
    }

    /// <summary>Field number for the "sync" field.</summary>
    public const int SyncFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.SyncReply Sync {
      get { return msgCase_ == MsgOneofCase.Sync ? (global::Prolucid.ProtoShell.Messages.SyncReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Sync;
      }
    }

    /// <summary>Field number for the "metric" field.</summary>
    public const int MetricFieldNumber = 7;
    private global::Prolucid.ProtoShell.Messages.Metric metric_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Prolucid.ProtoShell.Messages.Metric Metric {
      get { return metric_; }
      set {
        metric_ = value;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Ok = 1,
      Fail = 2,
      Emit = 3,
      Pid = 4,
      Log = 5,
      Sync = 6,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShellMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShellMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ok, other.Ok)) return false;
      if (!object.Equals(Fail, other.Fail)) return false;
      if (!object.Equals(Emit, other.Emit)) return false;
      if (!object.Equals(Pid, other.Pid)) return false;
      if (!object.Equals(Log, other.Log)) return false;
      if (!object.Equals(Sync, other.Sync)) return false;
      if (!object.Equals(Metric, other.Metric)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Ok) hash ^= Ok.GetHashCode();
      if (msgCase_ == MsgOneofCase.Fail) hash ^= Fail.GetHashCode();
      if (msgCase_ == MsgOneofCase.Emit) hash ^= Emit.GetHashCode();
      if (msgCase_ == MsgOneofCase.Pid) hash ^= Pid.GetHashCode();
      if (msgCase_ == MsgOneofCase.Log) hash ^= Log.GetHashCode();
      if (msgCase_ == MsgOneofCase.Sync) hash ^= Sync.GetHashCode();
      if (metric_ != null) hash ^= Metric.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Ok) {
        output.WriteRawTag(10);
        output.WriteMessage(Ok);
      }
      if (msgCase_ == MsgOneofCase.Fail) {
        output.WriteRawTag(18);
        output.WriteMessage(Fail);
      }
      if (msgCase_ == MsgOneofCase.Emit) {
        output.WriteRawTag(26);
        output.WriteMessage(Emit);
      }
      if (msgCase_ == MsgOneofCase.Pid) {
        output.WriteRawTag(34);
        output.WriteMessage(Pid);
      }
      if (msgCase_ == MsgOneofCase.Log) {
        output.WriteRawTag(42);
        output.WriteMessage(Log);
      }
      if (msgCase_ == MsgOneofCase.Sync) {
        output.WriteRawTag(50);
        output.WriteMessage(Sync);
      }
      if (metric_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Metric);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ok);
      }
      if (msgCase_ == MsgOneofCase.Fail) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fail);
      }
      if (msgCase_ == MsgOneofCase.Emit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emit);
      }
      if (msgCase_ == MsgOneofCase.Pid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pid);
      }
      if (msgCase_ == MsgOneofCase.Log) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Log);
      }
      if (msgCase_ == MsgOneofCase.Sync) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sync);
      }
      if (metric_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metric);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShellMsg other) {
      if (other == null) {
        return;
      }
      if (other.metric_ != null) {
        if (metric_ == null) {
          metric_ = new global::Prolucid.ProtoShell.Messages.Metric();
        }
        Metric.MergeFrom(other.Metric);
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Ok:
          Ok = other.Ok;
          break;
        case MsgOneofCase.Fail:
          Fail = other.Fail;
          break;
        case MsgOneofCase.Emit:
          Emit = other.Emit;
          break;
        case MsgOneofCase.Pid:
          Pid = other.Pid;
          break;
        case MsgOneofCase.Log:
          Log = other.Log;
          break;
        case MsgOneofCase.Sync:
          Sync = other.Sync;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Prolucid.ProtoShell.Messages.OkReply subBuilder = new global::Prolucid.ProtoShell.Messages.OkReply();
            if (msgCase_ == MsgOneofCase.Ok) {
              subBuilder.MergeFrom(Ok);
            }
            input.ReadMessage(subBuilder);
            Ok = subBuilder;
            break;
          }
          case 18: {
            global::Prolucid.ProtoShell.Messages.FailReply subBuilder = new global::Prolucid.ProtoShell.Messages.FailReply();
            if (msgCase_ == MsgOneofCase.Fail) {
              subBuilder.MergeFrom(Fail);
            }
            input.ReadMessage(subBuilder);
            Fail = subBuilder;
            break;
          }
          case 26: {
            global::Prolucid.ProtoShell.Messages.EmitCommand subBuilder = new global::Prolucid.ProtoShell.Messages.EmitCommand();
            if (msgCase_ == MsgOneofCase.Emit) {
              subBuilder.MergeFrom(Emit);
            }
            input.ReadMessage(subBuilder);
            Emit = subBuilder;
            break;
          }
          case 34: {
            global::Prolucid.ProtoShell.Messages.PidReply subBuilder = new global::Prolucid.ProtoShell.Messages.PidReply();
            if (msgCase_ == MsgOneofCase.Pid) {
              subBuilder.MergeFrom(Pid);
            }
            input.ReadMessage(subBuilder);
            Pid = subBuilder;
            break;
          }
          case 42: {
            global::Prolucid.ProtoShell.Messages.LogCommand subBuilder = new global::Prolucid.ProtoShell.Messages.LogCommand();
            if (msgCase_ == MsgOneofCase.Log) {
              subBuilder.MergeFrom(Log);
            }
            input.ReadMessage(subBuilder);
            Log = subBuilder;
            break;
          }
          case 50: {
            global::Prolucid.ProtoShell.Messages.SyncReply subBuilder = new global::Prolucid.ProtoShell.Messages.SyncReply();
            if (msgCase_ == MsgOneofCase.Sync) {
              subBuilder.MergeFrom(Sync);
            }
            input.ReadMessage(subBuilder);
            Sync = subBuilder;
            break;
          }
          case 58: {
            if (metric_ == null) {
              metric_ = new global::Prolucid.ProtoShell.Messages.Metric();
            }
            input.ReadMessage(metric_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
